container Templates: Using = "Units;geometries;Classifications"
{      
	#include<CreateNetwerk_Basic_T.dms> //network creation basic, used for determining congestion speeds
	#include<PrivateTransport_Car_T.dms>
	#include<CreateNetwork_NotOptimised_T.dms> //network creation with part that omits junction free sections
	#include<CreateNetwork_Pedestrian_Bike_T.dms>
	#include<CreateNetwork_Efficient_T.dms>   //network creation with part that omits JFS, and dead branches
	#include<CreateNetwork_TomTom_T.dms>   //network creation without optimisation. Used for TomTom with Directions
	#include<Determine_CongestedSpeeds_T.dms> 
	#include<StaticNetsCreator.dms>
	#include<MakeNetwerkType_T.dms>
	#include<Check_Connectiveness_T.dms>
	
	Template Check_Connectiveness_T_adhoc
	{
		unit<uint32> LinkSet_domain;
		unit<uint32> NodeSet_domain;
		attribute<NodeSet_domain> F1(LinkSet_domain);
		attribute<NodeSet_domain> F2(LinkSet_domain);
		///
		
		attribute<bool>                      IsVerbonden  (LinkSet_domain) := Networks/IsConnected[F1] && Networks/IsConnected[F2];
		unit<uint32> Networks:= connected_parts(LinkSet_domain/F1, LinkSet_domain/F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		{
			attribute<uint32>   Nr_Nodes   := pcount(PartNr);
			parameter<Networks> Main       := max_index(Nr_Nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			attribute<bool>     IsConnected   (NodeSet_domain) := PartNr == Main;
		}

		unit<uint32> NodesNotConnected := select_with_org_rel(!Networks/Isconnected)
		{
			// attribute<BaseProjection> geometry := org_rel -> values;
		}
	}
	
	#include<LoadCSVThroughGDAL_T.dms>
	#include<doDateSelection_T.dms>
	
	
	
	unit<SPoint> Neighbourhood := range(spoint, point_xy(int16(-1), int16(-1)), point_xy(int16(2), int16(2))), Descr = "Rooks case contiguous neighbours (first order)"
	{
		attribute<uint32> Top     := uint32(id(.) = point_xy(int16(0),int16(1),spoint));
		attribute<uint32> Right   := uint32(id(.) = point_xy(int16(1),int16(0),spoint));
		attribute<uint32> Bottom  := uint32(id(.) = point_xy(int16(0),int16(-1),spoint));
		attribute<uint32> Left    := uint32(id(.) = point_xy(int16(-1),int16(0),spoint));
	}
	
	Template Merge_Regions_OV_T
	{
		parameter<string> Export_CombinationTypes;
		parameter<string> Time;	
		parameter<string> Dest_str;
		//
		
		unit<uint32> Merged := ='union_unit('+AsItemList('Read/'+Advanced/Regio/name+'/PerTime/'+Time+'/domain')+')'
		{
			attribute<string>  OrgName    := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/PerTime/'+Time+'/data/OrgName')+')';
			attribute<string>  DestName   := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/PerTime/'+Time+'/data/DestName')+')';
			attribute<min_f>   Traveltime := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/PerTime/'+Time+'/data/Traveltime')+')';
			attribute<float32> Price      := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/PerTime/'+Time+'/data/Price[float32]')+')';
			attribute<string>  ModeUsed   := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/PerTime/'+Time+'/data/ModeUsed')+')';
			attribute<string>  Label      := OrgName +'_'+DestName, DialogType = "LabelText";
			
		}
		
		container LongFormat
		{
			attribute<string>  BodyLines_fullOD_wPrijs  (Merged) := Merged/OrgName + ';' + Merged/DestName + ';' + string(Merged/Traveltime) + ';' + Merged/ModeUsed + ';' + string(Merged/Price);
			parameter<string>  File_fullOD_wPrijs                := 'OrgName;DestName;Traveltime_m_'+Time+';ModeUsed_'+Time+';Price\n'++AsList(BodyLines_fullOD_wPrijs, '\n')
																		, StorageName = "= Advanced/fileNamePrefix+'Traveltime_Long_'+Export_CombinationTypes+''+fileNameSuffix +'.csv'", StorageType = "str";
		
			attribute<string>  BodyLines_fullOD_woPrijs (Merged) := Merged/OrgName + ';' + Merged/DestName + ';' + string(Merged/Traveltime) + ';' + Merged/ModeUsed;
			parameter<string>  File_fullOD_woPrijs               := 'OrgName;DestName;Traveltime_m_'+Time+';ModeUsed_'+Time+'\n'++AsList(BodyLines_fullOD_woPrijs, '\n')
																		, StorageName = "= Advanced/fileNamePrefix+'Traveltime_Long_'+Export_CombinationTypes+''+fileNameSuffix +'.csv'", StorageType = "str";
		
			parameter<string>  File_fullOD                       := =Add_OV_PriceInformation ? 'File_fullOD_wPrijs' : 'File_fullOD_woPrijs';
			
			// attribute<string>  BodyLines_decay (org)              := org/name + ';' + string(nr_items_of_interest_bereikbaar_decayed);
			// parameter<string>  File_decay                         := 'Org;'+Advanced/items_of_interest+'_'+Time+'\n'++AsList(BodyLines_decay, '\n'), StorageName = "=fileNamePrefix + Advanced/items_of_interest+'_decayed_Long_'+TypeName+''+fileNameSuffix +'.csv'", StorageType = "str";
		}
		
		parameter<string> Export_filename       := Advanced/fileNamePrefix+'Traveltime_Long_'+Export_CombinationTypes+''+fileNameSuffix+'.csv';
		parameter<string> fileNameSuffix :=  
			'_' + Analysis_Date + 
			'_' + Advanced/Arrival_or_Departure_at_time + 
			'_' + Time + 
			'_ORG-' + Orgset + 
			'_DEST-'   + Dest_str;
	}
	
	Template ReadMergeExports_OV_perType_T
	{
		parameter<string> Export_CombinationTypes;
		parameter<string> Dest;
		//
		
		container Read := 
			for_each_ne(
				Advanced/Regio/name
				, 'Templates/ReadExport_OV_perTime_T('+quote(Export_CombinationTypes)+','+quote(Advanced/Regio/name)+','+quote(Dest)+')'
			);
			
		container Merge :=
			for_each_ne(
				 Advanced/MeasureMoments/name
				, 'Templates/Merge_Regions_OV_T('+quote(Export_CombinationTypes)+','+quote( Advanced/MeasureMoments/name)+','+quote(Dest)+')'
			)
		{
			parameter<string>   OUTPUT_Merge_Regions  := =AsList(Advanced/MeasureMoments/Name+'/LongFormat/File_fullOD',' + ');
		}
	}
	
	Template ReadExport_OV_perTime_T
	{
		parameter<string> Export_CombinationTypes;
		parameter<string> Org_str;
		parameter<string> Dest_str;
		///
		
		container PerTime := 
			for_each_ne(
				Advanced/MeasureMoments/name
				, 'ReadCSV_T('+quote(Advanced/MeasureMoments/name)+')'
			);
			
		Template ReadCSV_T
		{ 
			parameter<string> Time;	
			///
			parameter<string> filename       := Advanced/fileNamePrefix+'Traveltime_Long_'+Export_CombinationTypes+''+fileNameSuffix+'.csv';
			
			parameter<string> fileNameSuffix :=  
				'_' + Analysis_Date + 
				'_' + Advanced/Arrival_or_Departure_at_time + 
				'_' + Time + 
				'_ORG-' + Orgset + '-' + Org_str + 
				'_DEST-'   + Dest_str;
			
			unit<uint64>      domain         := range(uint64, 0[uint64], count_rows);
			parameter<string> fieldseparator := ';';
			parameter<string> filedata       :  StorageType   = "str",  StorageName = "=filename",  StorageReadOnly = "true";
			parameter<uint64> count_rows     := (strcount(filedata, fieldseparator) / strcount(headerline, fieldseparator))[uint64] - 1[uint64];
			parameter<string> headerline     := readLines(filedata, void, 0);
			
			unit<uint32> field := Range(uint32, 0, strcount(headerline, fieldseparator) + 1)
			{
				attribute<string> name := ReadArray(headerline , field, string, 0);
			}
				
			attribute<string> bodylines (domain) := readLines(filedata, domain, headerline/ReadPos);

			container data := 
				for_each_nedv(
					field/name
					,'ReadElems(
						BodyLines
						,string
						,'+ MakeDefined(field/name[sub_or_null(id(field),1)] + '/ReadPos','const(0, domain)')+'
						, 17
					)'
					,domain
					,string
				)
			{
				attribute<min_f>               Traveltime              (domain) := ='Traveltime_m_'+Time+'[float32] * 1[min_f]';
				attribute<string>              ModeUsed                (domain) := ='ModeUsed_'+Time;
				attribute<string>              OrgDestName             (domain) := OrgName + '_' + DestName;
			}
		}
	}
	
	Template ReadExport_Car_T
	{ 
		parameter<string> Regio;
		parameter<string> Dest_str;
		///
		
		parameter<string> netwerk_type_OSM    := 'Car';
		parameter<string> netwerk_type_suffix := ModelParameters/UseTomTomNetworkForCars ? '-TomTom' : '-OSM';
		parameter<string> filename            := Advanced/fileNamePrefix+'Traveltimes'+fileNameSuffix+'.csv';

		parameter<string> fileNameSuffix :=  
			'_ORG-' + Orgset + '-' + Regio + 
			'_DEST-'   + Dest_str +
			'_NETWERK-'+ netwerk_type_OSM + netwerk_type_suffix +
			'_DayGroup-'+ModelParameters/Advanced/CongestionSpeed_DaySelection +
			'_MaxTime-' + string(ModelParameters/MaxCarTime)+'min';


		unit<uint64>      domain         := range(uint64, 0[uint64], count_rows);
		parameter<string> fieldseparator := ';';
		parameter<string> filedata       :  StorageType   = "str",  StorageName = "=filename",  StorageReadOnly = "true";
		parameter<uint64> count_rows     := (strcount(filedata, fieldseparator) / strcount(headerline, fieldseparator))[uint64] - 1[uint64];
		parameter<string> headerline     := readLines(filedata, void, 0);
		
		unit<uint32> field := Range(uint32, 0, strcount(headerline, fieldseparator) + 1)
		{
			attribute<string> name := ReadArray(headerline , field, string, 0);
		}
			
		attribute<string> bodylines (domain) := readLines(filedata, domain, headerline/ReadPos);

		container data := 
			for_each_nedv(
				field/name
				,'ReadElems(
					BodyLines
					,string
					,'+ MakeDefined(field/name[sub_or_null(id(field),1)] + '/ReadPos','const(0, domain)')+'
					, 17
				)'
				,domain
				,string
			)
		{
			attribute<string>              OrgDestName             (domain) := Org + '_' + Dst;
		}
	}
	
	Template Merge_Regions_Car_T
	{
		parameter<string> Dest_str;
		//
		
		unit<uint32> Merged := ='union_unit('+AsItemList('Read/'+Advanced/Regio/name+'/domain')+')'
		{
			attribute<string>  OrgName             := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/Org')+')';
			attribute<string>  DestName            := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/Dst')+')';
			attribute<min_f>   MaxSpeed_min        := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/MaxSpeed[min_f]')+')';
			attribute<min_f>   MorningRush_min     := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/MorningRush[min_f]')+')';
			attribute<min_f>   NoonRush_min        := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/NoonRush[min_f]')+')';
			attribute<min_f>   LateEveningRush_min := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/LateEveningRush[min_f]')+')';
			attribute<km>      MaxSpeed_km         := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/MaxSpeed_km[km]')+')';
			attribute<km>      MorningRush_km      := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/MorningRush_km[km]')+')';
			attribute<km>      NoonRush_km         := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/NoonRush_km[km]')+')';
			attribute<km>      LateEveningRush_km  := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/LateEveningRush_km[km]')+')';
			// attribute<string>  Label               := OrgName +'_'+DestName, DialogType = "LabelText";
			
		}
		
		container LongFormat
		{
			attribute<string> BodyLines (Merged) :=
				Merged/OrgName + ';' + 
				Merged/DestName + ';' +
				string(Merged/MaxSpeed_min) + ';' + 
				string(Merged/MorningRush_min)+';' +
				string(Merged/NoonRush_min)+';' +
				string(Merged/LateEveningRush_min)+';' +
				string(Merged/MaxSpeed_km) + ';' + 
				string(Merged/MorningRush_km)+';' +
				string(Merged/NoonRush_km)+';' +
				string(Merged/LateEveningRush_km);
			
			parameter<string> File_full         := 'Org;Dst;MaxSpeed;MorningRush;NoonRush;LateEveningRush;MaxSpeed_km;MorningRush_km;NoonRush_km;LateEveningRush_km\n'++AsList(BodyLines, '\n')
																	, StorageName = "=Export_filename", StorageType = "str";
		}
		parameter<string> netwerk_type_OSM    := 'Car';
		parameter<string> netwerk_type_suffix := ModelParameters/UseTomTomNetworkForCars ? '-TomTom' : '-OSM';
		parameter<string> Export_filename       := fileNamePrefix+'Traveltimes'+fileNameSuffix+'.csv';
		parameter<string> fileNameSuffix :=  
			'_ORG-' + Orgset + 
			'_DEST-'   + Dest_str +
			'_NETWERK-'+ netwerk_type_OSM + netwerk_type_suffix +
			'_DayGroup-'+ModelParameters/Advanced/CongestionSpeed_DaySelection +
			'_MaxTime-' + string(ModelParameters/MaxCarTime)+'min';
	}
	
	Template ReadExport_PedestrianBike_T
	{ 
		parameter<string> Regio;
		parameter<string> Dest_str;
		parameter<string> netwerk_type_OSM;
		///
		parameter<string> MaxTravelTime       := ='string(ModelParameters/Max'+netwerk_type_OSM+'Time_Org2Dest)';
		parameter<string> filename            := Advanced/fileNamePrefix+'Traveltimes'+fileNameSuffix+'.csv';

		parameter<string> fileNameSuffix :=  
			'_ORG-' + Orgset + '-' + Regio + 
			'_DEST-'   + Dest_str +
			'_NETWERK-'+ netwerk_type_OSM + 
			'_MaxTime-' + MaxTravelTime+'min';


		unit<uint64>      domain         := range(uint64, 0[uint64], count_rows);
		parameter<string> fieldseparator := ';';
		parameter<string> filedata       :  StorageType   = "str",  StorageName = "=filename",  StorageReadOnly = "true";
		parameter<uint64> count_rows     := (strcount(filedata, fieldseparator) / strcount(headerline, fieldseparator))[uint64] - 1[uint64];
		parameter<string> headerline     := readLines(filedata, void, 0);
		
		unit<uint32> field := Range(uint32, 0, strcount(headerline, fieldseparator) + 1)
		{
			attribute<string> name := ReadArray(headerline , field, string, 0);
		}
			
		attribute<string> bodylines (domain) := readLines(filedata, domain, headerline/ReadPos);

		container data := 
			for_each_nedv(
				field/name
				,'ReadElems(
					BodyLines
					,string
					,'+ MakeDefined(field/name[sub_or_null(id(field),1)] + '/ReadPos','const(0, domain)')+'
					, 17
				)'
				,domain
				,string
			)
		{
			attribute<string>              OrgDestName             (domain) := Org + '_' + Dst;
		}
	}
	
	Template Merge_Regions_PedestrianBike_T
	{
		parameter<string> Dest_str;
		parameter<string> netwerk_type_OSM;
		//
		parameter<string> MaxTravelTime := ='string(ModelParameters/Max'+netwerk_type_OSM+'Time_Org2Dest)';
		
		unit<uint32> Merged := ='union_unit('+AsItemList('Read/'+Advanced/Regio/name+'/domain')+')'
		{
			// attribute<string> Label               := OrgName +'_'+DestName, DialogType = "LabelText";
			attribute<string> OrgName             := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/Org')+')';
			attribute<string> DestName            := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/Dst')+')';
			attribute<string> Freeflow            := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/Freeflow')+')';
			attribute<string> Freeflow_ebike      := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/Freeflow_ebike')+')';
			attribute<string> ActualBike          := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/ActualBike')+')';
			attribute<string> ActualE_Bike_Adj    := ='union_data(.,'+AsItemList('Read/'+Advanced/Regio/name+'/data/ActualE_Bike_Adj')+')';
		}
		
		
		attribute<string> BodyLines_ActualBike (Merged) :=
			Merged/OrgName + ';' + 
			Merged/DestName + ';' +
			Merged/Freeflow + ';' +
			Merged/Freeflow_ebike + ';' +
			Merged/ActualBike + ';' +
			Merged/ActualE_Bike_Adj;
		parameter<string> File_ActualBike := 'Org;Dst;Freeflow;Freeflow_ebike;ActualBike;ActualE_Bike_Adj\n'++AsList(BodyLines_ActualBike, '\n')
			, StorageName = "=fileNamePrefix+'Traveltimes'+fileNameSuffix+'.csv'", StorageType = "str";
		
		attribute<string> BodyLines_Bike (Merged) :=
			Merged/OrgName + ';' + 
			Merged/DestName + ';' +
			Merged/Freeflow + ';' + 
			Merged/Freeflow_ebike;
		parameter<string> File_Bike := 'Org;Dst;Freeflow;Freeflow_ebike\n'++AsList(BodyLines_Bike, '\n')
			, StorageName = "=fileNamePrefix+'Traveltimes'+fileNameSuffix+'.csv'", StorageType = "str";
			
		attribute<string> BodyLines_Pedestrian (Merged) :=
			Merged/OrgName + ';' + 
			Merged/DestName + ';' +
			Merged/Freeflow;
		parameter<string> File_Pedestrian := 'Org;Dst;Freeflow\n'++AsList(BodyLines_Pedestrian, '\n')
			, StorageName = "=fileNamePrefix+'Traveltimes'+fileNameSuffix+'.csv'", StorageType = "str";
		
		parameter<string> File := =netwerk_type_OSM == 'Bike' 
									? ModelParameters/UseActualBikeSpeeds ? 'File_ActualBike' : 'File_Bike'
									: 'File_Pedestrian';
			
		parameter<string> fileNamePrefix :=  '%LocalDataProjDir%/Output/';  //Locatie waar output files moeten worden opgeslagen.
		parameter<string> fileNameSuffix :=  
			'_ORG-' + Orgset + 
			'_DEST-'   + Dest_str +
			'_NETWERK-'+ netwerk_type_OSM + 
			'_MaxTime-' + MaxTravelTime+'min';
	}
}