container RegressieTest
{
	parameter<String> Step1_prepare_data := 'Ready', ExplicitSuppliers = "/MaakOntkoppeldeData/Step1_Generate_roads;/MaakOntkoppeldeData/Setp2_Generate_GTFS";

	container t405_1_NetworkModel_PBL_prepare_data
	{
		parameter<string> TempDir                  := '%LocalDataDir%/Regression/log';
		parameter<string> results_folder_filename  := TempDir + '/results_folder.txt';
		parameter<string> results_folder           :  Storagename =  "= results_folder_filename", StorageType = "str";

		parameter<string> result_html := 
			'<description>NetworkModel PBL results <br><I> git revision: XXXX, git repo: https://github.com/ObjectVision/NetworkModel_PBL; branch: RegressieTest) </I></description>' + 
			'<result>prepare data: OK</result>'
		,	StorageType = "str"
		,	storagename = "= results_folder + '/t405_1_NetworkModel_PBL_prepare_data.txt'";
	}

	container t405_2_NetworkModel_PBL_indicator_results_test
	{
		parameter<string> TempDir                  := '%LocalDataDir%/Regression/log';
		parameter<string> results_folder_filename  := TempDir + '/results_folder.txt';
		parameter<string> results_folder           :  Storagename =  "= results_folder_filename", StorageType = "str";

		parameter<string> result := 
			'<description>NetworkModel PBL results <br><I> git revision: XXXX, git repo: https://github.com/ObjectVision/NetworkModel_PBL; branch: RegressieTest) </I></description>' + 
			'<result>' + 
			'<br><b>WW</b>' +
			'<br>count: ' + replace(string(PerType/WW/Indicators/count),'.',',') +' <br>' + 
			'mean: ' + replace(string(PerType/WW/Indicators/mean),'.',',') +'  <br>' + 
			'max: ' + replace(string(PerType/WW/Indicators/max),'.',',') +'<br>' + 
			'min: ' + replace(string(sum(PerType/WW/Indicators/min)),'.',',') +' <br>'  + 
			'modus: ' + replace(string(sum(PerType/WW/Indicators/modus)),'.',',') +' <br>' 
			
			'<br><b>W_OV_W</b>' +
			'<br>count: ' + replace(string(PerType/W_OV_W/Indicators/count),'.',',') +'   <br>' + 
			'mean: ' + replace(string(PerType/W_OV_W/Indicators/mean),'.',',') +'   <br>' + 
			'max: ' + replace(string(PerType/W_OV_W/Indicators/max),'.',',') +'  <br>' + 
			'min: ' + replace(string(sum(PerType/W_OV_W/Indicators/min)),'.',',') +' <br>'  + 
			'modus: ' + replace(string(sum(PerType/W_OV_W/Indicators/modus)),'.',',') +'  <br>'
			
			'<br><b>W_OV_W_with_WW</b>' +
			'<br>count: ' + replace(string(PerType/W_OV_W_with_WW/Indicators/count),'.',',') +'   <br>' + 
			'mean: ' + replace(string(PerType/W_OV_W_with_WW/Indicators/mean),'.',',') +'   <br>' + 
			'max: ' + replace(string(PerType/W_OV_W_with_WW/Indicators/max),'.',',') +'  <br>' + 
			'min: ' + replace(string(sum(PerType/W_OV_W_with_WW/Indicators/min)),'.',',') +' <br>'  + 
			'modus: ' + replace(string(sum(PerType/W_OV_W_with_WW/Indicators/modus)),'.',',') +' </result>';

		parameter<string> result_html := result
		,	StorageType = "str"
		,	storagename = "= results_folder + '/t405_2_NetworkModel_PBL_indicator_results_test.txt'";
	}



	unit<uint8> Types : nrofrows = 3
	{
		attribute<string> name : ['WW','W_OV_W','W_OV_W_with_WW'];
	}

	container PerType :=
		for_each_ne(
			Types/name
			, 'PerType_T('+quote(Types/name)+')'
		);

	Template PerType_T
	{
		parameter<string> name;
		//
		
		unit<uint64> OD := ='/NetworkSetup/ConfigurationPerRegio/all/PublicTransport/At_07h00m00s/CreateODs/OD_traveltime_'+name+'/OD/UniqueOD'
		{
			attribute<float32> traveltime := ShortestTraveltime;
		}
	
		container Indicators
		{
			parameter<uint32>   count                  := count(uint32(OD/traveltime));
			parameter<float32>  mean                   := mean(OD/traveltime);
			parameter<float32>  max                    := max(OD/traveltime);
			parameter<float32>  min                    := min(OD/traveltime);
			parameter<uint32>   modus                  := modus(uint32(OD/traveltime));
		}
	}
	
	
}