container NetworkPreperation
{  
	unit<uint32> road := Merge_SourceData/Merge_Country_Roads;
	
	container preperation
	{
		unit<uint32> road_segments  := arc2segm(road/geometry)
		{
			attribute<string>                       key                              := String(pointRow(point)) + '_' + String(pointCol(point)) + '_' + String(pointRow(nextpoint)) + '_'+ String(pointCol(nextpoint));
			attribute<wegtype>                      wegtype_rel                      := road/wegtype_rel[SequenceNr];
			attribute<km_hr>                        maxspeed                         := road/maxspeed[SequenceNr];
			attribute<string>                       OSM_id                           := road/OSM_id[SequenceNr];
			attribute<bool>                         IsOneDirection                   := road/IsOneDirection[SequenceNr];
			attribute<km_hr>                        congestion_speed_MorningRush     := road/congestion_speed_MorningRush[SequenceNr];
			attribute<km_hr>                        congestion_speed_NoonRush        := road/congestion_speed_NoonRush[SequenceNr];
			attribute<km_hr>                        congestion_speed_LateEveningRush := road/congestion_speed_LateEveningRush[SequenceNr];
			
			unit<uint32> pointset  := union_unit(., .)
			{
				attribute<rdc>      point    := Union_Data(., ../point, ../nextpoint);
				attribute<..>       ArcID    := value(ID(.) % nrofrows(..), ..);
				attribute<uint32>   VolgNr   := ID(.) / nrofrows(..);
			}
			attribute<rdc> geometry (arc)  := points2sequence(pointset/point, pointset/ArcID, pointset/VolgNr);
		}
		
		#include <ExtraVerbindingen.dms>
		
		unit<uint32> road_segments_with_extra_nodes := connect(road_segments/geometry, ExtraVerbindingen/nodes/geometry)
		{
			attribute<rdc>               UnionData (arc);
			attribute<wegtype>           wegtype_rel                      := MakeDefined(road_segments/wegtype_rel[arc_rel], /Classifications/OSM/wegtype/V/connectlink);
			attribute<km_hr>             maxspeed                         := MakeDefined(road_segments/maxspeed[arc_rel], ModelParameters/Advanced/CarDefaultSpeed);
			attribute<string>            OSM_id                           := road_segments/OSM_id[arc_rel];
			attribute<bool>              IsOneDirection                   := road_segments/IsOneDirection[arc_rel];
			 
			attribute<km_hr>             congestion_speed_MorningRush     := road_segments/congestion_speed_MorningRush[arc_rel];
			attribute<km_hr>             congestion_speed_NoonRush        := road_segments/congestion_speed_NoonRush[arc_rel];
			attribute<km_hr>             congestion_speed_LateEveningRush := road_segments/congestion_speed_LateEveningRush[arc_rel];
		}
	}
	
	unit<uint32> Network_with_extraverbindingen  := ='union_unit(preperation/road_segments_with_extra_nodes, preperation/ExtraVerbindingen/link)'
	{
		attribute<rdc>               geometry (arc)   := union_data(., preperation/road_segments_with_extra_nodes/uniondata, preperation/ExtraVerbindingen/link/geometry);
		attribute<wegtype>           wegtype_rel      := union_data(., preperation/road_segments_with_extra_nodes/wegtype_rel,   preperation/ExtraVerbindingen/link/wegtype_rel);
		attribute<km_hr>             maxspeed         := union_data(., preperation/road_segments_with_extra_nodes/maxspeed,  preperation/ExtraVerbindingen/link/maxspeed);
		attribute<string>            OSM_id           := union_data(., preperation/road_segments_with_extra_nodes/OSM_id,  const('',preperation/ExtraVerbindingen/link));
		attribute<bool>              IsOneDirection   := union_data(., preperation/road_segments_with_extra_nodes/IsOneDirection,  const(FALSE,preperation/ExtraVerbindingen/link));
		attribute<rdc>               point            := first_point(geometry);
		attribute<rdc>               nextpoint        := last_point(geometry);
			
		attribute<km_hr>             congestion_speed_MorningRush     := union_data(., preperation/road_segments_with_extra_nodes/congestion_speed_MorningRush, const((0/0)[km_hr],preperation/ExtraVerbindingen/link));
		attribute<km_hr>             congestion_speed_NoonRush        := union_data(., preperation/road_segments_with_extra_nodes/congestion_speed_NoonRush, const((0/0)[km_hr],preperation/ExtraVerbindingen/link));
		attribute<km_hr>             congestion_speed_LateEveningRush := union_data(., preperation/road_segments_with_extra_nodes/congestion_speed_LateEveningRush, const((0/0)[km_hr],preperation/ExtraVerbindingen/link));

		unit<uint32> pointset : = union_unit(., .)
		{
			attribute<rdc> point       := union_data(., ../point, ../nextpoint);
			attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
			attribute<..>                   ArcNr       := value(ID(.) % #(..), ..);
		}

		attribute<bool> isVerbonden := all(pointset/isVerbonden, pointset/ArcNr);

		unit<uint32> NodeSet := unique(pointset/point)
		,	DialogData = "Values"
		,	DialogType = "Map"
		{
			attribute<rdc> values;
		}

		attribute<NodeSet> F1 := rlookup(point,     NodeSet/Values);
		attribute<NodeSet> F2 := rlookup(nextpoint, NodeSet/Values);
	
		unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
		{
			attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), partnr);
			parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
			parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
		}

		unit<uint32> NodesNotConnected := Subset(networks/partnr <> networks/main)
		{
			attribute<rdc> point := NodeSet/Values[Nr_OrgEntity];
		}
		
		unit<uint32> ConnectedNetwork := select_with_attr_by_cond(., isVerbonden); // het resulterende verbonden wegennetwerk
	}
}
