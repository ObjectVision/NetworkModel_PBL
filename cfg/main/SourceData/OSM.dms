container OSM : using = "classifications/OSM"
{  
	parameter<string> file_date := ModelParameters/Advanced/OSM_file_date;
	parameter<string> dir       := '%NetworkModel_Dir%/Infrastructuur/OSM/'+file_date;
	parameter<string> date      := file_date == '20221201' ? '-221201' : '-latest';
	unit<uint32>      Regios    := ModelParameters/Advanced/OSM_Regios;

	container Prepare_SourceData :=
		for_each_ne(
			Regios/name
			, 'Prepare_SourceData_T('+quote(Regios/label)+','+quote(Regios/country)+')'
		);
	
	Template Prepare_SourceData_T
	{
		parameter<string> Regio;
		parameter<string> Country;
		///
		unit<uint32> Read_Roads_shp 
		:	StorageName     = "= dir + '/'+Regio+''+date+'-free.shp/gis_osm_roads_free_1.shp'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	DialogType = "Map"
		,	DialogData = "geometry_rd"	
		{
			attribute<wgs84_base>        geometry    (arc);
			attribute<rdc>               geometry_rd (arc)   := LatLongWgs842RD(geometry, dpoint)[rdc];
			attribute<string>            fclass;
			attribute<string>            oneway;
			attribute<int32>             maxspeed;
			// unit<uint32> uq := unique(oneway);
		// }
		
		// unit<uint32> Roads := Read_Roads_shp
		// ,   StorageName = "='%LocalDataProjDir%/OSM/RegionFiles/'+Regio+'/Roads_'+file_date+'.fss'"
		// {
			// attribute<rdc>                         geometry (arc) := Read_Roads_shp/geometry_rd;
			// attribute<string>                      fclass         := Read_Roads_shp/fclass;
			// attribute<km_hr>                       maxspeed       := Read_Roads_shp/maxspeed[km_hr];
			// attribute<string>                      OSM_id         := Read_Roads_shp/OSM_id;
			attribute<Directions_OSM>              Direction      := MakeDefined(rlookup(Oneway, Directions_OSM/code), Directions_OSM/v/dual); 
			attribute<bool>                        IsOneDirection := Direction == Directions_OSM/v/backwards || Direction == Directions_OSM/v/forwards;
			attribute<wegtype>                     wegtype_rel    := rlookup(fclass, wegtype/name);  
			
		}
	}
	
	container Merge_SourceData
	{
		container Merge_Roads_perCountry :=
			for_each_ne(
				Regios/Countries/name
				, 'Make_Merged_Roads_perCountry_T('+quote(Regios/Countries/name)+')'
			);

		
		Template Make_Merged_Roads_perCountry_T
		{
			parameter<string> country_name;
			//
			unit<uint32> Country_regios := ='Regios/'+country_name;
			unit<uint32>  Merge_CountryRegion_Roads := ='union_unit('+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_shp', ',')+')'
			{
				attribute<rdc>                          geometry (arc)                   := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_shp/geometry_rd', ',')+')';
				attribute<km_hr>                        maxspeed_src                     := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_shp/maxspeed[km_hr]', ',')+')';
				attribute<wegtype>                      wegtype_rel                      := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_shp/wegtype_rel', ',')+')';
				attribute<string>                       OSM_id                           := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_shp/OSM_id', ',')+')';
				attribute<bool>                         IsOneDirection                   := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_shp/IsOneDirection', ',')+')';
				
				attribute<km_hr>                        rth_maxspeed_per_wegtype (classifications/OSM/wegtype)         := rth_element(maxspeed_src, 0.9f, wegtype_rel);
				attribute<km_hr>                        rth_maxspeed_per_wegtype_Defined (classifications/OSM/wegtype) := rth_maxspeed_per_wegtype == 0[km_hr] ? ModelParameters/Advanced/CarDefaultSpeed_low : MakeDefined(rth_maxspeed_per_wegtype, ModelParameters/Advanced/CarDefaultSpeed_low);
			
				attribute<km_hr>                        maxspeed_edit00                                                := maxspeed_src != 0[km_hr] && IsDefined(maxspeed_src) && maxspeed_src < 140[km_hr]  ? maxspeed_src : rjoin(wegtype_rel, id(classifications/OSM/wegtype), rth_maxspeed_per_wegtype_Defined);
				attribute<km_hr>                        maxspeed_edit0                                                 := wegtype_rel == classifications/OSM/wegtype/v/motorway && maxspeed_edit00 < 80[km_hr] ? rjoin(wegtype_rel, id(classifications/OSM/wegtype), rth_maxspeed_per_wegtype_Defined) : maxspeed_edit00;
				attribute<km_hr>                        maxspeed                                                       := switch(case(maxspeed_edit0 == 0[km_hr], ModelParameters/Advanced/CarDefaultSpeed), case(maxspeed_edit0 < 15[km_hr], 15[km_hr]), maxspeed_edit0);
			
				attribute<km_hr>                        congestion_speed_MorningRush     := =country_name  == 'Netherlands' || country_name == 'Belgium' ? 'AddCongestionData/congestion_speed_MorningRush > ModelParameters/Advanced/MaxCarSpeed_limit ? ModelParameters/Advanced/MaxCarSpeed_limit : AddCongestionData/congestion_speed_MorningRush' : 'maxspeed';
				attribute<km_hr>                        congestion_speed_NoonRush        := =country_name  == 'Netherlands' || country_name == 'Belgium' ? 'AddCongestionData/congestion_speed_NoonRush > ModelParameters/Advanced/MaxCarSpeed_limit ? ModelParameters/Advanced/MaxCarSpeed_limit : AddCongestionData/congestion_speed_NoonRush' : 'maxspeed';
				attribute<km_hr>                        congestion_speed_LateEveningRush := =country_name  == 'Netherlands' || country_name == 'Belgium' ? 'AddCongestionData/congestion_speed_LateEveningRush > ModelParameters/Advanced/MaxCarSpeed_limit ? ModelParameters/Advanced/MaxCarSpeed_limit : AddCongestionData/congestion_speed_LateEveningRush' : 'maxspeed';

				container AddCongestionData
				{
					attribute<bool>    isMotorWay                                 (..) := wegtype_rel == wegtype/v/motorway || wegtype_rel == wegtype/v/motorway_link;
					attribute<bool>    isMajor                                    (..) := wegtype_rel == wegtype/v/primary_link || wegtype_rel == wegtype/v/secondary_link || wegtype_rel == wegtype/v/secondary || wegtype_rel == wegtype/v/primary; 
					attribute<bool>    isStreet                                   (..) := !isMotorWay && !isMajor;
					
					attribute<km_hr>   congestion_speed_motorways_MorningRush     (..) := recollect_by_cond(isMotorWay, Motorways/congestion_speed_MorningRush);
					attribute<km_hr>   congestion_speed_majorways_MorningRush     (..) := recollect_by_cond(isMajor, Majorways/congestion_speed_MorningRush);
					attribute<km_hr>   congestion_speed_streets_MorningRush       (..) := recollect_by_cond(isStreet, Streets/congestion_speed_MorningRush);
					
					attribute<km_hr>   congestion_speed_motorways_NoonRush        (..) := recollect_by_cond(isMotorWay, Motorways/congestion_speed_NoonRush);
					attribute<km_hr>   congestion_speed_majorways_NoonRush        (..) := recollect_by_cond(isMajor, Majorways/congestion_speed_NoonRush);
					attribute<km_hr>   congestion_speed_streets_NoonRush          (..) := recollect_by_cond(isStreet, Streets/congestion_speed_NoonRush);
					
					attribute<km_hr>   congestion_speed_motorways_LateEveningRush (..) := recollect_by_cond(isMotorWay, Motorways/congestion_speed_LateEveningRush);
					attribute<km_hr>   congestion_speed_majorways_LateEveningRush (..) := recollect_by_cond(isMajor, Majorways/congestion_speed_LateEveningRush);
					attribute<km_hr>   congestion_speed_streets_LateEveningRush   (..) := recollect_by_cond(isStreet, Streets/congestion_speed_LateEveningRush);
				
					attribute<km_hr>   congestion_speed_MorningRush               (..) := 	switch(
																								 case(IsDefined(congestion_speed_motorways_MorningRush) && congestion_speed_motorways_MorningRush != 0[km_hr], congestion_speed_motorways_MorningRush)
																								,case(IsDefined(congestion_speed_majorways_MorningRush) && congestion_speed_majorways_MorningRush != 0[km_hr], congestion_speed_majorways_MorningRush)
																								,case(IsDefined(congestion_speed_streets_MorningRush)   && congestion_speed_streets_MorningRush != 0[km_hr],   congestion_speed_streets_MorningRush)
																								, maxspeed
																							);
					attribute<km_hr>   congestion_speed_NoonRush               (..) := 	switch(
																								 case(IsDefined(congestion_speed_motorways_NoonRush) && congestion_speed_motorways_NoonRush != 0[km_hr], congestion_speed_motorways_NoonRush)
																								,case(IsDefined(congestion_speed_majorways_NoonRush) && congestion_speed_majorways_NoonRush != 0[km_hr], congestion_speed_majorways_NoonRush)
																								,case(IsDefined(congestion_speed_streets_NoonRush)   && congestion_speed_streets_NoonRush != 0[km_hr],   congestion_speed_streets_NoonRush)
																								, maxspeed
																							);
					attribute<km_hr>   congestion_speed_LateEveningRush               (..) := 	switch(
																								 case(IsDefined(congestion_speed_motorways_LateEveningRush) && congestion_speed_motorways_LateEveningRush != 0[km_hr], congestion_speed_motorways_LateEveningRush)
																								,case(IsDefined(congestion_speed_majorways_LateEveningRush) && congestion_speed_majorways_LateEveningRush != 0[km_hr], congestion_speed_majorways_LateEveningRush)
																								,case(IsDefined(congestion_speed_streets_LateEveningRush)   && congestion_speed_streets_LateEveningRush != 0[km_hr],   congestion_speed_streets_LateEveningRush)
																								, maxspeed
																							);

					unit<uint32> Motorways := select_with_org_rel(isMotorWay)
					{
						attribute<geometries/rdc>              geometry (arc)                   := .../geometry[org_rel]; 
						attribute<km_hr>                       congestion_speed_MorningRush     := mean(RoadPointSet/mean_speed_MorningRush, RoadPointSet/Arc_rel_motorways_MorningRush);
						attribute<km_hr>                       congestion_speed_NoonRush        := mean(RoadPointSet/mean_speed_NoonRush, RoadPointSet/Arc_rel_motorways_NoonRush);
						attribute<km_hr>                       congestion_speed_LateEveningRush := mean(RoadPointSet/mean_speed_LateEveningRush, RoadPointSet/Arc_rel_motorways_LateEveningRush);
					}
					unit<uint32> Majorways := select_with_org_rel(isMajor)
					{
						attribute<geometries/rdc>              geometry (arc)                   := .../geometry[org_rel];
						attribute<km_hr>                       congestion_speed_MorningRush     := mean(RoadPointSet/mean_speed_MorningRush, RoadPointSet/Arc_rel_majorways_MorningRush);
						attribute<km_hr>                       congestion_speed_NoonRush        := mean(RoadPointSet/mean_speed_NoonRush, RoadPointSet/Arc_rel_majorways_NoonRush);
						attribute<km_hr>                       congestion_speed_LateEveningRush := mean(RoadPointSet/mean_speed_LateEveningRush, RoadPointSet/Arc_rel_majorways_LateEveningRush);
					}
					
					unit<uint32> Streets := select_with_org_rel(isStreet)
					{
						attribute<geometries/rdc>              geometry (arc)                   := .../geometry[org_rel];
						attribute<km_hr>                       congestion_speed_MorningRush     := mean(RoadPointSet/mean_speed_MorningRush, RoadPointSet/Arc_rel_streets_MorningRush);
						attribute<km_hr>                       congestion_speed_NoonRush        := mean(RoadPointSet/mean_speed_NoonRush, RoadPointSet/Arc_rel_streets_NoonRush);
						attribute<km_hr>                       congestion_speed_LateEveningRush := mean(RoadPointSet/mean_speed_LateEveningRush, RoadPointSet/Arc_rel_streets_LateEveningRush);
					}
					
					
					unit<uint32> RoadPointSet := TomTom/Roads_selection/RoadPointSet
					{
						attribute<km_hr>      mean_speed_MorningRush            := 	switch(
																						 case(IsDefined(Link_OSM_Motorways_to_TomTom/mean_speed_MorningRush), Link_OSM_Motorways_to_TomTom/mean_speed_MorningRush)   
																						,case(IsDefined(Link_OSM_Majorways_to_TomTom/mean_speed_MorningRush), Link_OSM_Majorways_to_TomTom/mean_speed_MorningRush)
																						,Link_OSM_Streets_to_TomTom/mean_speed_MorningRush
																					);                
						attribute<km_hr>      mean_speed_NoonRush               := 	switch(
																						 case(IsDefined(Link_OSM_Motorways_to_TomTom/mean_speed_NoonRush), Link_OSM_Motorways_to_TomTom/mean_speed_NoonRush)   
																						,case(IsDefined(Link_OSM_Majorways_to_TomTom/mean_speed_NoonRush), Link_OSM_Majorways_to_TomTom/mean_speed_NoonRush)
																						,Link_OSM_Streets_to_TomTom/mean_speed_NoonRush
																					);                
						attribute<km_hr>      mean_speed_LateEveningRush        := 	switch(
																						 case(IsDefined(Link_OSM_Motorways_to_TomTom/mean_speed_LateEveningRush), Link_OSM_Motorways_to_TomTom/mean_speed_LateEveningRush)   
																						,case(IsDefined(Link_OSM_Majorways_to_TomTom/mean_speed_LateEveningRush), Link_OSM_Majorways_to_TomTom/mean_speed_LateEveningRush)
																						,Link_OSM_Streets_to_TomTom/mean_speed_LateEveningRush
																					);                
						
						attribute<Motorways>  Arc_rel_motorways_MorningRush     := IsDefined(Link_OSM_Motorways_to_TomTom/mean_speed_MorningRush)     ? Link_OSM_Motorways_to_TomTom/arc_rel : (0/0)[Motorways];
						attribute<Motorways>  Arc_rel_motorways_NoonRush        := IsDefined(Link_OSM_Motorways_to_TomTom/mean_speed_NoonRush)        ? Link_OSM_Motorways_to_TomTom/arc_rel : (0/0)[Motorways];
						attribute<Motorways>  Arc_rel_motorways_LateEveningRush := IsDefined(Link_OSM_Motorways_to_TomTom/mean_speed_LateEveningRush) ? Link_OSM_Motorways_to_TomTom/arc_rel : (0/0)[Motorways];
						
						attribute<Majorways>  Arc_rel_majorways_MorningRush     := IsDefined(Link_OSM_Majorways_to_TomTom/mean_speed_MorningRush)     ? Link_OSM_Majorways_to_TomTom/arc_rel : (0/0)[Majorways];
						attribute<Majorways>  Arc_rel_majorways_NoonRush        := IsDefined(Link_OSM_Majorways_to_TomTom/mean_speed_NoonRush)        ? Link_OSM_Majorways_to_TomTom/arc_rel : (0/0)[Majorways];
						attribute<Majorways>  Arc_rel_majorways_LateEveningRush := IsDefined(Link_OSM_Majorways_to_TomTom/mean_speed_LateEveningRush) ? Link_OSM_Majorways_to_TomTom/arc_rel : (0/0)[Majorways];
						
						attribute<Streets>    Arc_rel_streets_MorningRush       := IsDefined(Link_OSM_Streets_to_TomTom/mean_speed_MorningRush)       ? Link_OSM_Streets_to_TomTom/arc_rel : (0/0)[Streets];
						attribute<Streets>    Arc_rel_streets_NoonRush          := IsDefined(Link_OSM_Streets_to_TomTom/mean_speed_NoonRush)          ? Link_OSM_Streets_to_TomTom/arc_rel : (0/0)[Streets];
						attribute<Streets>    Arc_rel_streets_LateEveningRush   := IsDefined(Link_OSM_Streets_to_TomTom/mean_speed_LateEveningRush)   ? Link_OSM_Streets_to_TomTom/arc_rel : (0/0)[Streets];
					}
					
					container Link_OSM_Motorways_to_TomTom := connect_info(Motorways/geometry, RoadPointSet/Point, ModelParameters/Advanced/ConnectSearchDist)  
					{ 
						attribute<km_hr>      mean_speed_MorningRush          (RoadPointSet) := ='dist[uint32] < 10 ? SourceData/Infrastructuur/TomTom/Roads_selection/CalcTimes/MorningRush/PerMoment/'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'/Speed_PerRPS : (0/0)[km_hr]';
						attribute<km_hr>      mean_speed_NoonRush             (RoadPointSet) := ='dist[uint32] < 10 ? SourceData/Infrastructuur/TomTom/Roads_selection/CalcTimes/NoonRush/PerMoment/'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'/Speed_PerRPS : (0/0)[km_hr]';
						attribute<km_hr>      mean_speed_LateEveningRush      (RoadPointSet) := ='dist[uint32] < 10 ? SourceData/Infrastructuur/TomTom/Roads_selection/CalcTimes/LateEveningRush/PerMoment/'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'/Speed_PerRPS : (0/0)[km_hr]';
					}
					
					container Link_OSM_Majorways_to_TomTom := connect_info(Majorways/geometry, RoadPointSet/Point, ModelParameters/Advanced/ConnectSearchDist)
					{
						attribute<km_hr>      mean_speed_MorningRush          (RoadPointSet) := ='dist[uint32] < 10 ? SourceData/Infrastructuur/TomTom/Roads_selection/CalcTimes/MorningRush/PerMoment/'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'/Speed_PerRPS : (0/0)[km_hr]';
						attribute<km_hr>      mean_speed_NoonRush             (RoadPointSet) := ='dist[uint32] < 10 ? SourceData/Infrastructuur/TomTom/Roads_selection/CalcTimes/NoonRush/PerMoment/'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'/Speed_PerRPS : (0/0)[km_hr]';
						attribute<km_hr>      mean_speed_LateEveningRush      (RoadPointSet) := ='dist[uint32] < 10 ? SourceData/Infrastructuur/TomTom/Roads_selection/CalcTimes/LateEveningRush/PerMoment/'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'/Speed_PerRPS : (0/0)[km_hr]';
					}
					
					container Link_OSM_Streets_to_TomTom := connect_info(Streets/geometry, RoadPointSet/Point, ModelParameters/Advanced/ConnectSearchDist)
					{
						attribute<km_hr>      mean_speed_MorningRush          (RoadPointSet) := ='dist[uint32] < 10 ? SourceData/Infrastructuur/TomTom/Roads_selection/CalcTimes/MorningRush/PerMoment/'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'/Speed_PerRPS : (0/0)[km_hr]';
						attribute<km_hr>      mean_speed_NoonRush             (RoadPointSet) := ='dist[uint32] < 10 ? SourceData/Infrastructuur/TomTom/Roads_selection/CalcTimes/NoonRush/PerMoment/'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'/Speed_PerRPS : (0/0)[km_hr]';
						attribute<km_hr>      mean_speed_LateEveningRush      (RoadPointSet) := ='dist[uint32] < 10 ? SourceData/Infrastructuur/TomTom/Roads_selection/CalcTimes/LateEveningRush/PerMoment/'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'/Speed_PerRPS : (0/0)[km_hr]';
					}
				}
			}
		}

		unit<uint32>  Merge_Country_Roads := ='union_unit('+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads', ',')+')'
		{
			attribute<rdc>                          geometry (arc)     := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/geometry', ',')+')';
			attribute<km_hr>                        maxspeed           := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/maxspeed', ',')+')';
			attribute<wegtype>                      wegtype_rel        := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/wegtype_rel', ',')+')';
			attribute<string>                       OSM_id             := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/OSM_id', ',')+')';
			attribute<bool>                         IsOneDirection     := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/IsOneDirection', ',')+')';
			
			attribute<km_hr>                        congestion_speed_MorningRush     := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/congestion_speed_MorningRush', ',')+')';
			attribute<km_hr>                        congestion_speed_NoonRush        := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/congestion_speed_NoonRush', ',')+')';
			attribute<km_hr>                        congestion_speed_LateEveningRush := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/congestion_speed_LateEveningRush', ',')+')';
		}
	}
	
	#include <NetworkPreperation.dms>

	unit<uint32> Make_Final_Network := unique(NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork/geometry)
	,   StorageName = "='%LocalDataProjDir%/OSM/Final_Network_'+file_date+'_CongestionGroup-'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'.fss'"
	{
		attribute<NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork> ConnectedNetwork_rel    := rlookup(geometry, NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork/geometry);
		attribute<rdc>                          geometry (arc) := values;
		attribute<rdc>                          values   (arc) : DisableStorage = "true";
		attribute<wegtype>                      wegtype_rel    := NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork/wegtype_rel[ConnectedNetwork_rel];
		attribute<km_hr>                        maxspeed       := NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork/maxspeed[ConnectedNetwork_rel];
		attribute<string>                       OSM_id         := NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork/OSM_id[ConnectedNetwork_rel];
		attribute<bool>                         IsOneDirection := NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork/IsOneDirection[ConnectedNetwork_rel];
		
		attribute<km_hr>                        congestion_speed_bike            := recollect_by_cond(wegtype/isPartOfBikeNetwork[wegtype_rel], AddBikeCongestionSpeeds/Impl/bike_speed_OSM);
		attribute<km_hr>                        congestion_speed_MorningRush     := NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork/congestion_speed_MorningRush[ConnectedNetwork_rel];
		attribute<km_hr>                        congestion_speed_NoonRush        := NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork/congestion_speed_NoonRush[ConnectedNetwork_rel];
		attribute<km_hr>                        congestion_speed_LateEveningRush := NetworkPreperation/Network_with_extraverbindingen/ConnectedNetwork/congestion_speed_LateEveningRush[ConnectedNetwork_rel];
		
		unit<uint32> AddBikeCongestionSpeeds := select_with_org_rel(wegtype/isPartOfBikeNetwork[wegtype_rel])
		{
			attribute<rdc>                          geometry (arc)                   := ../geometry[org_rel];
			attribute<string>                       OSM_id                           := ../OSM_id[org_rel];
			
			parameter<float32> ConnectSearchDist := 8f^2f;
			
			container Impl := connect_info(geometry, Fietstelweek/DynaPoint/Point, ConnectSearchDist)
			{
				attribute<km_hr> bike_speed_dynapoint  (Fietstelweek/DynaPoint)        := dist[float32] <= ModelParameters/Advanced/Fietstel_OSM_link_dist ? Fietstelweek/DynaPoint/bike_speed : (0/0)[km_hr];
				attribute<km_hr> bike_speed_OSM        (AddBikeCongestionSpeeds)       := mean(bike_speed_dynapoint, ArcID);
			}
		}
	}

	unit<uint32> Read_Final_Network
	:   StorageName = "='%LocalDataProjDir%/OSM/Final_Network_'+file_date+'_CongestionGroup-'+ModelParameters/Advanced/CongestionSpeed_DaySelection+'.fss'"
	,   StorageReadOnly = "true"
	{
		attribute<rdc>                          geometry (arc);
		attribute<wegtype>                      wegtype_rel;
		attribute<km_hr>                        maxspeed;
		attribute<string>                       OSM_id;
		attribute<bool>                         IsOneDirection;
		attribute<string>                       wegtype_label                    := wegtype/label[wegtype_rel];
		attribute<km_hr>                        freeflow_speed_bike              := const(ModelParameters/Advanced/BikingSpeed_kmhr,.);
		attribute<km_hr>                        freeflow_speed_pedestrian        := const(ModelParameters/Advanced/WalkingSpeed_kmhr,.);
		attribute<km_hr>                        congestion_speed_bike;
		attribute<km_hr>                        congestion_speed_MorningRush;
		attribute<km_hr>                        congestion_speed_NoonRush;
		attribute<km_hr>                        congestion_speed_LateEveningRush;
		
		attribute<bool>                         isPartOfCarNetwork        := wegtype/IsPartOfCarNetwork[wegtype_rel];
		attribute<bool>                         isPartOfBikeNetwork       := wegtype/isPartOfBikeNetwork[wegtype_rel];
		attribute<bool>                         isPartOfPedestrianNetwork := wegtype/isPartOfPedestrianNetwork[wegtype_rel];
		
		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<rdc>               point (src)           := first_point(src/geometry);
			attribute<rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                   ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), part_rel);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := select_with_org_rel(networks/part_rel <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[org_rel];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}
	}

	unit<uint32> Network_Car := select_with_org_rel(Read_Final_Network/isPartOfCarNetwork)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[org_rel];
		attribute<wegtype>                      wegtype_rel                      := Read_Final_Network/wegtype_rel[org_rel];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[org_rel];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[org_rel];
		attribute<bool>                         IsOneDirection                   := Read_Final_Network/IsOneDirection[org_rel];
		
		attribute<bool>                         Connectable                      := wegtype_rel != Classifications/OSM/wegtype/V/motorway && wegtype_rel != Classifications/OSM/wegtype/V/motorway_link;
		attribute<km_hr>                        speed_max_car                    := Read_Final_Network/maxspeed[org_rel];
		attribute<km_hr>                        speed_max_limit_car              := speed_max_car > ModelParameters/Advanced/MaxCarSpeed_limit ? ModelParameters/Advanced/MaxCarSpeed_limit : speed_max_car;
		attribute<km_hr>                        speed_max_bike                   := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_max_e_bike                 := const(ModelParameters/Advanced/E_BikingSpeed_kmhr,.);
		attribute<km_hr>                        speed_max_pedestrian             := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_bike             := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_e_bike           := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_morning_car      := Read_Final_Network/congestion_speed_MorningRush[org_rel];
		attribute<km_hr>                        speed_congested_noon_car         := Read_Final_Network/congestion_speed_NoonRush[org_rel];
		attribute<km_hr>                        speed_congested_late_car         := Read_Final_Network/congestion_speed_LateEveningRush[org_rel];
		
		unit<uint32> isVerbonden := select_with_attr_by_cond(., Connectiveness/isVerbonden);
		
		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<geometries/rdc>               point (src)           := first_point(src/geometry);
			attribute<geometries/rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                  ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), part_rel);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := select_with_org_rel(networks/part_rel <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[org_rel];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}
	}
	unit<uint32> Network_Bike := select_with_org_rel(Read_Final_Network/isPartOfBikeNetwork)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[org_rel];
		attribute<classifications/OSM/wegtype>  wegtype_rel                      := Read_Final_Network/wegtype_rel[org_rel];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[org_rel];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[org_rel];
		attribute<bool>                         IsOneDirection                   := const(FALSE,.);
		attribute<bool>                         Connectable                      := wegtype_rel != Classifications/OSM/wegtype/V/motorway && wegtype_rel != Classifications/OSM/wegtype/V/motorway_link;
		
		attribute<km_hr>                        speed_max_car                    := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_max_limit_car              := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_max_bike                   := Read_Final_Network/freeflow_speed_bike[org_rel];
		attribute<km_hr>                        speed_max_e_bike                 := const(ModelParameters/Advanced/E_BikingSpeed_kmhr,.);
		attribute<km_hr>                        speed_max_pedestrian             := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_bike             := Read_Final_Network/congestion_speed_bike[org_rel];
		attribute<km_hr>                        speed_congested_e_bike           := speed_congested_bike + ModelParameters/Advanced/E_BikingSpeed_actualspeed_addition_kmhr;
		attribute<km_hr>                        speed_congested_morning_car      := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_noon_car         := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_late_car         := const((0/0)[km_hr],.);
		
		unit<uint32> isVerbonden := select_with_attr_by_cond(., Connectiveness/isVerbonden);
		
		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<geometries/rdc>               point (src)           := first_point(src/geometry);
			attribute<geometries/rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                   ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), part_rel);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := select_with_org_rel(networks/part_rel <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[org_rel];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}
	}
	unit<uint32> Network_Pedestrian := select_with_org_rel(Read_Final_Network/isPartOfPedestrianNetwork)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[org_rel];
		attribute<classifications/OSM/wegtype>  wegtype_rel                      := Read_Final_Network/wegtype_rel[org_rel];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[org_rel];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[org_rel];
		attribute<bool>                         IsOneDirection                   := const(FALSE,.);

		attribute<bool>                         Connectable                      := wegtype_rel != Classifications/OSM/wegtype/V/motorway && wegtype_rel != Classifications/OSM/wegtype/V/motorway_link;
		attribute<km_hr>                        speed_max_car                    := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_max_limit_car              := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_max_bike                   := const((0/0)[km_hr],.);
		attribute<km_hr>                        Speed_max_e_bike                 := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_max_pedestrian             := Read_Final_Network/freeflow_speed_pedestrian[org_rel];
		attribute<km_hr>                        speed_congested_bike             := const((0/0)[km_hr],.);
		attribute<km_hr>                        Speed_congested_e_bike           := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_morning_car      := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_noon_car         := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_late_car         := const((0/0)[km_hr],.);
		attribute<km_hr>                        speed_congested_pedestrian       := const((0/0)[km_hr],.);
		
		unit<uint32> isVerbonden := select_with_attr_by_cond(., Connectiveness/isVerbonden);	
		
		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<geometries/rdc>               point (src)           := first_point(src/geometry);
			attribute<geometries/rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                   ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), part_rel);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := select_with_org_rel(networks/part_rel <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[org_rel];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}
	}
	
	container OSM_Netwerken_Export 
	{
		parameter<string> Generate := Car/Generate + Bike/Generate + Pedestrian/Generate;
		
		container Car        := Write2Shp_T(Network_Car, 'Car')
		{
			parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList('dbf/'+Attributes/name, ';')"; 
		}
		container Bike       := Write2Shp_T(Network_Bike, 'Bike')
		{
			parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList('dbf/'+Attributes/name, ';')"; 
		}
		container Pedestrian := Write2Shp_T(Network_Pedestrian, 'Pedestrian')
		{
			parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList('dbf/'+Attributes/name, ';')"; 
		}
	
		Template Write2Shp_T
		{
			unit<uint32>      domain;
			parameter<string> Mode;
			
			unit<uint32> Dbf := domain
			, StorageName = "='%LocalDataProjDir%/OSM/'+Mode+'_network_'+file_date+'.dbf'"
			{
				attribute<geometries/rdc>               geometry (arc)      := domain/geometry, StorageName = "='%LocalDataProjDir%/OSM/'+Mode+'_network_'+file_date+'.shp'";
				attribute<string>                       OSM_id              := domain/OSM_id;
				attribute<classifications/OSM/wegtype>  wegtype_rel         := domain/wegtype_rel;
				attribute<string>                       wegtype_label       := domain/wegtype_label;
				attribute<km_hr>                        car_freeflow        := domain/speed_max_car;
				attribute<km_hr>                        bike_freeflow       := domain/speed_max_bike;
				attribute<km_hr>                        pedestrian_freeflow := domain/speed_max_pedestrian;
				attribute<km_hr>                        cs_bike             := domain/speed_congested_bike;
				attribute<km_hr>                        cs_morning          := domain/speed_congested_morning_car;
				attribute<km_hr>                        cs_noon             := domain/speed_congested_noon_car;
				attribute<km_hr>                        cs_evening          := domain/speed_congested_late_car;
			}
			
			unit<uint32> Attributes := Subtree_PropValues(Dbf, 'name');
		}
	}
}
