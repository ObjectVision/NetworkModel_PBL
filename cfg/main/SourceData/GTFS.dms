container GTFS : using = "geometries;classifications"
{
	unit<uint64> c_Time_Stops             := combine_unit_uint64(Time,RelevantSelection/Stops);
	unit<uint64> c_Trip_Time              := combine_unit_uint64(Trips, Time);
	unit<uint64> c_Time_Places            := combine_unit_uint64(Time,Places);
	unit<uint32> Places                   := RelevantSelection/ScheduledLinks/SL_Places;
	unit<uint32> c_NS_start_end           := /SourceData/Infrastructuur/OVprijzen/NS/NS_tariefeenheden_matrix/c_NS_start_end;
	unit<uint8>  Modes                    := GTFS_Modes/Selectie;
	unit<uint32> Trips                    := RelevantSelection/Trips;
	unit<uint32> Routes                   := RelevantSelection/Routes;

	#include<LoadFeeds.dms>
	#include<RelevantSelection.dms>
	
	container GetWaitingAtStop := CreateWaitingAtStopSet_T(RelevantSelection/ScheduledLinks, RelevantSelection/Stops);

 	Template CreateWaitingAtStopSet_T
	{
		unit<uint32> Network;
		unit<uint32> Stops;
		///
		
		unit<uint32> doubledLinks := union_unit(Network,Network)
		, Descr = "in order to get a set of all time-place events"
		{
			attribute<Time>      Time_rel       := union_data(., Network/fromTime_rel, Network/ToTime_rel);
			attribute<Trips>     Trip_rel       := union_data(., Network/Trip_rel, Network/Trip_rel);
			attribute<rdc>       geometry       := union_data(., Network/fromPoint, Network/toPoint);
			attribute<Stops>     Stop_rel       := rlookup(geometry, Stops/geometry);
			attribute<c_Trip_Time>     c_Trip_Time_rel     := combine_data(c_Trip_Time, Trip_rel, Time_rel);
			
			attribute<WaitingAtStop>  uq_c_Trip_Time_rel := rlookup(c_Trip_Time_rel, WaitingAtStop/c_Trip_Time_rel);
		}
	
		//bij elke c_Time_Stop_rel wordt er een wachtlink toegevoegd tot aan de volgende time_rel op die stop. 
		unit<uint32> WaitingAtStop   := unique(doubledLinks/c_Trip_Time_rel) //fka uq_c_Trip_Time
		{
			attribute<c_Trip_Time>  c_Trip_Time_rel    := values;
			attribute<Trips>        Trip_rel           := value(c_Trip_Time_rel / uint64(#Time), Trips);
			attribute<Time>         Time_rel           := value(c_Trip_Time_rel % uint64(#Time), Time);
			attribute<Stops>        Stop_rel           := doubledLinks/Stop_rel[invert(doubledLinks/uq_c_Trip_Time_rel)];
			attribute<Trips>        NextTrip_rel       := Trip_rel[add_or_null(id(.),1)];
			attribute<Stops>        NextStop_rel       := Stop_rel[add_or_null(id(.),1)];
			attribute<Routes>       Route_rel          := Trips/Route_rel[Trip_rel];
			
			attribute<string>       RouteName          := Trips/Label[Trip_rel];
			attribute<.>            FirstMoment        := min_index(Time_rel, Trip_rel)[Trip_rel];
			attribute<.>            LastMoment         := max_index(Time_rel, Trip_rel)[Trip_rel];
			attribute<.>            NextMoment         := Trip_rel == NextTrip_rel && Stop_rel == NextStop_rel
															? add_or_null(id(.),1) 
															: null_u; 
			
			unit<uint32>  MakeWaitingLines := union_unit(., .)
			{
				attribute<rdc>                      geometry     := union_data(., Stops/geometry[Stop_rel], Stops/geometry[Stop_rel]);
				attribute<..>                       sequence_rel := union_data(., id(..), id(..));
				attribute<uint32>                   ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
			}

			attribute<rdc>          geometry (arc) := points2sequence(MakeWaitingLines/geometry, MakeWaitingLines/sequence_rel, MakeWaitingLines/ordinal);
			attribute<Stops>        FromStop_rel   := Stop_rel;
			attribute<Stops>        ToStop_rel     := Stop_rel;
			attribute<rdc>          FromPoint      := Stops/geometry[FromStop_rel];
			attribute<rdc>          ToPoint        := Stops/geometry[ToStop_rel];
			attribute<Time>         FromTime_rel       := Time_rel;
			attribute<Time>         ToTime_rel         := Time_rel[NextMoment];
			attribute<s_f>          Duration       := FromTime_rel <= ToTime_rel 
														? float32(sub_or_null(ToTime_rel,FromTime_rel))[s_f] 
														: float32(sub_or_null(ToTime_rel + #Time,FromTime_rel))[s_f]; // duration in seconds
			attribute<string>       Label          := 'Waiting at stop: ' + Stops/Name[FromStop_rel] + ' from ' + Time/Label[FromTime_rel] + ' to ' + Time/Label[ToTime_rel];
		}
	}

	unit<uint32> PublicTransportNet := union_unit(RelevantSelection/ScheduledLinks, GetWaitingAtStop/WaitingAtStop)
	, Descr = "full public transport network including waiting at stop"
	, Using = "RelevantSelection"
	{	
		unit<uint32> SL_Places    := RelevantSelection/ScheduledLinks/SL_Places;
		unit<uint32> uq_TimeStop  := RelevantSelection/ScheduledLinks/uq_TimeStop;
		unit<uint32> Stops        := RelevantSelection/Stops
		{
			unit<uint64> c_Stop_Stop                 := combine_unit_uint64(Stops, Stops);
			unit<uint32> Find_Halte_Clusters         := join_near_values(geometry, geometry, float64(ModelParameters/Advanced/DistanceStopClusters))
			{
				attribute<rdc>         geometry        := ../geometry[first_rel];
				attribute<c_Stop_Stop> c_Stop_Stop_rel := combine_data(c_Stop_Stop, first_rel, second_rel);
			}
			
			unit<uint32> Find_Trainstations_Clusters := join_near_values(geometry, SourceData/Infrastructuur/Infrastructuur/Trainstations/geometry, float64(ModelParameters/Advanced/DistanceTrainStationsSelection))
			{
				attribute<string>                   Trainstations_code := SourceData/Infrastructuur/Infrastructuur/Trainstations/code[second_rel];
				attribute<bool>                     IsICStation        := SourceData/Infrastructuur/Infrastructuur/Trainstations/IsIC[second_rel];
				attribute<OVprijzen/NS/NS_Stations> NS_Stations_rel    := rlookup(lowercase(Trainstations_code), OVprijzen/NS/NS_Stations/code);
				attribute<bool>                     IsNSkortStation    := IsDefined(rlookup(Trainstations_code, /SourceData/Infrastructuur/Infrastructuur/Trainstations/uq/NS_kort_stations/code));
			}
			
			attribute<OVprijzen/NS/NS_Stations> NS_Stations_rel          := lookup(invert(Find_Trainstations_Clusters/first_rel), Find_Trainstations_Clusters/NS_Stations_rel);
			attribute<bool>                     IsNSkortStation          := lookup(invert(Find_Trainstations_Clusters/first_rel),  Find_Trainstations_Clusters/IsNSkortStation);
			attribute<bool>                     IsNSICStation            := lookup(invert(Find_Trainstations_Clusters/first_rel),  Find_Trainstations_Clusters/IsICStation);
			
			attribute<bool>                     IsOVFietsStation         := IsDefined(invert(Find_OVFiets_Stops/first_rel));
			
			unit<uint32> Find_OVFiets_Stops         := join_near_values(geometry, SourceData/Infrastructuur/Infrastructuur/OV_Fiets_Stations/geometry, float64(ModelParameters/Advanced/DistanceOVFietsStops))
			{
				attribute<rdc>         geometry        := ../geometry[first_rel];
			}
		}
		
		unit<uint32> Routes  := RelevantSelection/Routes;
		
		attribute<rdc>                     geometry (arc)                  := union_data(., RelevantSelection/ScheduledLinks/geometry, GetWaitingAtStop/WaitingAtStop/geometry);
		attribute<rdc>                     From_Point                      := union_data(., RelevantSelection/ScheduledLinks/FromPoint, GetWaitingAtStop/WaitingAtStop/FromPoint);
		attribute<rdc>                     To_Point                        := union_data(., RelevantSelection/ScheduledLinks/ToPoint, GetWaitingAtStop/WaitingAtStop/ToPoint);
		attribute<Stops>                   From_Stop_rel                   := union_data(., RelevantSelection/ScheduledLinks/FromStop_rel, GetWaitingAtStop/WaitingAtStop/FromStop_rel);
		attribute<Stops>                   To_Stop_rel                     := union_data(., RelevantSelection/ScheduledLinks/ToStop_rel, GetWaitingAtStop/WaitingAtStop/ToStop_rel);
		
		attribute<string>                  Label                           := union_data(., RelevantSelection/ScheduledLinks/Label, GetWaitingAtStop/WaitingAtStop/Label);
		attribute<Time>                    From_Time_rel                   := union_data(., RelevantSelection/ScheduledLinks/FromTime_rel, GetWaitingAtStop/WaitingAtStop/FromTime_rel);
		attribute<Time>                    To_Time_rel                     := union_data(., RelevantSelection/ScheduledLinks/ToTime_rel, GetWaitingAtStop/WaitingAtStop/ToTime_rel);
		attribute<s_f>                     Duration                        := union_data(., RelevantSelection/ScheduledLinks/Duration, GetWaitingAtStop/WaitingAtStop/Duration); 
		attribute<LinkTypes>               LinkType_rel                    := union_data(., const(LinkTypes/V/Scheduled,RelevantSelection/ScheduledLinks,LinkTypes), const(LinkTypes/V/Waiting_at_Stop, GetWaitingAtStop/WaitingAtStop, LinkTypes));
		
		attribute<km>                      Length                          := union_data(., RelevantSelection/ScheduledLinks/Length, const(0, GetWaitingAtStop/WaitingAtStop, km));
		attribute<Modes>                   Mode_rel                        := union_data(., RelevantSelection/ScheduledLinks/Mode_rel, const(Modes/V/Waiting, GetWaitingAtStop/WaitingAtStop, Modes));
		attribute<uint32>                  Trip_rel                        := union_data(., RelevantSelection/ScheduledLinks/Trip_rel, GetWaitingAtStop/WaitingAtStop/trip_rel);
		attribute<Agencies>                Agency_rel                      := union_data(., RelevantSelection/ScheduledLinks/Agency_rel, const(0/0, GetWaitingAtStop/WaitingAtStop));
		attribute<Routes>                  Route_rel                       := union_data(., RelevantSelection/ScheduledLinks/Route_rel, GetWaitingAtStop/WaitingAtStop/Route_rel);
		attribute<string>                  RouteName                       := union_data(., RelevantSelection/ScheduledLinks/RouteName, const('Waiting', GetWaitingAtStop/WaitingAtStop));
		attribute<string>                  RouteName_short                 := union_data(., RelevantSelection/ScheduledLinks/RouteName_short, const('Waiting', GetWaitingAtStop/WaitingAtStop)); 
		 
		attribute<bool>                    IsConnectedToNSkortStation      := Stops/IsNSkortStation[From_Stop_rel] || Stops/IsNSkortStation[To_Stop_rel];
		attribute<c_NS_start_end>          c_NS_start_end_rel              := combine_data(c_NS_start_end, NS_StartPoint_rel, NS_EndPoint_rel);
		attribute</SourceData/Infrastructuur/OVprijzen/NS/NS_stations>             NS_StartPoint_rel              := Stops/NS_Stations_rel[From_Stop_rel];
		attribute</SourceData/Infrastructuur/OVprijzen/NS/NS_stations>             NS_EndPoint_rel                := Stops/NS_Stations_rel[To_Stop_rel];
		
	}
	
	Template Get_Agency_Set_TGet_Agency_Set_T
	{
		parameter<string> selection_str;
		///
		
		unit<uint32>        Set       := ='select_with_attr_by_cond(RelevantSelection/ScheduledLinks,'+selection_str+')'
		{
			attribute<Places>         FromPlace_rel             := rlookup(FromPoint, Places/geometry);
			attribute<Places>         ToPlace_rel               := rlookup(ToPoint, Places/geometry);
			attribute<c_Time_Places>  c_fromTime_Place_rel      := combine_data(c_Time_Places, FromTime_rel, FromPlace_rel);
			attribute<c_Time_Places>  c_toTime_Place_rel        := combine_data(c_Time_Places, ToTime_rel, ToPlace_rel);
		}
	}
	
}