container GTFS : using = "geometries;classifications"
{
	unit<uint64> c_Time_Stops             := combine_unit_uint64(Time,RelevantSelection/Stops);
	unit<uint64> c_Trip_Time              := combine_unit_uint64(Trips, Time);
	// unit<uint64> c_Time_PT_Places         := combine_unit_uint64(Time,PublicTransportNet/PT_Places);
	unit<uint64> c_Time_Places            := combine_unit_uint64(Time,Places);
	unit<uint32> Places                   := RelevantSelection/ScheduledLinks/SL_Places;
	unit<uint32> c_NS_start_end           := /SourceData/Infrastructuur/OVprijzen/NS/NS_tariefeenheden_matrix/c_NS_start_end;
	unit<uint32> Modes                    := GTFS_Modes/Selectie;
	unit<uint32> Trips                    := RelevantSelection/Trips;
	unit<uint32> Routes                   := RelevantSelection/Routes;

	#include<LoadFeeds.dms>
	#include<RelevantSelection.dms>
	
	container GetWaitingAtStop := CreateWaitingAtStopSet_T(RelevantSelection/ScheduledLinks, RelevantSelection/Stops);
	
	
	
	
	
/* 	container NS_lang 
	: Descr = "set met PT-netwerk van en naar NS-lang nodes. Inclusief intra-transfers+wachten"
	{
		unit<uint64> c_Time_SubStops             := combine_unit_uint64(Time,SubStops);
	
		// unit<uint32> Stops := RelevantSelection/Stops
		// {
			// attribute<bool> IsRelevantStop := IsDefined(rlookup(id(.), PTnet/doubledLinks/Stop_rel));
		// }
	
		// unit<uint32> SubStops       := select_with_org_rel_with_attr_by_cond(RelevantSelection/Stops, Stops/IsRelevantStop)
		// {
			// attribute<StopsGrid> StopsGrid_rel         := geometry[StopsGrid];
			// attribute<uint32>    StopsGrid_id          := StopsGrid/id[StopsGrid_rel];
			// attribute<uint32>    CumulateStop_in_grid  := cumulate(const(1,.,uint32), StopsGrid_rel) - 1;
			// attribute<upoint>    Unique_id             := point_xy(CumulateStop_in_grid, StopsGrid_id, upoint);
			// attribute<uint32>    nTransfers            := StopsGrid/nTransfers[StopsGrid_rel];
			  
			// unit<spoint> StopsGrid := ='rdc_'+string(ModelParameters/Advanced/MaxTransferDistKm)+'m'
			// , Descr = "prepare grid with nStops and nTransfers for later use in determining transfers."
			// {
				// attribute<uint32> nStops     := pcount(StopsGrid_rel);
				// attribute<uint32> nTransfers := nTop + nRight + nBottom + nLeft + (sub_or_null(nStops,1));
				// attribute<uint32> nTop       := potential(float32(nStops), float32(Templates/Neighbourhood/Top))[uint32];
				// attribute<uint32> nRight     := potential(float32(nStops), float32(Templates/Neighbourhood/Right))[uint32];
				// attribute<uint32> nBottom    := potential(float32(nStops), float32(Templates/Neighbourhood/Bottom))[uint32];
				// attribute<uint32> nLeft      := potential(float32(nStops), float32(Templates/Neighbourhood/Left))[uint32];
				// attribute<uint32> id         := cumulate(const(1,.,uint32))-1;
			// }
		
		// }
	
		unit<uint32> PTnet          := select_with_attr_by_cond(RelevantSelection/ScheduledLinks, Agencies/IsNS[RelevantSelection/ScheduledLinks/Agency_rel])
		{
			attribute<Places>          FromPlace_rel             := rlookup(FromPoint, Places/geometry);
			attribute<Places>          ToPlace_rel               := rlookup(ToPoint, Places/geometry);
			attribute<c_Time_Places>   c_fromTime_Place_rel      := combine_data(c_Time_Places, FromTime_rel, FromPlace_rel);
			attribute<c_Time_Places>   c_toTime_Place_rel        := combine_data(c_Time_Places, ToTime_rel, ToPlace_rel);
			// attribute<NodeSet>         F1                        := rlookup(c_fromTime_Place_rel, NodeSet/c_Time_Place_rel);
			// attribute<NodeSet>         F2                        := rlookup(c_toTime_Place_rel, NodeSet/c_Time_Place_rel);
			attribute<uint32>          tariefeenheden            := /SourceData/Infrastructuur/OVprijzen/NS/NS_tariefeenheden_matrix/c_NS_start_end/Tariefeenheid[c_NS_start_end_rel];
			attribute<c_NS_start_end>  c_NS_start_end_rel        := combine_data(c_NS_start_end, NS_StartPoint_rel, NS_EndPoint_rel);
			// attribute<c_Time_SubStops> c_FromTime_SubStop_rel    := combine_data(c_Time_SubStops, fromTime_rel, FromSubStop_rel);
			// attribute<c_Time_SubStops> c_ToTime_SubStop_rel      := combine_data(c_Time_SubStops, toTime_rel, ToSubStop_rel);
			// attribute<SubStops>        FromSubStop_rel           := rlookup(FromStop_rel, SubStops/org_rel);
			// attribute<SubStops>        ToSubStop_rel             := rlookup(ToStop_rel, SubStops/org_rel);
			
			
			unit<uint32> doubledLinks := union_unit(., .)
			, Descr = "in order to get a set of all time-place events"
			{
				attribute<Time>             Time_rel            := union_data(., fromTime_rel, toTime_rel);
				attribute<rdc>              geometry            := union_data(., fromPoint, toPoint);
				attribute<Stops>            Stop_rel            := union_data(., fromStop_rel, ToStop_rel);
				attribute<SubStops>         SubStop_rel         := union_data(., fromSubStop_rel, ToSubStop_rel);
				attribute<Places>           Place_rel           := rlookup(geometry, Places/geometry);
				attribute<c_Time_Places>    c_Time_Place_rel    := combine_data(c_Time_Places, Time_rel, Place_rel);
				attribute<c_Time_SubStops>  c_Time_SubStops_rel := union_data(., ../c_FromTime_SubStop_rel, ../c_ToTime_SubStop_rel);
				
			}
			
			unit<uint32> NodeSet := unique(doubledLinks/c_Time_Place_rel)
			{
				attribute<c_Time_Places>    c_Time_Place_rel := values;
				attribute<Time>             Time_rel         := value(c_Time_Place_rel / uint64(#Places), Time);
				attribute<Places>           Place_rel        := value(c_Time_Place_rel % uint64(#Places), Places);
				attribute<rdc>              geometry         := Places/geometry[Place_rel];
				attribute<string>           Label            := Places/label[Place_rel] + ' @ ' + Time/Label[Time_rel];
				
				attribute<.>                OrgNode_rel  (org)  := rlookup(org/geometry,  geometry);
				attribute<.>                DestNode_rel (dest) := rlookup(dest/geometry, geometry);
				attribute<NS_Stations>      NS_Stations_rel     := Places/NS_Stations_rel[Place_rel];
			}
			
			// unit<uint32> ScheduledSpaceTimeEvents := unique(doubledLinks/c_Time_SubStops_rel)
			// , Descr = "aka SSTE"
			// {
				// attribute<c_Time_SubStops> c_Time_SubStops_rel    := values;
				// attribute<Time>            Time_rel               := value(c_Time_SubStops_rel / uint64(#SubStops), Time);
				// attribute<SubStops>        SubStop_rel            := value(c_Time_SubStops_rel % uint64(#SubStops), SubStops);
				// attribute<string>          Label                  := SubStops/Name[SubStop_rel] + ' @ ' + Time/Label[Time_rel];
				// attribute<uint32>          cumu_events_Stop       := cumulate(const(1,.,uint32), SubStop_rel) - 1;
				// attribute<upoint>          unique_id              := point_xy(cumu_events_Stop, SubStop_rel, upoint);
				// attribute<uint32>          aantal_tijden_per_stop := pcount(SubStop_rel)[SubStop_rel];
			// }
		}
		
		
		// container GetTransfers := CreateTransfersSet_T(SubStops, PTnet/ScheduledSpaceTimeEvents);
		
		// unit<uint32> AddTransfersToScheduledLinks := union_unit(PTnet, GetTransfers/TransferLinks)
		// , Descr = "scheduled links + transfer links"
		// {
			// attribute<rdc>                     geometry      (arc) := union_data(., PTnet/geometry, GetTransfers/TransferLinks/geometry); 
			// attribute<Time>                    FromTime_rel        := union_data(., PTnet/fromTime_rel, GetTransfers/TransferLinks/fromTime_rel); 
			// attribute<Time>                    ToTime_rel          := union_data(., PTnet/ToTime_rel, GetTransfers/TransferLinks/ToTime_rel); 
			// attribute<s_f>                     Duration            := union_data(., PTnet/Duration, GetTransfers/TransferLinks/Duration); 
			// attribute<string>                  Label               := union_data(., PTnet/Label, GetTransfers/TransferLinks/Label), DialogType = "LabelText";
			// attribute<Trips>                   Trip_rel            := union_data(., PTnet/Trip_rel, const(0/0,GetTransfers/TransferLinks));
			// attribute<Routes>                  Route_rel           := union_data(., PTnet/Route_rel, const((0/0)[Routes],GetTransfers/TransferLinks));
			// attribute<string>                  RouteName           := union_data(., PTnet/RouteName, const('Walking',GetTransfers/TransferLinks));
			// attribute<string>                  RouteName_short     := union_data(., PTnet/RouteName_short, const('Walking',GetTransfers/TransferLinks));
			// attribute<Agencies>                Agency_rel          := union_data(., PTnet/Agency_rel, const(0/0,GetTransfers/TransferLinks));
			// attribute<Modes>                   Mode_rel            := union_data(., PTnet/Mode_rel, const(Modes/V/Walking, GetTransfers/TransferLinks, Modes));
			// attribute<LinkTypes>               LinkType_rel        := union_data(., const(LinkTypes/V/Scheduled,PTnet,LinkTypes), const(LinkTypes/V/Transfer,GetTransfers/TransferLinks,LinkTypes));
			// attribute<Stops>                   FromStop_rel        := union_data(., PTnet/FromStop_rel, GetTransfers/TransferLinks/FromStop_rel); 
			// attribute<Stops>                   ToStop_rel          := union_data(., PTnet/ToStop_rel, GetTransfers/TransferLinks/ToStop_rel); 
			// attribute<rdc>                     fromPoint           := first_point(geometry);
			// attribute<rdc>                     toPoint             := last_point(geometry);
			// attribute<PT_Places>               FromPT_Place_rel    := rlookup(fromPoint, PT_Places/Values);
			// attribute<string>                  FromPT_Place_name   := PT_Places/Stop_name[FromPT_Place_rel];
			// attribute<PT_Places>               ToPT_Place_rel      := rlookup(toPoint, PT_Places/Values);
			// attribute<string>                  ToPT_Place_name     := PT_Places/Stop_name[ToPT_Place_rel];
			// attribute<bool>                    IsIntraModeTransfer := union_data(., const(FALSE, PTnet), GetTransfers/TransferLinks/IsIntraModeTransfer); 
		// }
		
		// container GetWaitingAtStop := CreateWaitingAtStopSet_T(AddTransfersToScheduledLinks, SubStops);
	}
	
 */	
 
	// container NS_kort 
	// : Descr = "set met PT-netwerk van en naar NS-kort nodes. Inclusief intra-transfers+wachten"
	// {
	// }
	// container NonNS
	// : Descr = "set met PT-netwerk van en naar non NS nodes. Inclusief intra-transfers+wachten"
	// {
	// }
	
	// container InterTransfers
	// : Descr = "set met transfers+wachten om modaliteit-sets te kunnen verbinden."
	// {
	// }
	
	
	
 	Template CreateWaitingAtStopSet_T
	{
		unit<uint32> Network;
		unit<uint32> Stops;
		///
		
		unit<uint32> doubledLinks := union_unit(Network,Network)
		, Descr = "in order to get a set of all time-place events"
		{
			attribute<Time>      Time_rel       := union_data(., Network/fromTime_rel, Network/ToTime_rel);
			attribute<Trips>     Trip_rel       := union_data(., Network/Trip_rel, Network/Trip_rel);
			attribute<rdc>       geometry       := union_data(., Network/fromPoint, Network/toPoint);
			attribute<Stops>     Stop_rel       := rlookup(geometry, Stops/geometry);
			// attribute<PT_Places> PT_Place_rel   := rlookup(geometry, PT_Places/geometry);
			
			// attribute<c_Time_PT_Places> c_Time_PT_Place_rel := combine_data(c_Time_PT_Places, Time_rel, PT_Place_rel);
			// attribute<c_Time_Stops>     c_Time_Stop_rel     := combine_data(c_Time_Stops, Time_rel, Stop_rel);
			attribute<c_Trip_Time>     c_Trip_Time_rel     := combine_data(c_Trip_Time, Trip_rel, Time_rel);
			
			attribute<WaitingAtStop>  uq_c_Trip_Time_rel := rlookup(c_Trip_Time_rel, WaitingAtStop/c_Trip_Time_rel);
		}
	
		//bij elke c_Time_Stop_rel wordt er een wachtlink toegevoegd tot aan de volgende time_rel op die stop. Belangrijk hiervoor dat in deze set de transfers al verwerkt zitten.
		unit<uint32> WaitingAtStop   := unique(doubledLinks/c_Trip_Time_rel) //fka uq_c_Trip_Time
		{
			attribute<c_Trip_Time>  c_Trip_Time_rel    := values;
			attribute<Trips>        Trip_rel           := value(c_Trip_Time_rel / uint64(#Time), Trips);
			attribute<Time>         Time_rel           := value(c_Trip_Time_rel % uint64(#Time), Time);
			attribute<Stops>        Stop_rel           := doubledLinks/Stop_rel[invert(doubledLinks/uq_c_Trip_Time_rel)];
			attribute<Trips>        NextTrip_rel       := Trip_rel[add_or_null(id(.),1)];
			attribute<Stops>        NextStop_rel       := Stop_rel[add_or_null(id(.),1)];
			
			attribute<string>       RouteName          := Trips/Label[Trip_rel];
			// attribute<string>       Label              := Trips/Label[Trip_rel] + ' @ ' + Time/Label[Time_rel];
			attribute<.>            FirstMoment        := min_index(Time_rel, Trip_rel)[Trip_rel];
			attribute<.>            LastMoment         := max_index(Time_rel, Trip_rel)[Trip_rel];
			attribute<.>            NextMoment         := Trip_rel == NextTrip_rel && Stop_rel == NextStop_rel
															? add_or_null(id(.),1) 
															: null_u; // Sprinter Utrecht Centraal <-> Baarn SPR5500
															// : FirstMoment; // Sprinter Utrecht Centraal <-> Baarn SPR5500
			// attribute<bool>         points_unsorted    := Values != sort(Values); // check to verify Values are orderd ascendingly (documented as such in online documentation)
			
			unit<uint32>  MakeWaitingLines := union_unit(., .)
			{
				attribute<rdc>                      geometry     := union_data(., Stops/geometry[Stop_rel], Stops/geometry[Stop_rel]);
				attribute<..>                       sequence_rel := union_data(., id(..), id(..));
				attribute<uint32>                   ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
			}

			attribute<rdc>          geometry (arc) := points2sequence(MakeWaitingLines/geometry, MakeWaitingLines/sequence_rel, MakeWaitingLines/ordinal);
			attribute<Stops>        FromStop_rel   := Stop_rel;
			attribute<Stops>        ToStop_rel     := Stop_rel;
			attribute<rdc>          FromPoint      := Stops/geometry[FromStop_rel];
			attribute<rdc>          ToPoint        := Stops/geometry[ToStop_rel];
			attribute<Time>         FromTime_rel       := Time_rel;
			attribute<Time>         ToTime_rel         := Time_rel[NextMoment];
			attribute<s_f>          Duration       := FromTime_rel <= ToTime_rel 
														? float32(sub_or_null(ToTime_rel,FromTime_rel))[s_f] 
														: float32(sub_or_null(ToTime_rel + #Time,FromTime_rel))[s_f]; // duration in seconds
			attribute<string>       Label          := 'Waiting at stop: ' + Stops/Name[FromStop_rel] + ' from ' + Time/Label[FromTime_rel] + ' to ' + Time/Label[ToTime_rel];
		}
	}
 
	
	
	
	// unit<uint32> AddTransfersToScheduledLinks := union_unit(RelevantSelection/ScheduledLinks, CreateTransfersSet/TransferLinks)
	// , Descr = "scheduled links + transfer links"
	// , Using = "RelevantSelection" 
	// {
		// attribute<rdc>                     geometry      (arc) := union_data(., RelevantSelection/ScheduledLinks/geometry, CreateTransfersSet/TransferLinks/geometry); 
		// attribute<Time>                    FromTime_rel        := union_data(., RelevantSelection/ScheduledLinks/fromTime_rel, CreateTransfersSet/TransferLinks/fromTime_rel); 
		// attribute<Time>                    ToTime_rel          := union_data(., RelevantSelection/ScheduledLinks/ToTime_rel, CreateTransfersSet/TransferLinks/ToTime_rel); 
		// attribute<s_f>                     Duration            := union_data(., RelevantSelection/ScheduledLinks/Duration, CreateTransfersSet/TransferLinks/Duration); 
		// attribute<string>                  Label               := union_data(., RelevantSelection/ScheduledLinks/Label, CreateTransfersSet/TransferLinks/Label), DialogType = "LabelText";
		// attribute<Trips>                   Trip_rel            := union_data(., RelevantSelection/ScheduledLinks/Trip_rel, const(0/0,CreateTransfersSet/TransferLinks));
		// attribute<Routes>                  Route_rel           := union_data(., RelevantSelection/ScheduledLinks/Route_rel, const((0/0)[Routes],CreateTransfersSet/TransferLinks));
		// attribute<string>                  RouteName           := union_data(., RelevantSelection/ScheduledLinks/RouteName, const('Walking',CreateTransfersSet/TransferLinks));
		// attribute<string>                  RouteName_short     := union_data(., RelevantSelection/ScheduledLinks/RouteName_short, const('Walking',CreateTransfersSet/TransferLinks));
		// attribute<Agencies>                Agency_rel          := union_data(., RelevantSelection/ScheduledLinks/Agency_rel, const(0/0,CreateTransfersSet/TransferLinks));
		// attribute<Modes>                   Mode_rel            := union_data(., RelevantSelection/ScheduledLinks/Mode_rel, const(Modes/V/Walking, CreateTransfersSet/TransferLinks, Modes));
		// attribute<LinkTypes>               LinkType_rel        := union_data(., const(LinkTypes/V/Scheduled,RelevantSelection/ScheduledLinks,LinkTypes), const(LinkTypes/V/Transfer,CreateTransfersSet/TransferLinks,LinkTypes));
		// attribute<Stops>                   FromStop_rel        := union_data(., RelevantSelection/ScheduledLinks/FromStop_rel, CreateTransfersSet/TransferLinks/FromStop_rel); 
		// attribute<Stops>                   ToStop_rel          := union_data(., RelevantSelection/ScheduledLinks/ToStop_rel, CreateTransfersSet/TransferLinks/ToStop_rel); 
		// attribute<rdc>                     fromPoint           := first_point(geometry);
		// attribute<rdc>                     toPoint             := last_point(geometry);
		// attribute<PT_Places>               FromPT_Place_rel    := rlookup(fromPoint, PT_Places/Values);
		// attribute<string>                  FromPT_Place_name   := PT_Places/Stop_name[FromPT_Place_rel];
		// attribute<PT_Places>               ToPT_Place_rel      := rlookup(toPoint, PT_Places/Values);
		// attribute<string>                  ToPT_Place_name     := PT_Places/Stop_name[ToPT_Place_rel];
		// attribute<bool>                    IsIntraModeTransfer := union_data(., const(FALSE, RelevantSelection/ScheduledLinks), CreateTransfersSet/TransferLinks/IsIntraModeTransfer); 
		
		
		// unit<uint32> doubledLinks := union_unit(., .)
		// , Descr = "in order to get a set of all time-place events"
		// {
			// attribute<Time>      Time_rel         := union_data(., fromTime_rel, ToTime_rel);
			// attribute<rdc>       geometry       := union_data(., fromPoint, toPoint);
			// attribute<Stops>     Stop_rel       := rlookup(geometry, Stops/geometry);
			// attribute<PT_Places> PT_Place_rel   := rlookup(geometry, PT_Places/geometry);
			
			// attribute<c_Time_PT_Places> c_Time_PT_Place_rel := combine_data(c_Time_PT_Places, Time_rel, PT_Place_rel);
			// attribute<c_Time_Stops>     c_Time_Stop_rel     := combine_data(c_Time_Stops, Time_rel, Stop_rel);
			
		// }
		
		// unit<uint32> PT_Places := unique(doubledLinks/geometry)
		// , Descr = "unique stop locations"
		// {
			// attribute<Stops>   Stop_rel    := rlookup(geometry, Stops/geometry);
			// attribute<string>  Stop_name   := Stops/Name[Stop_rel];
			// attribute<string>  Label       := Stop_name;
			// attribute<rdc>     geometry    := values;
		// }
		
		// unit<uint32> uq_TimeEvents    := unique(doubledLinks/Time_rel);
		
		//bij elke c_Time_Stop_rel wordt er een wachtlink toegevoegd tot aan de volgende time_rel op die stop. Belangrijk hiervoor dat in deze set de transfers al verwerkt zitten.
		// unit<uint32> uq_c_Time_Stops  := unique(doubledLinks/c_Time_Stop_rel) //fka UniqueMomentXStop
		// {
			// attribute<c_Time_Stops> c_Time_Stop_rel    := values;
			// attribute<Time>         Time_rel           := value(c_Time_Stop_rel / uint64(#Stops), Time);
			// attribute<Stops>        Stop_rel           := value(c_Time_Stop_rel % uint64(#Stops), Stops);
			
			// attribute<string>       Label              := Stops/Name[Stop_rel] + ' @ ' + Time/Label[Time_rel];
			// attribute<.>            FirstMoment        := min_index(Time_rel, Stop_rel)[Stop_rel];
			// attribute<.>            NextMoment         := Stop_rel[add_or_null(id(.),1)] = Stop_rel ? add_or_null(id(.),1) : FirstMoment;
			// attribute<bool>         points_unsorted    := Values != sort(Values); // check to verify Values are orderd ascendingly (documented as such in online documentation)
			
			// unit<uint32>  MakeWaitingLines := union_unit(., .)
			// {
				// attribute<rdc>                      geometry     := union_data(., Stops/geometry[Stop_rel], Stops/geometry[Stop_rel]);
				// attribute<..>                       sequence_rel := union_data(., id(..), id(..));
				// attribute<uint32>                   ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
			// }
		// }
		// unit<uint32> WaitingAtStop := uq_c_Time_Stops 
		// {
			// attribute<rdc>          geometry (arc) := points2sequence(uq_c_Time_Stops/MakeWaitingLines/geometry, uq_c_Time_Stops/MakeWaitingLines/sequence_rel, uq_c_Time_Stops/MakeWaitingLines/ordinal);
			// attribute<Stops>        FromStop_rel   := Stop_rel;
			// attribute<Stops>        ToStop_rel     := Stop_rel[NextMoment];
			// attribute<rdc>          FromPoint      := Stops/geometry[FromStop_rel];
			// attribute<rdc>          ToPoint        := Stops/geometry[ToStop_rel];
			// attribute<Time>         FromTime_rel       := Time_rel;
			// attribute<Time>         ToTime_rel         := Time_rel[NextMoment];
			// attribute<s_f>          Duration       := FromTime_rel <= ToTime_rel 
														// ? float32(sub_or_null(ToTime_rel,FromTime_rel))[s_f] 
														// : float32(sub_or_null(ToTime_rel + #Time,FromTime_rel))[s_f]; // duration in seconds
			// attribute<string>       Label          := 'Waiting at stop: ' + Stops/Name[FromStop_rel] + ' from ' + Time/Label[FromTime_rel] + ' to ' + Time/Label[ToTime_rel];
		// }
		// unit<uint32> NodeSet:= unique(doubledLinks/c_Time_PT_Place_rel)
		// {
			// attribute<c_Time_PT_Places> c_Time_PT_Place_rel := values;
			// attribute<Time>             Time_rel            := value(c_Time_PT_Place_rel / uint64(#PT_Places), Time);
			// attribute<PT_Places>        PT_Place_rel        := value(c_Time_PT_Place_rel % uint64(#PT_Places), PT_Places);
			// attribute<rdc>              geometry            := PT_Places/geometry[PT_Place_rel];
			
			// attribute<string>           Label               := PT_Places/label[PT_Place_rel] + ' @ ' + Time/Label[Time_rel];
		// }
	// }

	unit<uint32> PublicTransportNet := union_unit(RelevantSelection/ScheduledLinks, GetWaitingAtStop/WaitingAtStop)
	, Descr = "full public transport network including waiting at stop"
	, Using = "RelevantSelection"
	{	
		// unit<uint32> NodeSet    := RelevantSelection/ScheduledLinks/Nodeset;
		unit<uint32> SL_Places    := RelevantSelection/ScheduledLinks/SL_Places;
		unit<uint32> uq_TimeStop  := RelevantSelection/ScheduledLinks/uq_TimeStop;
		unit<uint32> Stops        := RelevantSelection/Stops
		{
			// attribute<SL_Places> Sl_Place_rel             := rlookup(geometry, SL_Places/geometry);
			
			attribute<m>                        Dist2_Trainstation       := rjoin(geometry, uq_points/values, Define_Stopgroups_Trainstations/dist);
			attribute<string>                   Trainstations_code       := Dist2_Trainstation  < ModelParameters/Advanced/DistanceTrainStationsSelection ? rjoin(geometry, uq_points/values, Define_Stopgroups_Trainstations/station_code) : '';
			attribute<OVprijzen/NS/NS_Stations> NS_Stations_rel          := rlookup(lowercase(Trainstations_code), OVprijzen/NS/NS_Stations/code);
			attribute<bool>                     IsNSkortStation          := IsDefined(rlookup(Trainstations_code, /SourceData/Infrastructuur/Infrastructuur/Trainstations/uq/NS_kort_stations/code));
			
			
			unit<uint32> uq_points := unique(geometry)
			{
				attribute<float32>  x           := PointCol(values);
				attribute<float32>  y           := PointRow(values);
			}
			unit<uint32> Trainstations := SourceData/Infrastructuur/Infrastructuur/Trainstations/uq;
			
			container Define_Stopgroups_Trainstations := Define_Stopgroups_T(Trainstations);
			
			Template Define_Stopgroups_T
			{
				unit<uint32>                Station_dom;
				
				attribute<rdc>              geometry  (Station_dom)      := Station_dom/Geometry;
				attribute<float32>          x         (Station_dom)      := PointCol(geometry);
				attribute<float32>          y         (Station_dom)      := PointRow(geometry);
				
				attribute<Station_dom>      stations_rel (uq_points)       := connect(geometry, uq_points/values);
				attribute<string>           station_code (uq_points)       := Station_dom/code[stations_rel];

				attribute<float32>          x_targetdomain (uq_points)  := PointCol(geometry)[stations_rel];
				attribute<float32>          y_targetdomain (uq_points)  := PointRow(geometry)[stations_rel];
				attribute<float32>          delta_x (uq_points)         := sqr(abs(x_targetdomain - uq_points/x));
				attribute<float32>          delta_y (uq_points)         := sqr(abs(y_targetdomain - uq_points/y));

				attribute<m>                dist (uq_points)            := sqrt(delta_x + delta_y)[m];
			}
		}
		
		unit<uint32> Routes  := RelevantSelection/Routes;
		
		attribute<rdc>                     geometry (arc)                 := union_data(., RelevantSelection/ScheduledLinks/geometry, GetWaitingAtStop/WaitingAtStop/geometry);
		// attribute<PT_Places>               FromPT_Place_rel               := Stops/PT_Place_rel[FromStop_rel];
		// attribute<string>                  FromPT_Place_name              := Stops/name[FromStop_rel];
		// attribute<string>                  ToPT_Place_name                := Stops/name[ToStop_rel];
		// attribute<PT_Places>               ToPT_Place_rel                 := Stops/PT_Place_rel[ToStop_rel];
		attribute<rdc>                     From_Point                      := union_data(., RelevantSelection/ScheduledLinks/FromPoint, GetWaitingAtStop/WaitingAtStop/FromPoint);
		attribute<rdc>                     To_Point                        := union_data(., RelevantSelection/ScheduledLinks/ToPoint, GetWaitingAtStop/WaitingAtStop/ToPoint);
		attribute<Stops>                   From_Stop_rel                   := union_data(., RelevantSelection/ScheduledLinks/FromStop_rel, GetWaitingAtStop/WaitingAtStop/FromStop_rel);
		attribute<Stops>                   To_Stop_rel                     := union_data(., RelevantSelection/ScheduledLinks/ToStop_rel, GetWaitingAtStop/WaitingAtStop/ToStop_rel);
		
		attribute<string>                  Label                          := union_data(., RelevantSelection/ScheduledLinks/Label, GetWaitingAtStop/WaitingAtStop/Label);
		attribute<Time>                    From_Time_rel                       := union_data(., RelevantSelection/ScheduledLinks/FromTime_rel, GetWaitingAtStop/WaitingAtStop/FromTime_rel);
		attribute<Time>                    To_Time_rel                         := union_data(., RelevantSelection/ScheduledLinks/ToTime_rel, GetWaitingAtStop/WaitingAtStop/ToTime_rel);
		attribute<s_f>                     Duration                       := union_data(., RelevantSelection/ScheduledLinks/Duration, GetWaitingAtStop/WaitingAtStop/Duration); //, IntegrityCheck = "ModelParameters/Add_OV_PriceInformation ? all(RelevantSelection/ScheduledLinks/HasPriceRelation) : TRUE";
		attribute<LinkTypes>               LinkType_rel                   := union_data(., const(LinkTypes/V/Scheduled,RelevantSelection/ScheduledLinks,LinkTypes), const(LinkTypes/V/Waiting_at_Stop, GetWaitingAtStop/WaitingAtStop, LinkTypes));
		// attribute<c_Time_PT_Places>        c_fromTime_PT_Place_rel        := combine_data(c_Time_PT_Places, FromTime_rel, FromPT_Place_rel);
		// attribute<c_Time_PT_Places>        c_toTime_PT_Place_rel          := combine_data(c_Time_PT_Places, ToTime_rel, ToPT_Place_rel);
		
		attribute<km>                      Length                         := arc_length(geometry, m)[km];
		attribute<Modes>                   Mode_rel                       := union_data(., RelevantSelection/ScheduledLinks/Mode_rel, const(Modes/V/Waiting, GetWaitingAtStop/WaitingAtStop, Modes));
		attribute<uint32>                  Trip_rel                       := union_data(., RelevantSelection/ScheduledLinks/Trip_rel, const(0/0, GetWaitingAtStop/WaitingAtStop));
		attribute<Agencies>                Agency_rel                     := union_data(., RelevantSelection/ScheduledLinks/Agency_rel, const(0/0, GetWaitingAtStop/WaitingAtStop));
		attribute<Routes>                  Route_rel                      := union_data(., RelevantSelection/ScheduledLinks/Route_rel, const((0/0)[Routes], GetWaitingAtStop/WaitingAtStop));
		attribute<string>                  RouteName                      := union_data(., RelevantSelection/ScheduledLinks/RouteName, const('Waiting', GetWaitingAtStop/WaitingAtStop));
		attribute<string>                  RouteName_short                := union_data(., RelevantSelection/ScheduledLinks/RouteName_short, const('Waiting', GetWaitingAtStop/WaitingAtStop)); 
		 
		attribute<bool>                    IsConnectedToNSkortStation     := Stops/IsNSkortStation[From_Stop_rel] || Stops/IsNSkortStation[To_Stop_rel];
		attribute<c_NS_start_end>          c_NS_start_end_rel        := combine_data(c_NS_start_end, NS_StartPoint_rel, NS_EndPoint_rel);
		attribute</SourceData/Infrastructuur/OVprijzen/NS/NS_stations>             NS_StartPoint_rel              := Stops/NS_Stations_rel[From_Stop_rel];
		attribute</SourceData/Infrastructuur/OVprijzen/NS/NS_stations>             NS_EndPoint_rel                := Stops/NS_Stations_rel[To_Stop_rel];
			
	}
	
	// #include<PublicTransportNet.dms>
	
	
	
	
	
	// container Set_NonNS   := Get_Agency_Set_T('RelevantSelection/ScheduledLinks/Agency_rel != Agencies/V/ns');
	// container Set_NS_lang := Get_Agency_Set_T('RelevantSelection/ScheduledLinks/Agency_rel == Agencies/V/ns');
	// container Set_NS_kort := Get_Agency_Set_T(''+PT_net_str+'/Agency_rel == Agencies/V/ns && '+PT_net_str+'/IsConnectedToNSkortStation');
	
	Template Get_Agency_Set_T
	{
		parameter<string> selection_str;
		///
		
		unit<uint32>        Set       := ='select_with_attr_by_cond(RelevantSelection/ScheduledLinks,'+selection_str+')'
		{
			attribute<Places>         FromPlace_rel             := rlookup(FromPoint, Places/geometry);
			attribute<Places>         ToPlace_rel               := rlookup(ToPoint, Places/geometry);
			attribute<c_Time_Places>  c_fromTime_Place_rel      := combine_data(c_Time_Places, FromTime_rel, FromPlace_rel);
			attribute<c_Time_Places>  c_toTime_Place_rel        := combine_data(c_Time_Places, ToTime_rel, ToPlace_rel);
		}
	}
	
}