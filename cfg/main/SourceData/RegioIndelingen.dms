container RegioIndelingen : using = "geometries"
{ 
	parameter<string> Regio_jaar          := ModelParameters/Advanced/RegioIndelingen_jaar;
	
	unit<uint32> Gebiedsindelingen_jaren := range(uint32, 2000, 2024)
	{
		attribute<uint32> jaar            := id(.);
		attribute<string> name            := 'Y'+string(jaar);
		attribute<bool>   IsGeneraliseerd := jaar < 2019;
		attribute<string> Pad_str         := jaar < 2020 
												? replace(Naam_voor_2020_str, 'YYYY', string(jaar), 'GG', IsGeneraliseerd ? '_gegeneraliseerd' : '_niet_gegeneraliseerd') 
												: replace(Naam_vanaf_2020_str, 'YYYY', string(jaar), 'GG', IsGeneraliseerd ? '_gegeneraliseerd' : '_niet_gegeneraliseerd');
		attribute<string> Pad_Gegen_str   := jaar < 2020 ? replace(Naam_voor_2020_str, 'YYYY', string(jaar), 'GG', '_gegeneraliseerd') : replace(Naam_vanaf_2020_str, 'GG', '_gegeneraliseerd') ;
		
		parameter<string> Naam_voor_2020_str  := 'cbs_@R@_YYYYGG';
		parameter<string> Naam_vanaf_2020_str := '@R@GG';
	}
	container Gebiedsindelingen :=
		for_each_ne(
			Gebiedsindelingen_jaren/name
			, 'Read_Gebiedsindelingen_gpkg_T('+quote(string(Gebiedsindelingen_jaren/jaar))+')'
		);

	Template Read_Gebiedsindelingen_gpkg_T
	{
		parameter<string> jaar;
		//
		container gpkg
		:	StorageName     = "='%NetworkModel_dir%/RegioIndelingen/cbsgebiedsindelingen'+jaar+'.gpkg'"
		, 	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "alltables"
		,	DialogData      = "rdc"
		,	URL             = "https://www.cbs.nl/nl-nl/dossier/nederland-regionaal/geografische-data/cbs-gebiedsindelingen";
	}
	
	unit<uint32>  Buurt := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'buurt')
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'buurt')+'/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'buurt')+'/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'buurt')+'/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+ModelParameters/Advanced/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/Advanced/LISA_jaar+'/PerYear/Geometry, geometry))';
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		attribute<rdc>          address_weighted_centroid    := =ModelParameters/Advanced/ExcludeOrgBuurtCentroidsWithoutAddressPop 
																	? 'SourceData/BAG/Adressen/Woon_Voorraad/Buurt/HeeftAdressen 
																		? SourceData/BAG/Adressen/Woon_Voorraad/Buurt/centroid 
																		: null_fp'
																	: 'SourceData/BAG/Adressen/Woon_Voorraad/Buurt/centroid';
																	
		attribute<rdc>          population_weighted_centroid    := =ModelParameters/Advanced/ExcludeOrgBuurtCentroidsWithoutAddressPop 
																	? 'CalcPopCentroids/W > 0f 
																		? CalcPopCentroids/geometry 
																		: null_fp'
																	: 'CalcPopCentroids/geometry';
		attribute<rdc>          centroid                     := =ModelParameters/CentroidWeightType == 'Population' ? 'population_weighted_centroid' : 'address_weighted_centroid';
		attribute<centroiden>   centroiden_rel               := rlookup(centroid, centroiden/geometry);
		
		unit<uint32> CalcPopCentroids := .
		{
			attribute<float32> W                   := sum(Population/pop, Population/regio_rel);
			
			attribute<float32> Weighted_X          := sum(Population/x * Population/pop, Population/regio_rel);
			attribute<float32> Weighted_Y          := sum(Population/y * Population/pop, Population/regio_rel);
			
			attribute<float32> mean_X              := Weighted_X / W;
			attribute<float32> mean_Y              := Weighted_y / W;
			 
			attribute<rdc>     weighted_centroid0  := point_xy(mean_X, mean_Y, rdc);
			
			//controles
			attribute<.>        poly_rel           := point_in_polygon(weighted_centroid0, ../geometry);
			attribute<string>   statcode_poly      := ./statcode;
			attribute<string>   statcode_centr     := statcode_poly[Poly_rel];
			attribute<bool>     IsStatcode_gelijk  := statcode_poly == statcode_centr;
			attribute<rdc>      centroid_or_mid    := centroid_or_mid(../geometry);
			attribute<rdc>      weighted_centroid  := IsStatcode_gelijk ? weighted_centroid0 : centroid_or_mid;
			
			
			attribute<rdc>      geometry           := weighted_centroid;
			
			unit<uint32> Population := SourceData/Locaties/Inwoners
			{
				attribute<...>     regio_rel := point_in_polygon(centroid, .../geometry);
				attribute<float32> x         := pointcol(centroid);
				attribute<float32> y         := pointrow(centroid);
				attribute<float32> pop       := nr_inwoners[float32];
				
			}
		}
		
		unit<uint32> centroiden := unique(centroid)
		{
			attribute<geometries/rdc>   geometry     := values;
			attribute<string>           name         := ../statcode[invert(Centroiden_rel)];
			attribute<string>           label        := ../statnaam[invert(Centroiden_rel)];
			attribute<uint32>           nr_Inwoners  := ../nr_Inwoners[invert(Centroiden_rel)];
			attribute<uint32>           nr_banen     := ../nr_banen[invert(Centroiden_rel)];
			attribute<Gemeente>         gemeente_rel := point_in_polygon(geometry, Gemeente/geometry);
			attribute<Provincie>        prov_rel     := point_in_polygon(geometry, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(geometry, Corop/geometry);
			container V := for_each_nedv(AsItemName(name), 'value('+string(id(.))+', ..)', void, .);
			container V_label := for_each_nedv(AsItemName(label), 'value('+string(id(.))+', ..)', void, .);
		}
		
		unit<uint32> Enkele_Buurt     := ='select_with_attr_by_cond(centroiden, id(centroiden) == centroiden/v/'+ModelParameters/Orgset_EnkeleBuurt_selectie+')';
		unit<uint32> Enkele_Buurt_dest:= ='select_with_attr_by_cond(centroiden, id(centroiden) == centroiden/v/'+ModelParameters/Destset_Enkele_selectie+')';
		unit<uint32> Enkele_Gemeente  := ='select_with_attr_by_cond(centroiden, centroiden/gemeente_rel == Gemeente/V/'+ModelParameters/Orgset_EnkeleGem_selectie+')';
		unit<uint32> Enkele_Prov      := ='select_with_attr_by_cond(centroiden, centroiden/prov_rel == Provincie/V/'+ModelParameters/Orgset_EnkeleProv_selectie+')';
		unit<uint32> Enkele_Corop     := ='select_with_attr_by_cond(centroiden, centroiden/corop_rel == COROP/V/'+ModelParameters/Orgset_EnkeleCorop_selectie+')';
		
		container Per_Prov := 
			for_each_ne(
				provincie/name
				, 'Per_Prov_T('+string(id(provincie))+', centroiden)'
			);
		container Per_COROP := 
			for_each_ne(
				COROP/name
				, 'Per_COROP_T('+string(id(COROP))+', centroiden)'
			);
	}
	
	unit<uint32>  Wijk := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'wijk')
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'wijk')+'/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'wijk')+'/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'wijk')+'/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/Advanced/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/Advanced/LISA_jaar+'/PerYear/Geometry, geometry))';
		
		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		
		attribute<rdc>          address_weighted_centroid    := SourceData/BAG/Adressen/Woon_Voorraad/wijk/centroid;
		attribute<rdc>          population_weighted_centroid := CalcPopCentroids/geometry;
		attribute<rdc>          centroid                     := =ModelParameters/CentroidWeightType == 'Population' ? 'population_weighted_centroid' : 'address_weighted_centroid';
		attribute<centroiden>   centroiden_rel               := rlookup(centroid, centroiden/geometry);
		
		unit<uint32> CalcPopCentroids := .
		{
			attribute<float32> W          := sum(Population/pop, Population/regio_rel);
			
			attribute<float32> Weighted_X := sum(Population/x * Population/pop, Population/regio_rel);
			attribute<float32> Weighted_Y := sum(Population/y * Population/pop, Population/regio_rel);
			
			attribute<float32> mean_X     := Weighted_X / W;
			attribute<float32> mean_Y     := Weighted_y / W;
			 
			attribute<rdc>  weighted_centroid0            := point_xy(mean_X, mean_Y, rdc);
			attribute<bool> IsWeighted_centroid_in_regio  := IsDefined(point_in_polygon(weighted_centroid0, ../geometry));
			attribute<rdc>  weighted_centroid             := IsWeighted_centroid_in_regio ? weighted_centroid0 : centroid_or_mid(../geometry);
			attribute<rdc>  geometry                      := weighted_centroid;
			
			unit<uint32> Population := SourceData/Locaties/Inwoners
			{
				attribute<...>     regio_rel := point_in_polygon(centroid, .../geometry);
				attribute<float32> x         := pointcol(centroid);
				attribute<float32> y         := pointrow(centroid);
				attribute<float32> pop       := nr_inwoners[float32];
				
			}
		}
		
		unit<uint32> centroiden := unique(centroid)
		{
			attribute<geometries/rdc>   geometry     := values;
			attribute<string>           name         := ../statcode[invert(Centroiden_rel)];
			attribute<string>           label        := ../statnaam[invert(Centroiden_rel)];
			attribute<uint32>           nr_Inwoners  := ../nr_Inwoners[invert(Centroiden_rel)];
			attribute<uint32>           nr_banen     := ../nr_banen[invert(Centroiden_rel)];
			attribute<Provincie>        prov_rel     := point_in_polygon(geometry, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(geometry, Corop/geometry);
			container V := for_each_nedv(AsItemName(label), 'value('+string(id(.))+', ..)', void, .);
		}
		
		container Per_Prov := 
			for_each_ne(
				provincie/name
				, 'Per_Prov_T('+string(id(provincie))+', centroiden)'
			);
		container Per_COROP := 
			for_each_ne(
				COROP/name
				, 'Per_COROP_T('+string(id(COROP))+', centroiden)'
			);
	}
	
	unit<uint32>  Gemeente := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'gemeente')
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'gemeente')+'/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'gemeente')+'/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_str), '@R@', 'gemeente')+'/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/Advanced/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/Advanced/LISA_jaar+'/PerYear/Geometry, geometry))';

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
		
		attribute<rdc>          address_weighted_centroid    := SourceData/BAG/Adressen/Woon_Voorraad/gemeente/centroid;
		attribute<rdc>          population_weighted_centroid := CalcPopCentroids/geometry;
		attribute<rdc>          centroid                     := =ModelParameters/CentroidWeightType == 'Population' ? 'population_weighted_centroid' : 'address_weighted_centroid';
		attribute<centroiden>   centroiden_rel               := rlookup(centroid, centroiden/geometry);
		
		unit<uint32> CalcPopCentroids := .
		{
			attribute<float32> W          := sum(Population/pop, Population/regio_rel);
			
			attribute<float32> Weighted_X := sum(Population/x * Population/pop, Population/regio_rel);
			attribute<float32> Weighted_Y := sum(Population/y * Population/pop, Population/regio_rel);
			
			attribute<float32> mean_X     := Weighted_X / W;
			attribute<float32> mean_Y     := Weighted_y / W;
			 
			attribute<rdc>  weighted_centroid0            := point_xy(mean_X, mean_Y, rdc);
			attribute<bool> IsWeighted_centroid_in_regio  := IsDefined(point_in_polygon(weighted_centroid0, ../geometry));
			attribute<rdc>  weighted_centroid             := IsWeighted_centroid_in_regio ? weighted_centroid0 : centroid_or_mid(../geometry);
			attribute<rdc>  geometry                      := weighted_centroid;
			
			unit<uint32> Population := SourceData/Locaties/Inwoners
			{
				attribute<...>     regio_rel := point_in_polygon(centroid, .../geometry);
				attribute<float32> x         := pointcol(centroid);
				attribute<float32> y         := pointrow(centroid);
				attribute<float32> pop       := nr_inwoners[float32];
				
			}
		}
		
		unit<uint32> centroiden := unique(centroid)
		{
			attribute<geometries/rdc>   geometry     := values;
			attribute<string>           name         := ../statcode[invert(Centroiden_rel)];
			attribute<string>           label        := ../statnaam[invert(Centroiden_rel)];
			attribute<uint32>           nr_Inwoners  := ../nr_Inwoners[invert(Centroiden_rel)];
			attribute<uint32>           nr_banen     := ../nr_banen[invert(Centroiden_rel)];
			attribute<Provincie>        prov_rel     := point_in_polygon(geometry, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(geometry, Corop/geometry);
			container V      := for_each_nedv(AsItemName(label), 'value('+string(id(.))+', ..)', void, .);
			container V_Code := for_each_nedv(AsItemName(name), 'value('+string(id(.))+', ..)', void, .);
		}
		
		unit<uint32> Enkele_Gemeente := ='select_with_attr_by_cond(centroiden, id(centroiden) == centroiden/V_Code/'+ModelParameters/Orgset_EnkeleGem_selectie+')';
		
		container Per_Prov := 
			for_each_ne(
				provincie/name
				, 'Per_Prov_T('+string(id(provincie))+', centroiden)'
			);
		container Per_COROP := 
			for_each_ne(
				COROP/name
				, 'Per_COROP_T('+string(id(COROP))+', centroiden)'
			);
	}
	
	unit<uint32>  Corop := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'coropgebied')+'' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'coropgebied')+'/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'coropgebied')+'/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'coropgebied')+'/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/Advanced/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/Advanced/LISA_jaar+'/PerYear/Geometry, geometry))';

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint32>  Provincie := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'provincie')+'' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'provincie')+'/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'provincie')+'/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'provincie')+'/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;
		attribute<.>         per_rdc_100m (rdc_100m) := poly2grid(Geometry, rdc_100m);
		attribute<uint32>    nr_Inwoners             := sum(/SourceData/Locaties/Inwoners/nr_inwoners,point_in_polygon(/SourceData/Locaties/Inwoners/centroid, geometry));
		attribute<uint32>    nr_banen                := ='sum(uint32(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/Advanced/LISA_jaar+'/PerYear/banen), point_in_polygon(/SourceData/Locaties/LISA/ReadFSS/y'+/ModelParameters/Advanced/LISA_jaar+'/PerYear/Geometry, geometry))';

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}
	
	unit<uint32>  Zorgkantoorregio := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'zorgkantoorregio')+'' 
	{
		attribute<rdc>       geometry (poly)         := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'zorgkantoorregio')+'/geometry';
		attribute<string>    statcode                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'zorgkantoorregio')+'/statcode';
		attribute<string>    statnaam                := ='Gebiedsindelingen/y'+Regio_jaar+'/gpkg/'+replace(rjoin(Regio_jaar, string(Gebiedsindelingen_jaren/jaar), Gebiedsindelingen_jaren/Pad_Gegen_str), '@R@', 'zorgkantoorregio')+'/statnaam';
		attribute<string>    name                    := AsItemName(statnaam);
		attribute<string>    label                   := statnaam;

		container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
	}

	unit<uint32> NL := range(uint32, 0, 1) 
	{
		attribute<rdc>    geometry                 (poly) := bp_union_polygon(Corop/geometry[rdc_cm], const(0[.],Corop))[rdc];
		attribute<string> name                            : [ 'All' ];
		attribute<rdc>    Nederland_10kbuffer      (poly) := bg_outer_multi_polygon(bg_buffer_multi_polygon(geometry, 10000d, 16b));
	}
	
	unit<uint32> Buitenland : nrofrows = 1
	{
		attribute<string>         name            := const('Buitenland',.);
	}
	
	unit<uint32> Provincies_metBuitenland := union_unit(Provincie, Buitenland)
	{
		attribute<string>         name           := union_data(., Provincie/name, Buitenland/name);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint32> LMS_gm4_2022
	:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/LMS_gm4_2022_polygons.shp"
	,	StorageType     = "gdal.vect"
	,		StorageReadOnly = "True"
	{
		attribute<geometries/rdc>       geometry  (poly);
		attribute<uint32>               ZONE_ID;
		attribute<uint32>               NL;
	}

	unit<uint32> LMS_gm4_2022_centroiden
	:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/LMS_gm4_2022_pop_gew_centroiden_NL.shp"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	{
		attribute<geometries/rdc>       geometry;
		attribute<geometries/rdc>       point     := geometry;
		attribute<uint32>               ZONE_ID;
		attribute<uint32>               NL;
		attribute<uint32>               xcoord;
		attribute<uint32>               ycoord;
		attribute<string>               name         := ''+string(ZONE_ID);
		attribute<string>               label        := name;
		
	}


	
	unit<uint32> PC6pnt2020 
	:	StorageName     = "%SourceDataDir%/NetworkModel/Voorzieningen/PC6_punten/pc6_xy_tm2020.shp"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	{
		attribute<rdc>                   geometry;
		attribute<rdc>                   point               := geometry;
		attribute<string>                name                := postcode6;
		attribute<string>                label               := name;
		attribute<uint32>                nr_pc6_2020         := const(1,.);
		attribute<RegioUnit_Buurt>       buurt_rel           := point_in_polygon(geometry, RegioUnit_Buurt/Geometry);
		attribute<string>                buurtcode           := RegioUnit_Buurt/statcode[buurt_rel];
		attribute<string>                buurtnaam           := RegioUnit_Buurt/statnaam[buurt_rel];
	}	
	
	container PC5_avg_xy_wpft
	{
		unit<uint32> obv_LISA_2022
		:	StorageName     = "%SourceDataDir%/NetworkModel/Voorzieningen/PC5_punten/LISA2022_2012_2022_pc5_avg_xy.gdb"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			unit<uint32> PC5pnt_2022_2012
			{
				attribute<geometries/rdc>       geometry;
				attribute<geometries/rdc>       point                 := geometry;
				attribute<string>               Name                  := pc5;
				attribute<string>               label                 := pc5;
				attribute<uint32>               Nr_pc5                := const(1,.);
				attribute<uint32>               Nr_items_of_interest  := Nr_pc5;
				attribute<RegioUnit_Buurt>      buurt_rel             := point_in_polygon(geometry, RegioUnit_Buurt/Geometry);
				attribute<string>               buurtcode             := RegioUnit_Buurt/BU_CODE[buurt_rel];
				attribute<string>               buurtnaam             := RegioUnit_Buurt/BU_NAAM[buurt_rel];		
			}
		}		
	}
	
	container LMS
	{
		unit<uint32> y2022
		:	StorageName     = "%SourceDataDir%/NetworkModel/Voorzieningen/LMS_zones/LMS_2022gm4_pgewcentr_NL.gdb"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			unit<uint32> LMS_gm4_2022_centroiden_NL
			{
				attribute<geometries/rdc>       geometry;
				attribute<geometries/rdc>       point                := geometry;
				attribute<string>               Name                 := string(ZONE_ID);
				attribute<string>               label                := Name;
				attribute<uint32>               Nr_lms               := const(1,.);
				attribute<uint32>               Nr_items_of_interest := Nr_lms;
				attribute<RegioUnit_Buurt>      buurt_rel            := point_in_polygon(geometry, RegioUnit_Buurt/Geometry);
				attribute<string>               buurtcode            := RegioUnit_Buurt/BU_CODE[buurt_rel];
				attribute<string>               buurtnaam            := RegioUnit_Buurt/BU_NAAM[buurt_rel];
			}
		}
	}
	container Buurt_centroiden
	{

		unit<uint32> Buurtcentr_2023_gew_wnadr_geodms_vervoerregio_amsterdam
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/buurtcentr_2023_gew_wnadr_geodms_vervoerregio_amsterdam.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>       geometry;
			attribute<geometries/rdc>       point     := geometry;
			attribute<string>               name      := buurt_nm;
		}
		
		unit<uint32> Buurtcentr_2012_gew_wnadr_geodms_3gemdrontenstudie
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/buurtcentr_2012_gew_wnadr_geodms_3gemdrontenstudie.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>       geometry;
			attribute<geometries/rdc>       point     := geometry;
			attribute<string>               name      := buurt_nm;
		}

		unit<uint32> Buurtcentr_2012_gew_wnadr_geodms_2172_gemdrontenstudie
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/brt2012_NL_2172_drontenstudie.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>       geometry;
			attribute<geometries/rdc>       point     := geometry;
			attribute<string>               name      := buurt_nm;
		}
		
		unit<uint32> Buurtcentr_2012_gew_wnadr_geodms_2944_gemdrontenstudie
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/brt2012_NL_2944_drontenstudie.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>       geometry;
			attribute<geometries/rdc>       point     := geometry;
			attribute<string>               name      := buurt_nm;
		}
		
		unit<uint32> Buurtcentr_2012_gew_wnadr_geodms_2906_gemdrontenstudie
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/brt2012_NL_2906_drontenstudie.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>       geometry;
			attribute<geometries/rdc>       point     := geometry;
			attribute<string>               name      := buurt_nm;
		}
		
		unit<uint32> Buurt2022_won_adr_centr_inside
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/Buurt2022_won_adr_centr_inside.shp"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc>       geometry;
			attribute<geometries/rdc>       point     := geometry;
			attribute<string>           BU_CODE      := BU2022CODE;
			attribute<string>           BU_NAAM      := BU2022NAAM;
			attribute<string>           name         := BU_CODE;
			attribute<string>           label        := BU_NAAM;

			attribute<uint32>           nr_Inwoners  := rjoin(BU_CODE, Buurt/statcode, Buurt/nr_Inwoners);
			attribute<uint32>           nr_banen     := rjoin(BU_CODE, Buurt/statcode, Buurt/nr_banen);
			 
			attribute<Provincie>        prov_rel     := point_in_polygon(point, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(point, Corop/geometry);
			
			container Per_Prov := 
				for_each_ne(
					provincie/name
					, 'Per_Prov_T('+string(id(provincie))+', ..)'
				);
				
			container Per_Corop := 
				for_each_ne(
					COROP/name
					, 'Per_Corop_T('+string(id(COROP))+', ..)'
				);
				
			
		}		
		
		unit<uint32> y2022_centroiden
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/Buurt2022_xy.gdb"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "alltables"
		{
			attribute<geometries/rdc>   geometry;
			attribute<geometries/rdc>   point := geometry;
			
			attribute<string>           BU_CODE      := BU2022CODE;
			attribute<string>           BU_NAAM      := BU2022NAAM;
			attribute<string>           name         := BU_CODE;
			attribute<string>           label        := BU_NAAM;

			attribute<uint32>           nr_Inwoners  := rjoin(BU_CODE, Buurt/statcode, Buurt/nr_Inwoners);
			attribute<uint32>           nr_banen     := rjoin(BU_CODE, Buurt/statcode, Buurt/nr_banen);
			 
			attribute<Provincie>        prov_rel     := point_in_polygon(point, Provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(point, Corop/geometry);
			
			container Per_Prov := 
				for_each_ne(
					provincie/name
					, 'Per_Prov_T('+string(id(provincie))+', ..)'
				);
				
			container Per_Corop := 
				for_each_ne(
					COROP/name
					, 'Per_Corop_T('+string(id(COROP))+', ..)'
				);
				
		}

		unit<uint32> y2021_centroiden
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/Buurt2021_xy.gdb"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "alltables"
		{
			attribute<geometries/rdc>   geometry;
			attribute<geometries/rdc>   point := geometry;
			attribute<string>           BU_CODE      := BU2021CODE;
			attribute<string>           BU_NAAM      := BU2021NAAM;
			attribute<string>           name         := BU_CODE;
			attribute<string>           label        := BU_NAAM;
			
			attribute<uint32>           nr_Inwoners  := rjoin(BU_CODE, buurt/statcode, buurt/nr_Inwoners);
			attribute<uint32>           nr_banen     := rjoin(BU_CODE, buurt/statcode, buurt/nr_banen);
			
			attribute<provincie>       prov_rel      := point_in_polygon(point, provincie/geometry);
			attribute<Corop>           corop_rel     := point_in_polygon(point, Corop/geometry);
			
			container Per_Prov := 
				for_each_ne(
					provincie/name
					, 'Per_Prov_T('+string(id(provincie))+', ..)'
				);
				
			container Per_Corop := 
				for_each_ne(
					COROP/name
					, 'Per_Corop_T('+string(id(COROP))+', ..)'
				);
		}

		unit<uint32> y2020_centroiden
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/Buurt2020_xy.gdb"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "alltables"
		{
			attribute<geometries/rdc>   geometry;
			attribute<geometries/rdc>   point := geometry;
			attribute<string>           BU_CODE      := BU2020CODE;
			attribute<string>           BU_NAAM      := BU2020NAAM;
			attribute<string>           name         := BU_CODE;
			attribute<string>           label        := BU_NAAM;
			
			attribute<uint32>           nr_Inwoners  := rjoin(BU_CODE, buurt/statcode, buurt/nr_Inwoners);
			attribute<uint32>           nr_banen     := rjoin(BU_CODE, buurt/statcode, buurt/nr_banen);
			
			attribute<provincie>        prov_rel     := point_in_polygon(point, provincie/geometry);
			attribute<Corop>            corop_rel    := point_in_polygon(point, Corop/geometry);
			
			container Per_Prov := 
				for_each_ne(
					provincie/name
					, 'Per_Prov_T('+string(id(provincie))+', ..)'
				);
				
			container Per_Corop := 
				for_each_ne(
					COROP/name
					, 'Per_Corop_T('+string(id(COROP))+', ..)'
				);
		}
		
		unit<uint32> y2017_centroiden
		:	StorageName     = "%NetworkModel_dir%/RegioIndelingen/Buurt2017_xy.gdb"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	SyncMode        = "alltables"
		{
			attribute<geometries/rdc>   geometry;
			attribute<geometries/rdc>   point := geometry;
			attribute<string>           BU_CODE      := BU2017CODE;
			attribute<string>           BU_NAAM      := BU2017NAAM;
			attribute<string>           name         := BU_CODE;
			attribute<string>           label        := BU_NAAM;
			
			attribute<uint32>           nr_Inwoners  := rjoin(BU_CODE, buurt/statcode, buurt/nr_Inwoners);
			attribute<uint32>           nr_banen     := rjoin(BU_CODE, buurt/statcode, buurt/nr_banen);
			
			attribute<provincie>        prov_rel         := point_in_polygon(point, provincie/geometry);
			attribute<Corop>            corop_rel        := point_in_polygon(point, Corop/geometry);

			container Per_Prov := 
				for_each_ne(
					provincie/name
					, 'Per_Prov_T('+string(id(provincie))+', ..)'
				);
				
			container Per_Corop := 
				for_each_ne(
					COROP/name
					, 'Per_Corop_T('+string(id(COROP))+', ..)'
				);
		}
	}
	unit<uint8> Concessiegebied := ='Concessiegebieden/'+Modelparameters/Advanced/Concessiegebied_jaar+'/Concessiegebied';
	
	container Concessiegebieden 
	{
		container Y2024 
		{
			parameter<string> Jaar := 'Y2022';
			
			unit<uint32> Corop                := ='Gebiedsindelingen/'+Jaar+'/gpkg/coropgebied_gegeneraliseerd'
			{
				container V := for_each_nedv(AsItemName(statnaam), 'value('+string(id(.))+', ..)', void, .);
			}
			unit<uint32> Provincie            := ='Gebiedsindelingen/'+Jaar+'/gpkg/provincie_gegeneraliseerd'
			{
				container V := for_each_nedv(AsItemName(statnaam), 'value('+string(id(.))+', ..)', void, .);
			}
			unit<uint32> Zorgkantoorregio     := ='Gebiedsindelingen/'+Jaar+'/gpkg/zorgkantoorregio_gegeneraliseerd'
			{
				container V := for_each_nedv(AsItemName(statnaam), 'value('+string(id(.))+', ..)', void, .);
			}
			
			unit<uint32> Concessiegebied_Geom := ='Gebiedsindelingen/'+Jaar+'/gpkg/gemeente_niet_gegeneraliseerd'
			{
				attribute<string>             gem_naam               := statnaam;
				attribute<Provincie>          prov_rel               := point_in_polygon(centroid_or_mid(geometry), Provincie/geometry);
				attribute<Corop>              corop_rel              := point_in_polygon(centroid_or_mid(geometry), Corop/geometry);
				attribute<Zorgkantoorregio>   Zorgkantoorregio_rel   := point_in_polygon(centroid_or_mid(geometry), Zorgkantoorregio/geometry);

				attribute<Concessiegebied>  Concessiegebied_rel  :=
				switch(
					 case(prov_rel == Provincie/V/Groningen || prov_rel == Provincie/V/Drenthe, Concessiegebied/v/GD_Concessie) //1
					,case(prov_rel == Provincie/V/Fryslân, Concessiegebied/v/Openbaar_busvervoer_Fryslân) //2
					,case(Zorgkantoorregio_rel == Zorgkantoorregio/V/Flevoland || Zorgkantoorregio_rel == Zorgkantoorregio/V/Zwolle || corop_rel == Corop/V/Zuidwest_Overijssel || id(.) == v/nijkerk || id(.) == v/Brummen 
							|| (corop_rel == Corop/V/Veluwe && NOT(id(.) == v/Ede || id(.) == v/Barneveld || id(.) == v/Wageningen || id(.) == v/Scherpenzeel)) , Concessiegebied/v/IJssel_Vecht) //3
					,case(Zorgkantoorregio_rel == Zorgkantoorregio/V/Twente, Concessiegebied/v/Twente) //4
					,case(corop_rel == Corop/V/Achterhoek || corop_rel == Corop/V/zuidwest_gelderland || id(.) == v/Druten && NOT(id(.) == v/Brummen || id(.) == v/Montferland), Concessiegebied/v/Achterhoek_Rivierenland) //5
					,case((corop_rel == Corop/V/Arnhem_Nijmegen || id(.) == v/Montferland || id(.) == v/Mook_en_Middelaar) && NOT(id(.) == v/Druten), Concessiegebied/v/Concessie_Arnhem_Nijmegen) //6
					,case(id(.) == v/Barneveld || id(.) == v/Ede || id(.) == v/Wageningen || id(.) == v/Scherpenzeel, Concessiegebied/v/Noodconcessie_Veluwe_Zuid) //7
					,case(id(.) == v/Almere, Concessiegebied/v/Busvervoer_Almere) //8
					,case(id(.) == v/Eemnes || id(.) == v/Bunschoten || id(.) == v/Amersfoort || id(.) == v/Leusden || id(.) == v/Woudenberg || id(.) == v/Renswoude || id(.) == v/Veenendaal
						 || id(.) == v/Rhenen || id(.) == v/Utrechtse_Heuvelrug || id(.) == v/Wijk_bij_Duurstede || id(.) == v/Soest || id(.) == v/Baarn 
						 || id(.) == v/De_Ronde_Venen || id(.) == v/Stichtse_Vecht || id(.) == v/Woerden || id(.) == v/Montfoort || id(.) == v/Oudewater || id(.) == v/Lopik , Concessiegebied/v/Provincie_Utrecht) //9
					,case(id(.) == v/De_Bilt || id(.) == v/Zeist || id(.) == v/Bunnik || id(.) == v/Houten || id(.) == v/Utrecht || id(.) == v/Zeist || id(.) == v/Vijfheerenlanden || id(.) == v/IJsselstein || id(.) == v/Nieuwegein 
						, Concessiegebied/v/Tram_en_Bus_Regio_Utrecht) //10
					,case((Zorgkantoorregio_rel == Zorgkantoorregio/V/_t_gooi || id(.) == v/Weesp) && id(.) != v/Almere && id(.) != v/Eemnes, Concessiegebied/v/Gooi_en_Vechtstreek) //11
					,case(Zorgkantoorregio_rel == Zorgkantoorregio/V/Noord_Holland_Noord || id(.) == v/Castricum, Concessiegebied/v/Noord_Holland_Noord) //12
					,case(id(.) == v/Bloemendaal || id(.) == v/Zandvoort || id(.) == v/Haarlem || id(.) == v/Heemstede || id(.) == v/Velsen || id(.) == v/Heemskerk || id(.) == v/Uitgeest || id(.) == v/Beverwijk, Concessiegebied/v/Haarlem_IJmond) //13
					,case(Zorgkantoorregio_rel == Zorgkantoorregio/V/Zaanstreek_Waterland, Concessiegebied/v/Zaanstreek_Waterland) //14
					,case(id(.) == v/Amsterdam || id(.) == v/Diemen, Concessiegebied/v/Concessie_Amsterdam) //15
					,case(Zorgkantoorregio_rel == Zorgkantoorregio/V/Amstelland_en_de_Meerlanden, Concessiegebied/v/Amstelland_Meerlanden) //16
					,case(corop_rel == corop/v/oost_zuid_holland || corop_rel == corop/v/Agglomeratie_Leiden_en_Bollenstreek || id(.) == v/Zuidplas , Concessiegebied/v/Zuid_Holland_Noord) //17
					,case(id(.) == v/Leidschendam_Voorburg || id(.) == v/_s_Gravenhage || id(.) == v/Rijswijk, Concessiegebied/v/Bus_Haaglanden_stad) //18
					,case(id(.) == v/Leidschendam_Voorburg || id(.) == v/_s_Gravenhage || id(.) == v/Rijswijk, Concessiegebied/v/Concessie_rail_Haaglanden) //19
					,case(id(.) == v/Wassenaar || id(.) == v/Westland || id(.) == v/Maassluis || id(.) == v/Midden_Delfland || id(.) == v/Delft || id(.) == v/Pijnacker_Nootdorp || id(.) == v/Zoetermeer, Concessiegebied/v/Haaglanden_streek) //20
					,case(id(.) == v/Rotterdam || id(.) == v/Vlaardingen || id(.) == v/Schiedam || id(.) == v/Ridderkerk || id(.) == v/Lansingerland 
						|| id(.) == v/Hendrik_Ido_Ambacht || id(.) == v/Albrandswaard || id(.) == v/Barendrecht || id(.) == v/Capelle_aan_den_IJssel || id(.) == v/Krimpen_aan_den_Ijssel, Concessiegebied/v/Concessie_rail_Rotterdam) //21
					,case(id(.) == v/Rotterdam || id(.) == v/Vlaardingen || id(.) == v/Schiedam || id(.) == v/Ridderkerk || id(.) == v/Lansingerland 
						|| id(.) == v/Hendrik_Ido_Ambacht || id(.) == v/Albrandswaard || id(.) == v/Barendrecht || id(.) == v/Capelle_aan_den_IJssel || id(.) == v/Krimpen_aan_den_Ijssel, Concessiegebied/v/Bus_Rotterdam_eo) //22
					,case(id(.) == v/Westvoorne || id(.) == v/Hellevoetsluis || id(.) == v/Brielle || id(.) == v/Nissewaard, Concessiegebied/v/Voorne_Putten_en_Rozenburg) //23
					,case(id(.) == v/Hoeksche_waard || id(.) == v/Goeree_Overflakkee, Concessiegebied/v/Hoeksche_waard_GoereeOverflakkee) //24
					,case(id(.) == v/Molenlanden || id(.) == v/Gorinchem || id(.) == v/Dordrecht || id(.) == v/Alblasserdam 
							|| id(.) == v/Zwijndrecht || id(.) == v/Papendrecht || id(.) == v/Sliedrecht || id(.) == v/Hardinxveld_Giessendam, Concessiegebied/v/Drechtsteden_MolenlandenGorinchem) //25
					,case(Zorgkantoorregio_rel == Zorgkantoorregio/V/zeeland, Concessiegebied/v/zeeland) //26
					,case(Zorgkantoorregio_rel == Zorgkantoorregio/V/west_brabant, Concessiegebied/v/west_brabant) //27
					,case(corop_rel == Corop/V/noordoost_noord_brabant || Zorgkantoorregio_rel == Zorgkantoorregio/V/midden_Brabant, Concessiegebied/v/oost_brabant) //28
					,case(Zorgkantoorregio_rel == Zorgkantoorregio/V/Zuidoost_brabant, Concessiegebied/v/Zuidoost_Brabant) //29
					,case(Zorgkantoorregio_rel == Zorgkantoorregio/V/noord_en_midden_limburg || Zorgkantoorregio_rel == Zorgkantoorregio/V/zuid_limburg || id(.) == v/Gennep, Concessiegebied/v/Limburg) // 30
					, null_b
				);
				
				container V := for_each_nedv(AsItemName(gem_naam), 'value('+string(id(.))+', ..)', void, .);
			}

			unit<uint8> Concessiegebied : NrOfRows = 30
			, URL = "https://www.crow.nl/downloads/pdf/collectief-vervoer/concessieposter-2024.aspx?ext=.pdf"
			{
				unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
				{
					attribute<String> Text: //data 1 januari 2024
					[
						//Label                            , Vervoersbedrijf
						'GD-concessie'                     , 'Qbuzz',
						'Openbaar busvervoer Fryslân'      , 'Arriva',
						'IJssel-Vecht'                     , 'EBS',
						'Twente'                           , 'Arriva',
						'Achterhoek Rivierenland'          , 'Arriva',
						'Concessie Arnhem Nijmegen'        , 'Hermes',
						'Noodconcessie Veluwe-Zuid'        , 'Hermes',
						'Busvervoer Almere'                , 'Keolis Nederland',
						'Provincie Utrecht'                , 'Keolis Nederland',
						'Tram en Bus Regio Utrecht'        , 'Qbuzz',
						'Gooi en Vechtstreek'              , 'Connexxion/Transdev',
						'Noord-Holland Noord'              , 'Connexxion/Transdev',
						'Haarlem/IJmond'                   , 'Connexxion/Transdev',
						'Zaanstreek-Waterland'             , 'EBS',
						'Concessie Amsterdam'              , 'GVB',
						'Amstelland-Meerlanden'            , 'Connexxion/Transdev',
						'Zuid-Holland Noord'               , 'Arriva',
						'Bus Haaglanden Stad'              , 'HTM',
						'Concessie Rail Haaglanden'        , 'HTM',
						'Haaglanden Streek'                , 'EBS',
						'Concessie Rail Rotterdam'         , 'RET',
						'Bus Rotterdam eo'                 , 'RET',
						'Voorne-Putten en Rozenburg'       , 'EBS',
						'Hoeksche Waard/GoereeOverflakkee' , 'Connexxion/Transdev',
						'Drechtsteden-MolenlandenGorinchem', 'Qbuzz',
						'Zeeland'                          , 'Connexxion/Transdev',
						'West-Brabant'                     , 'Arriva',
						'Oost-Brabant'                     , 'Arriva',
						'Zuidoost-Brabant'                 , 'Hermes',
						'Limburg'                          , 'Arriva'
					];
				}
				
				attribute<rdc>          geometry (poly) := bp_union_polygon(Concessiegebied_Geom/geometry[rdc_cm], Concessiegebied_Geom/Concessiegebied_rel)[rdc];
				attribute<string>       Label           := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
				attribute<string>       Vervoerder      := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
				attribute<string>       name            := AsItemName(label);
				container V := for_each_nedv(name, 'value('+string(id(.))+', ..)', void, .);
				parameter<uint32> nrAttr := 2;
			}
		}
	}
	
	
	Template Per_Prov_T
	{
		parameter<uint32> prov_id;
		unit<uint32> domain;
		//
		unit<uint32> sub := ='select_with_org_rel(domain/prov_rel == '+string(prov_id)+')'
		{
			attribute<rdc>    geometry    := domain/geometry[org_rel];
			attribute<string> name        := domain/name[org_rel];
			attribute<string> label       := domain/label[org_rel];
			attribute<uint32> nr_banen    := domain/nr_banen[org_rel];
			attribute<uint32> nr_inwoners := domain/nr_inwoners[org_rel];
		}
	}
	Template Per_COROP_T
	{
		parameter<uint32> COROP_id;
		unit<uint32> domain;
		//
		unit<uint32> sub := ='select_with_org_rel(domain/corop_rel == '+string(COROP_id)+')'
		{
			attribute<rdc>    geometry    := domain/geometry[org_rel];
			attribute<string> name        := domain/name[org_rel];
			attribute<string> label       := domain/label[org_rel];
			attribute<uint32> nr_banen    := domain/nr_banen[org_rel];
			attribute<uint32> nr_inwoners := domain/nr_inwoners[org_rel];
		}
	}
}
