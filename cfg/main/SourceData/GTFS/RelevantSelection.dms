container RelevantSelection : using = "LoadFeeds"
, Descr = "Subset of GTFS-schedule relevant for the analysis."
{
	unit<uint32> Modes                    := GTFS_Modes/Selectie;
		
	unit<uint32> StopTimes := protoStopTimes
	, Descr = "Times that a vehicle arrives at and departs from stops for each trip."
	{
		attribute<uint32>                  shape_id         := Trips/shape_id[Trip_rel];
		attribute<Trips>                   Trip_rel         := rlookup(ReadFSS/Stop_times/data/trip_id, Trips/trip_id);
		attribute<GTFS_Modes/Selectie>     Mode_rel         := Trips/Mode_rel[Trip_rel];
		attribute<GTFS_Modes/Selectie>     Mode_perstop     := modus(Mode_rel, Stop_rel)[Stop_rel];
		attribute<string>                  stop_id          := ReadFSS/Stop_times/data/stop_id;
		attribute<Stops>                   Stop_rel         := rlookup(stop_id, Stops/stop_id);
		attribute<uint32>                  Stop_Sequence    := uint32(ReadFSS/Stop_times/data/stop_sequence);
	}
	
	unit<uint32> Stops := select_with_org_rel_with_attr_by_cond(LoadFeeds/protoStops, LoadFeeds/protoStops/StopUsed)
	, Descr = "Stops where vehicles pick up or drop off riders. Also defines stations and station entrances."
	{
		attribute<GTFS_Modes/Selectie>       Mode_rel                 := modus(StopTimes/Mode_rel, StopTimes/Stop_rel);
		attribute<uint32>                    orgStopId                := org_rel;
		attribute<uint32>                    feedId                   := const(0, ., uint32);
		attribute<upoint>                    uni_StopId               := point_xy(feedId, orgStopId, upoint);
		attribute<string>                    Name                     := Label;
	}
	
	unit<uint32> Trips  := ReadFSS/Trips/read_domain/domain
	, Descr = "Trips for each route. A trip is a sequence of two or more stops that occur during a specific time period."
	{
		attribute<string>                  trip_nr         := string(id(.));
		attribute<string>                  trip_id         := ReadFSS/Trips/data/trip_id;
		attribute<string>                  route_id        := ReadFSS/Trips/data/route_id;
		attribute<uint32>                  shape_id        := uint32(ReadFSS/Trips/data/shape_id);
		attribute<string>                  service_id      := ReadFSS/Trips/data/service_id;
		attribute<Routes>                  Route_rel       := rlookup(route_id, Routes/route_id);
		attribute<string>                  RouteName       := Routes/route_name[Route_rel];
		attribute<string>                  RouteName_short := Routes/route_short_name[Route_rel];
		attribute<Agencies>                Agency_rel      := Routes/Agency_rel[Route_rel];
		attribute<Modes>                   Mode_rel        := rlookup(uint32(Routes/route_type)[Route_rel], Modes/ModeNr);
		attribute<Services>                Services_rel     := rlookup(service_id, Services/Values);
		attribute<bool>                    sel_today       := Services/Today_exc[Services_rel] = 1;
		attribute<bool>                    sel_yesterday   := Services/Yesterday_exc[Services_rel] = 1;
		attribute<string>                  label           := RouteName;
	}
	
	unit<uint32> ScheduledLinks := union_unit(protoStopTimes/Yesterday/Links, protoStopTimes/Today/Links)
	, Descr = ""
	{
		attribute<rdc>                     geometry (arc)  := union_data(., protoStopTimes/Yesterday/Links/geometry, protoStopTimes/Today/Links/geometry);
		attribute<Stops>                   FromStop_rel    := rlookup(union_data(., protoStopTimes/Yesterday/Links/From_protoStop_rel, protoStopTimes/Today/Links/From_protoStop_rel), Stops/org_rel);
		attribute<Stops>                   ToStop_rel      := rlookup(union_data(., protoStopTimes/Yesterday/Links/To_protoStop_rel, protoStopTimes/Today/Links/To_protoStop_rel), Stops/org_rel);
		attribute<Time>                    fromTime_rel        := union_data(., protoStopTimes/Yesterday/Links/depTime, protoStopTimes/Today/Links/depTime);
		attribute<Time>                    toTime_rel          := union_data(., protoStopTimes/Yesterday/Links/arrTime, protoStopTimes/Today/Links/arrTime);
		attribute<Trips>                   Trip_rel        := union_data(., protoStopTimes/Yesterday/Links/protoTrip_rel, protoStopTimes/Today/Links/protoTrip_rel);
		attribute<Modes>                   Mode_rel        := Trips/Mode_rel[Trip_rel];
		attribute<string>                  RouteName       := Trips/RouteName[Trip_rel];
		attribute<Routes>                  Route_rel       := Trips/Route_rel[Trip_rel];
		attribute<string>                  RouteName_short := Trips/RouteName_short[Trip_rel];
		attribute<Agencies>                Agency_rel      := Trips/Agency_rel[Trip_rel];
		attribute<rdc>                     fromPoint       := first_point(geometry);
		attribute<rdc>                     toPoint         := last_point(geometry);
		attribute<km>                      Length          := arc_length(geometry, m)[km];
		attribute<s_f>                     Duration   := fromTime_rel <= toTime_rel 
															? float32(sub_or_null(toTime_rel,fromTime_rel))[s_f]
															: float32(sub_or_null(toTime_rel + #Time, fromTime_rel))[s_f];
		attribute<string>                  Label  := 'Scheduled: ' + Time/Label[fromTime_rel] + ' @ ' + Stops/Name[FromStop_rel] + ' to ' + Time/Label[toTime_rel] + ' @ ' + Stops/Name[ToStop_rel];
		
		// attribute<bool>                    IsConnectedToNSkortStation     := Stops/IsNSkortStation[FromStop_rel] || Stops/IsNSkortStation[ToStop_rel];
		// attribute</SourceData/Infrastructuur/OVprijzen/NS/NS_stations>             NS_StartPoint_rel              := Stops/NS_Stations_rel[FromStop_rel];
		// attribute</SourceData/Infrastructuur/OVprijzen/NS/NS_stations>             NS_EndPoint_rel                := Stops/NS_Stations_rel[ToStop_rel];
		
		attribute<c_Time_Stops> c_FromTime_Stop_rel := combine_data(c_Time_Stops, fromTime_rel, FromStop_rel);
		attribute<c_Time_Stops> c_ToTime_Stop_rel   := combine_data(c_Time_Stops, toTime_rel, ToStop_rel);
		
		unit<uint32> findUniqueSpaceTimeEvents := union_unit(., .)
		, Descr = "in order to get a set of all time-place events"
		{
			attribute<c_Time_Stops> c_Time_Stops_rel   := union_data(., ../c_FromTime_Stop_rel, ../c_ToTime_Stop_rel);
			attribute<Time>         Time_rel           := value(c_Time_Stops_rel / uint64(#Stops), Time);
			attribute<Stops>        Stop_rel           := value(c_Time_Stops_rel % uint64(#Stops), Stops);
			attribute<rdc>          geometry           := union_data(., ../fromPoint, ../toPoint);
		}
		
		unit<uint32> SL_Places := unique(findUniqueSpaceTimeEvents/geometry)
		, Descr = "unique scheduled links locations"
		{
			attribute<Stops>   Stop_rel    := rlookup(geometry, Stops/geometry);
			attribute<string>  Stop_name   := Stops/Name[Stop_rel];
			attribute<string>  Label       := Stop_name;
			attribute<rdc>     geometry    := values;
		}

		unit<uint32> uq_TimeStop := unique(ScheduledLinks/findUniqueSpaceTimeEvents/c_Time_Stops_rel)
		, Descr = "aka SSTE aka ScheduledSpaceTimeEvents"
		{
			attribute<c_Time_Stops> c_Time_Stops_rel       := values;
			attribute<Time>         Time_rel               := value(c_Time_Stops_rel / uint64(#Stops), Time);
			attribute<Stops>        Stop_rel               := value(c_Time_Stops_rel % uint64(#Stops), Stops);
			attribute<string>       Label                  := Stops/Name[Stop_rel] + ' @ ' + Time/Label[Time_rel];
			attribute<uint32>       cumu_events_Stop       := cumulate(const(1,.,uint32), Stop_rel) - 1;
			attribute<upoint>       unique_id              := point_xy(cumu_events_Stop, Stop_rel, upoint);
			attribute<uint32>       aantal_tijden_per_stop := pcount(Stop_rel)[Stop_rel];
		}
	}

	
	unit<uint32> Routes := union_unit(ReadFSS/Routes/read_domain/domain, Classifications/TimeInvariantTypes)
	, Descr = "Transit routes. A route is a group of trips that are displayed to riders as a single service. Plus voor- en natransport."
	{
		attribute<string>   agency_id        := union_data(., ReadFSS/Routes/data/agency_id, Classifications/TimeInvariantTypes/NetworkType);
		attribute<string>   agency_name      := rjoin(agency_id, ReadFSS/agency/data/agency_id, ReadFSS/agency/data/agency_name);
		attribute<Agencies> agency_rel       := rlookup(AsItemName(lowercase(agency_name)), Agencies/name);
		attribute<string>   route_id         := union_data(., ReadFSS/Routes/data/route_id, Classifications/TimeInvariantTypes/name);
		attribute<string>   route_type       := union_data(., ReadFSS/Routes/data/route_type, const(null_str,Classifications/TimeInvariantTypes));
		attribute<string>   route_long_name  := union_data(., ReadFSS/Routes/data/route_long_name, Classifications/TimeInvariantTypes/name);
		attribute<string>   route_short_name := union_data(., ReadFSS/Routes/data/route_short_name, Classifications/TimeInvariantTypes/name_short);
		attribute<string>   route_name       := route_short_name+ ' ' +route_long_name;
		attribute<string>   label            := route_name;
	}
}
