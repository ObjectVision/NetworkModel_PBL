container RelevantSelection : using = "LoadFeeds"
, Descr = "Subset of GTFS-schedule relevant for the analysis."
{
	unit<uint8>  PrijsTabel               := OVprijzen/PrijsTabel;
	unit<uint32> Modes                    := GTFS_Modes/Selectie;
	unit<uint8>  Concessiegebied          := /SourceData/Infrastructuur/OVprijzen/Concessiegebieden;
	
	unit<uint32> StopTimes := protoStopTimes
	, Descr = "Times that a vehicle arrives at and departs from stops for each trip."
	{
		attribute<uint32>                  shape_id         := Trips/shape_id[Trip_rel];
		attribute<Trips>                   Trip_rel         := rlookup(ReadFSS/Stop_times/data/trip_id, Trips/trip_id);
		// attribute<bool>                    SelToday         := Trips/sel_today[Trip_rel];
		// attribute<bool>                    SelYesterday     := Trips/sel_yesterday[Trip_rel] && (Time/Day[departureTime/TimesVector/Time_rel] > 0);
		// attribute<protoStops>              protoStop_rel    := rlookup(ReadFSS/Stop_times/data/stop_id, protoStops/stop_id);
		// attribute<bool>                    StopinStudyArea  := protoStops/inStudyArea[protoStop_rel];
		// attribute<bool>                    TripInStudyArea  := Trips/inStudyArea[Trip_rel];
		
		attribute<GTFS_Modes/Selectie>     Mode_rel         := Trips/Mode_rel[Trip_rel];
		attribute<GTFS_Modes/Selectie>     Mode_perstop     := modus(Mode_rel, Stop_rel)[Stop_rel];
		
		attribute<string>                  stop_id          := ReadFSS/Stop_times/data/stop_id;
		attribute<Stops>                   Stop_rel         := rlookup(stop_id, Stops/stop_id);
		attribute<uint32>                  Stop_Sequence    := uint32(ReadFSS/Stop_times/data/stop_sequence);
		 
		// attribute<upoint>                  Trip_x_Ordinal   := point_xy(Stop_Sequence, Trip_rel, upoint);
		// attribute<Trips_x_order_uq>        txo_uq_rel       := rlookup(Trip_x_Ordinal, Trips_x_order_uq/Values);
		// attribute<uint32>                  ordered_ord      := txo_uq_rel - Trips/first_txo[Trip_rel];
		
		// attribute<upoint>                  ThisStopUni      := point_xy(Trip_rel, ordered_ord, upoint);
		// attribute<upoint>                  NextStopUni      := point_xy(Trip_rel, ordered_ord+1, upoint);
		// attribute<upoint>                  PrevStopUni      := point_xy(Trip_rel, ordered_ord-1, upoint);
		// attribute<StopTimes>               NextStopId       := rlookup(NextStopUni, ThisStopUni);
		// attribute<StopTimes>               PrevStopId       := rlookup(PrevStopUni, ThisStopUni);
		// attribute<rdc>                     FromPoint        := Stops/geometry[Stop_rel];
		// attribute<rdc>                     NextPoint        := Stops/geometry[Stop_rel[NextStopId]];
		// attribute<rdc>                     PrevPoint        := Stops/geometry[Stop_rel[PrevStopId]];
		// attribute<bool>                    EndPoint         := IsNull(NextStopId);
	}
	
	unit<uint32> Stops := select_with_org_rel_with_attr_by_cond(LoadFeeds/protoStops, LoadFeeds/protoStops/StopUsed)
	, Descr = "Stops where vehicles pick up or drop off riders. Also defines stations and station entrances."
	{
		// attribute<uint32>                    NrTripsPerDay            := pcount(StopTimes/seltoday ? StopTimes/Stop_rel : (0/0)[Stops]);
		attribute<GTFS_Modes/Selectie>       Mode_rel                 := modus(StopTimes/Mode_rel, StopTimes/Stop_rel);
		// attribute<rdc>                       geometry                 := LoadFeeds/Stops/geometry;
		attribute<uint32>                    orgStopId                := org_rel;
		attribute<uint32>                    feedId                   := const(0, ., uint32);
		attribute<upoint>                    uni_StopId               := point_xy(feedId, orgStopId, upoint);
		attribute<string>                    Name                     := Label;
		// attribute<string>                    Label                    := Name;
		// attribute<bool>                      IsMetroStation           := ModesServed/Metro > 0;
		// attribute<bool>                      IsTramStation            := ModesServed/Tram > 0;
		// attribute<bool>                      IsRailStation            := ModesServed/Rail > 0;
		// attribute<m>                         Dist2_ICtrainstation     := rjoin(geometry, uq_points/values, Define_Stopgroups_ICstations/dist);
		// attribute<m>                         Dist2_Trainstation       := rjoin(geometry, uq_points/values, Define_Stopgroups_Trainstations/dist);
		// attribute<string>                    Trainstations_code       := Dist2_Trainstation  < ModelParameters/Advanced/DistanceTrainStationsSelection ? rjoin(geometry, uq_points/values, Define_Stopgroups_Trainstations/station_code) : '';
		// attribute<string>                    IC_stations_code         := Dist2_ICtrainstation  < ModelParameters/Advanced/DistanceTrainStationsSelection ? rjoin(geometry, uq_points/values, Define_Stopgroups_ICstations/station_code) : '';
		// attribute<OVprijzen/NS/NS_Stations>  NS_Stations_rel  := rlookup(lowercase(Trainstations_code), OVprijzen/NS/NS_Stations/code);
		// attribute<Time>       FirstEvent            := min(ScheduledSpaceTimeEvents/Time_rel, ScheduledSpaceTimeEvents/Stop_rel);
		// attribute<Time>       LastEvent             := max(ScheduledSpaceTimeEvents/Time_rel, ScheduledSpaceTimeEvents/Stop_rel);
		// attribute<uint32>     TotalScheduledEvents  := pcount(ScheduledSpaceTimeEvents/Stop_rel);
		// attribute<Places>     Place_rel             := rlookup(geometry, Places/geometry);

		unit<uint32> uq_points := unique(geometry)
		{
			attribute<float32>  x           := PointCol(values);
			attribute<float32>  y           := PointRow(values);
		}
		
		Template Define_Stopgroups_T
		{
			unit<uint32>                Station_dom;
			///
			attribute<rdc>              geometry  (Station_dom)      := Station_dom/Geometry;
			attribute<float32>          x         (Station_dom)      := PointCol(geometry);
			attribute<float32>          y         (Station_dom)      := PointRow(geometry);
			
			attribute<Station_dom>      stations_rel (uq_points)       := connect(geometry, uq_points/values);
			attribute<string>           station_code (uq_points)       := Station_dom/code[stations_rel];

			attribute<float32>          x_targetdomain (uq_points)  := PointCol(geometry)[stations_rel];
			attribute<float32>          y_targetdomain (uq_points)  := PointRow(geometry)[stations_rel];
			attribute<float32>          delta_x (uq_points)         := sqr(abs(x_targetdomain - uq_points/x));
			attribute<float32>          delta_y (uq_points)         := sqr(abs(y_targetdomain - uq_points/y));

			attribute<m>                dist (uq_points)            := sqrt(delta_x + delta_y)[m];
		}
		
		container ModesServed := 
			for_each_nedv(
				AvailableModes/Name
				, 'sum(uint32(ScheduledLinks/Mode_rel = '+string(AvailableModes/Values)+'), ScheduledLinks/FromStop) + sum(uint32(ScheduledLinks/Mode_rel = '+string(AvailableModes/Values)+'), ScheduledLinks/ToStop)'
				, Stops
				, uint32
			)
		{
			attribute<uint32> Total (Stops) := ='add('+AsItemList(AvailableModes/Name)+')';
		}
		
		attribute<StopsGrid> StopsGrid_rel         := geometry[StopsGrid];
		attribute<uint32>    StopsGrid_id          := StopsGrid/id[StopsGrid_rel];
		attribute<uint32>    CumulateStop_in_grid  := cumulate(const(1,.,uint32), StopsGrid_rel) - 1;
		attribute<upoint>    Unique_id             := point_xy(CumulateStop_in_grid, StopsGrid_id, upoint);
		attribute<uint32>    nTransfers            := StopsGrid/nTransfers[StopsGrid_rel];
		  
		unit<spoint> StopsGrid := ='rdc_'+string(ModelParameters/Advanced/MaxTransferDistKm)+'m'
		, Descr = "prepare grid with nStops and nTransfers for later use in determining transfers."
		{
			attribute<uint32> nStops     := pcount(StopsGrid_rel);
			attribute<uint32> nTransfers := nTop + nRight + nBottom + nLeft + (sub_or_null(nStops,1));
			attribute<uint32> nTop       := potential(float32(nStops), float32(Templates/Neighbourhood/Top))[uint32];
			attribute<uint32> nRight     := potential(float32(nStops), float32(Templates/Neighbourhood/Right))[uint32];
			attribute<uint32> nBottom    := potential(float32(nStops), float32(Templates/Neighbourhood/Bottom))[uint32];
			attribute<uint32> nLeft      := potential(float32(nStops), float32(Templates/Neighbourhood/Left))[uint32];
			attribute<uint32> id         := cumulate(const(1,.,uint32))-1;
		}
	}
	
	unit<uint32> Trips  := ReadFSS/Trips/read_domain/domain
	, Descr = "Trips for each route. A trip is a sequence of two or more stops that occur during a specific time period."
	{
		// attribute<rdc>                     geometry (arc)  := shapes/uq/geometry[shapes_uq_rel];
		attribute<string>                  trip_nr         := string(id(.));
		attribute<string>                  trip_id         := ReadFSS/Trips/data/trip_id;
		attribute<string>                  route_id        := ReadFSS/Trips/data/route_id;
		attribute<uint32>                  shape_id        := uint32(ReadFSS/Trips/data/shape_id);
		// attribute<shapes>                  shapes_rel      := rlookup(shape_id, shapes/shape_id);
		// attribute<shapes/uq>               shapes_uq_rel   := rlookup(shape_id, shapes/uq/shape_id);
		attribute<string>                  service_id      := ReadFSS/Trips/data/service_id;
		attribute<Routes>                  Route_rel       := rlookup(route_id, Routes/route_id);
		attribute<string>                  RouteName       := Routes/route_name[Route_rel];
		attribute<string>                  RouteName_short := Routes/route_short_name[Route_rel];
		attribute<Agencies>                Agency_rel      := Routes/Agency_rel[Route_rel];
		attribute<GTFS_Modes/Selectie>     Mode_rel            := rlookup(uint32(Routes/route_type)[Route_rel], GTFS_Modes/Selectie/ModeNr);
		// attribute<Calendar>                Calendar_rel     := rlookup(service_id, Calendar/service_id);
		attribute<Services>                Services_rel     := rlookup(service_id, Services/Values);
		attribute<bool>                    sel_today       := Services/Today_exc[Services_rel] = 1;
		attribute<bool>                    sel_yesterday   := Services/Yesterday_exc[Services_rel] = 1;
		attribute<bool>                    inStudyArea     := any(StopTimes/StopinStudyArea, StopTimes/Trip_rel);
		attribute<Trips_x_order_uq>        first_txo       := min_index(Trips_x_order_uq/ord, Trips_x_order_uq/trip_rel);
	}
	
	unit<uint32> ScheduledLinks := union_unit(protoStopTimes/Yesterday/Links, protoStopTimes/Today/Links)
	, Descr = ""
	{
		attribute<rdc>                     geometry (arc)  := union_data(., protoStopTimes/Yesterday/Links/geometry, protoStopTimes/Today/Links/geometry);
		// attribute<Stops>                   FromStop_rel    := union_data(., protoStopTimes/Yesterday/Links/fromStop, protoStopTimes/Today/Links/fromStop);
		// attribute<Stops>                   ToStop_rel      := union_data(., protoStopTimes/Yesterday/Links/toStop, protoStopTimes/Today/Links/toStop);
		attribute<Stops>                   FromStop_rel    := rlookup(union_data(., protoStopTimes/Yesterday/Links/From_protoStop_rel, protoStopTimes/Today/Links/From_protoStop_rel), Stops/org_rel);
		attribute<Stops>                   ToStop_rel      := rlookup(union_data(., protoStopTimes/Yesterday/Links/To_protoStop_rel, protoStopTimes/Today/Links/To_protoStop_rel), Stops/org_rel);
		attribute<Time>                    depTime         := union_data(., protoStopTimes/Yesterday/Links/depTime, protoStopTimes/Today/Links/depTime);
		attribute<Time>                    arrTime         := union_data(., protoStopTimes/Yesterday/Links/arrTime, protoStopTimes/Today/Links/arrTime);
		attribute<Trips>                   Trip_rel        := union_data(., protoStopTimes/Yesterday/Links/protoTrip_rel, protoStopTimes/Today/Links/protoTrip_rel);
		attribute<GTFS_Modes/Selectie> Mode_rel            := Trips/Mode_rel[Trip_rel];
		attribute<string>                  RouteName       := Trips/RouteName[Trip_rel];
		attribute<Routes>                  Route_rel       := Trips/Route_rel[Trip_rel];
		attribute<string>                  RouteName_short := Trips/RouteName_short[Trip_rel];
		attribute<Agencies>                Agency_rel      := Trips/Agency_rel[Trip_rel];
		
		// attribute<uint32>                  feedId          := const(0, .);
		// attribute<Stops>                   FromStop2       := rlookup(uni_fStopId, Stops/uni_StopId);
		// attribute<Stops>                   ToStop2         := rlookup(uni_tStopId, Stops/uni_StopId);
		// attribute<upoint>                  uni_fStopId     := point_xy(feedId, FromStop_rel, upoint);
		// attribute<upoint>                  uni_tStopId     := point_xy(feedId, ToStop_rel, upoint);
		// attribute<AvailableModes>          avMode_id       := rlookup(Mode_rel, AvailableModes/Values);
		
		// attribute<ScheduledSpaceTimeEvents> from_sst   := rlookup(point_xy(depTime, FromStop_rel, upoint), ScheduledSpaceTimeEvents/Values);
		// attribute<ScheduledSpaceTimeEvents> to_sst     := rlookup(point_xy(arrTime, ToStop_rel, upoint), ScheduledSpaceTimeEvents/Values);
		attribute<s_f>                      Duration   := depTime <= arrTime 
															? float32(sub_or_null(arrTime,depTime))[s_f]
															: float32(sub_or_null(arrTime + #Time, depTime))[s_f];
		attribute<string>                   Label  := 'Scheduled: ' + Time/Label[depTime] + ' @ ' + Stops/Name[FromStop_rel] + ' to ' + Time/Label[arrTime] + ' @ ' + Stops/Name[ToStop_rel];
		
		unit<uint32> findUniqueSpaceTimeEvents := union_unit(., .)
		{
			attribute<upoint> timesOfStop   := union_data(., point_xy(../depTime, ../FromStop_rel), point_xy(../arrTime, ../ToStop_rel));
			attribute<Time>   Time_rel      := pointCol(timesOfStop);
		}
		
		// attribute<rdc>                     fromPoint       := first_point(geometry);
		// attribute<rdc>                     toPoint         := last_point(geometry);
		// attribute<Places>                  FromPlace_rel   := rlookup(fromPoint, Places/geometry);
		// attribute<Places>                  ToPlace_rel     := rlookup(toPoint, Places/geometry);
		// attribute<Stops>                   FromStop_rel    := Places/Stop_rel[FromPlace_rel];
		// attribute<Stops>                   ToStop_rel      := Places/Stop_rel[ToPlace_rel];
		
		attribute<Concessiegebied>         Start_Concessiegebied_rel      := point_in_polygon(Stops/geometry[FromStop_rel], Concessiegebied/geometry);
		attribute<string>                  Mode_Agency_CG_Lijn_identifier := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel] +'_'+ Concessiegebied/name[Start_Concessiegebied_rel] + '_' + RouteName_short;
		attribute<string>                  Mode_Agency_CG_identifier      := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel] +'_'+ Concessiegebied/name[Start_Concessiegebied_rel];
		attribute<string>                  Mode_Agency_identifier         := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel];
		
		attribute<bool>                    IsForeign  := Agencies/IsForeign[Agency_rel];
		attribute<bool>                    IsDomestic := NOT(IsForeign);
		
		attribute<PrijsTabel>    PrijsTabel_rel_initial        := rlookup(Mode_Agency_CG_Lijn_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented1     := rlookup(Mode_Agency_CG_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented2     := rlookup(Mode_Agency_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmentation   := MakeDefined(PrijsTabel_rel_augmented1, PrijsTabel_rel_augmented2);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev1 := rlookup(Mode_Agency_CG_identifier, PrijsTabel/Mode_Agency_CG_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev2 := rlookup(Mode_Agency_identifier, PrijsTabel/Mode_Agency_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev  := MakeDefined(PrijsTabel_rel_augmented_rev1, PrijsTabel_rel_augmented_rev2);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented      := MakeDefined(PrijsTabel_rel_augmentation, PrijsTabel_rel_augmented_rev);
		attribute<PrijsTabel>    PrijsTabel_rel                := MakeDefined(PrijsTabel_rel_initial, PrijsTabel_rel_augmented);
		
		attribute<bool>          HasPriceRelation              := IsForeign || IsDefined(PrijsTabel_rel) && IsDomestic;
		
		
		unit<uint32> HasNoPriceRelation := select_with_org_rel_with_attr_by_cond(.,NOT(HasPriceRelation))
		{
			// attribute<rdc>                       geometry (arc)         := ../geometry[org_rel];
			// attribute<Agencies>                  Agency_rel             := ../Agency_rel[org_rel];
			// attribute<Modes>   Mode_rel               := ../Mode_rel[org_rel];
		}
		
	}

	unit<uint32> ScheduledSpaceTimeEvents := unique(ScheduledLinks/findUniqueSpaceTimeEvents/TimesOfStop)
	, Descr = "aka SSTE"
	{
		attribute<Stops>    Stop_rel         := pointRow(Values)[Stops];
		attribute<Time>     Time_rel         := pointCol(Values)[Time];
		attribute<string>   Label           := Stops/Name[Stop_rel] + ' @ ' + Time/Label[Time_rel];
		// attribute<.>        FirstMoment     := min_index(Time_rel, Stop_rel)[Stop_rel];
		// attribute<.>        NextMoment      := Stop_rel[id(.)+1] = Stop_rel ? id(.) + 1 : FirstMoment;
		// attribute<bool>     points_unsorted := Values != sort(Values); // check to verify Values are orderd ascendingly (documented as such in online documentation)
		attribute<uint32>   cumu_events_Stop:= cumulate(const(1,.,uint32), Stop_rel) - 1;
		attribute<upoint>   unique_id       := point_xy(cumu_events_Stop, Stop_rel, upoint);
		
		attribute<uint32>   aantal_tijden_per_stop := pcount(Stop_rel)[Stop_rel];
	}
	
	
	unit<uint32> Routes := ReadFSS/Routes/read_domain/domain
	, Descr = "Transit routes. A route is a group of trips that are displayed to riders as a single service."
	{
		attribute<string>   agency_id        := ReadFSS/Routes/data/agency_id;
		attribute<string>   agency_name      := rjoin(agency_id, ReadFSS/agency/data/agency_id, ReadFSS/agency/data/agency_name);
		attribute<Agencies> agency_rel      := rlookup(AsItemName(agency_name), Agencies/name);
		attribute<string>   route_id         := ReadFSS/Routes/data/route_id;
		attribute<string>   route_type       := ReadFSS/Routes/data/route_type;
		// attribute<bool>	    nzl              := uint32(ReadFSS/Routes/data/route_short_name) = 52;
		attribute<string>   route_long_name  := ReadFSS/Routes/data/route_long_name;
		attribute<string>   route_short_name := ReadFSS/Routes/data/route_short_name;
		
		attribute<string>   route_name      := route_short_name+ ' ' +route_long_name;
		attribute<string>   label           := route_name;
	}
	
	unit<uint32> AvailableModes := unique(ScheduledLinks/Mode_rel)
	{
		attribute<string>  Name    := GTFS_Modes/Selectie/Name[Values];
		// attribute<uint32>  NrLinks := pcount(Links/avMode_id);
	}
	
		// unit<uint32> IC_stations   := SourceData/Infrastructuur/Infrastructuur/IC_Stations/uq;
		// unit<uint32> Trainstations := SourceData/Infrastructuur/Infrastructuur/Trainstations/uq;
		// container Define_Stopgroups_ICstations    := Define_Stopgroups_T(IC_stations);
		// container Define_Stopgroups_Trainstations := Define_Stopgroups_T(Trainstations);

	// unit<uint32> Shapes := ReadFSS/Shapes/read_domain/domain
	// , Descr = "Rules for mapping vehicle travel paths, sometimes referred to as route alignments."
	// {
		// attribute<uint32>  shape_id                      := uint32(ReadFSS/Shapes/data/shape_id);
		// attribute<uint32>  shape_pt_sequence             := uint32(ReadFSS/Shapes/data/shape_pt_sequence);
		// attribute<float32> shape_pt_lat                  := float32(ReadFSS/Shapes/data/shape_pt_lat);
		// attribute<float32> shape_pt_lon                  := float32(ReadFSS/Shapes/data/shape_pt_lon);
		// attribute<uint32>  shape_dist_traveled_cum       := uint32(ReadFSS/Shapes/data/shape_dist_traveled);
		
		// attribute<uint32>  shape_dist_traveled_cum_prev  := shape_dist_traveled_cum[sub_or_null(id(.),1)];
		// attribute<uint32>  shape_id_prev                 := shape_id[sub_or_null(id(.),1)];
		// attribute<uint32>  shape_dist_traveled_increm    := shape_id == shape_id_prev ? sub_or_null(shape_dist_traveled_cum, shape_dist_traveled_cum_prev) : 0;
		// attribute<km>      real_length                   := value(shape_dist_traveled_increm, m)[km];
		// attribute<dpoint>  point_wgs                     := point_xy(float64(shape_pt_lon), float64(shape_pt_lat), wgs84_base);
		// attribute<rdc>     geometry                      := LatLongWgs842RD(point_wgs[fpoint], rdc);
	// }
	

	// unit<uint32> Services := unique(Trips/service_id)
	// , Descr = ""
	// {
		// attribute<uint32>  Today_exc     := sum(Calendar_dates/Today * Calendar_dates/nType, Calendar_dates/Services_rel);
		// attribute<uint32>  Yesterday_exc := sum(Calendar_dates/Yesterday * Calendar_dates/nType, Calendar_dates/Services_rel);
	// }
	
	
	// unit<uint32> Stops_ICstation := select_with_attr_by_org_rel(Stops,Stops/Dist2_ICtrainstation < ModelParameters/Advanced/DistanceTrainStationsSelection)
	// {
		// attribute<uint32>   Stops_rel   := org_rel;
	// }
	
	// unit<uint32> Stops_Trainstation := select_with_attr_by_org_rel(Stops,Stops/Dist2_Trainstation  < ModelParameters/Advanced/DistanceTrainStationsSelection)
	// {
		// attribute<uint32>   Stops_rel   := org_rel;
	// }
	
	// unit<uint32> Stops_Metrostation := select_with_attr_by_org_rel(Stops,Stops/IsMetroStation)
	// {
		// attribute<uint32>   Stops_rel   := org_rel;
	// }
	
	// unit<uint32> Stops_Tramstation := select_with_attr_by_org_rel(Stops,Stops/IsTramStation)
	// {
		// attribute<uint32>   Stops_rel   := org_rel;
	// }
	
	// unit<uint32> Stops_TrainMetrostation := union_unit(Stops_Trainstation, Stops_Metrostation)
	// {
		// attribute<rdc>      geometry    := union_data(., Stops_Trainstation/geometry, Stops_Metrostation/geometry);
		// attribute<uint32>   orgStopId   := union_data(., Stops_Trainstation/orgStopId, Stops_Metrostation/orgStopId);
		// attribute<uint32>   feedId      := union_data(., Stops_Trainstation/feedId, Stops_Metrostation/feedId);
		// attribute<upoint>   uni_StopId  := union_data(., Stops_Trainstation/uni_StopId, Stops_Metrostation/uni_StopId);
		// attribute<string>   Name        := union_data(., Stops_Trainstation/Name, Stops_Metrostation/Name);
		// attribute<string>   Label       := union_data(., Stops_Trainstation/Label, Stops_Metrostation/Label);
		
		// attribute<uint32>   Stops_rel   := union_data(., Stops_Trainstation/Stops_rel, Stops_Metrostation/Stops_rel);
	// }
	
	// unit<uint32> Stops_TrainMetroTramstation := union_unit(Stops_Trainstation, Stops_Metrostation, Stops_Tramstation)
	// {
		// attribute<rdc>      geometry    := union_data(., Stops_Trainstation/geometry, Stops_Metrostation/geometry, Stops_Tramstation/geometry);
		// attribute<uint32>   orgStopId   := union_data(., Stops_Trainstation/orgStopId, Stops_Metrostation/orgStopId, Stops_Tramstation/orgStopId);
		// attribute<uint32>   feedId      := union_data(., Stops_Trainstation/feedId, Stops_Metrostation/feedId, Stops_Tramstation/feedId);
		// attribute<upoint>   uni_StopId  := union_data(., Stops_Trainstation/uni_StopId, Stops_Metrostation/uni_StopId, Stops_Tramstation/uni_StopId);
		// attribute<string>   Name        := union_data(., Stops_Trainstation/Name, Stops_Metrostation/Name, Stops_Tramstation/Name);
		// attribute<string>   Label       := union_data(., Stops_Trainstation/Label, Stops_Metrostation/Label, Stops_Tramstation/Label);
		// attribute<uint32>   Stops_rel   := union_data(., Stops_Trainstation/Stops_rel, Stops_Metrostation/Stops_rel, Stops_Tramstation/Stops_rel);
	// }
	
	
	// unit<uint32> Calendar:= ReadFSS/Calendar/read_domain/domain
	// {
		// attribute<string> monday                  := ReadFSS/Calendar/data/monday;
		// attribute<string> tuesday                 := ReadFSS/Calendar/data/tuesday;
		// attribute<string> wednesday               := ReadFSS/Calendar/data/wednesday;
		// attribute<string> thursday                := ReadFSS/Calendar/data/thursday;
		// attribute<string> friday                  := ReadFSS/Calendar/data/friday;
		// attribute<string> saturday                := ReadFSS/Calendar/data/saturday;
		// attribute<string> sunday                  := ReadFSS/Calendar/data/sunday;
		// attribute<string> service_id              := ReadFSS/Calendar/data/service_id;
		// attribute<uint32> nStartDate              := uint32(ReadFSS/Calendar/data/start_date);
		// attribute<uint32> nEndDate                := uint32(ReadFSS/Calendar/data/end_date);
		// attribute<bool>   Today_in_daterange      := uint32(ModelParameters/Analysis_date) >= nStartDate && uint32(ModelParameters/Analysis_date) <= nEndDate;
		// attribute<bool>   Yesterday_in_daterange  := uint32(ModelParameters/Advanced/PrevDate) >= nStartDate && uint32(ModelParameters/Advanced/PrevDate) <= nEndDate;
	// }
	
	// unit<uint32> Calendar_dates := ReadFSS/Calendar_dates/read_domain/domain  
	// , Descr = "Exceptions for the services defined in the calendar.txt."
	// {
		// attribute<uint32>   nDate       := uint32(ReadFSS/Calendar_dates/data/date), Descr = "Date when service exception occurs";
		// attribute<uint32>   nType       := uint32(ReadFSS/Calendar_dates/data/exception_type), Descr = "exception_type = 1 -> Service has been added for the specified date; exception_type = 2 -> Service has been removed for the specified date.";
		// attribute<Services> Services_rel := rlookup(ReadFSS/Calendar_dates/data/service_id, Services/Values), Descr = "Identifies a set of dates when a service exception occurs for one or more routes.";
		// attribute<uint32>   Today       := uint32(uint32(ModelParameters/Analysis_date) = nDate);  
		// attribute<uint32>   Yesterday   := uint32(uint32(ModelParameters/Advanced/PrevDate) = nDate);
	// }
	
	
}
