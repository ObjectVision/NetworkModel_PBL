container RelevantSelection : using = "LoadFeeds"
, Descr = "Subset of GTFS-schedule relevant for the analysis."
{
	unit<uint8>  PrijsTabel               := OVprijzen/PrijsTabel;
	unit<uint32> Modes                    := GTFS_Modes/Selectie;
	unit<uint8>  Concessiegebied          := /SourceData/Infrastructuur/OVprijzen/Concessiegebieden;
		
	unit<uint32> StopTimes := protoStopTimes
	, Descr = "Times that a vehicle arrives at and departs from stops for each trip."
	{
		attribute<uint32>                  shape_id         := Trips/shape_id[Trip_rel];
		attribute<Trips>                   Trip_rel         := rlookup(ReadFSS/Stop_times/data/trip_id, Trips/trip_id);
		attribute<GTFS_Modes/Selectie>     Mode_rel         := Trips/Mode_rel[Trip_rel];
		attribute<GTFS_Modes/Selectie>     Mode_perstop     := modus(Mode_rel, Stop_rel)[Stop_rel];
		attribute<string>                  stop_id          := ReadFSS/Stop_times/data/stop_id;
		attribute<Stops>                   Stop_rel         := rlookup(stop_id, Stops/stop_id);
		attribute<uint32>                  Stop_Sequence    := uint32(ReadFSS/Stop_times/data/stop_sequence);
	}
	
	unit<uint32> Stops := select_with_org_rel_with_attr_by_cond(LoadFeeds/protoStops, LoadFeeds/protoStops/StopUsed)
	, Descr = "Stops where vehicles pick up or drop off riders. Also defines stations and station entrances."
	{
		attribute<GTFS_Modes/Selectie>       Mode_rel                 := modus(StopTimes/Mode_rel, StopTimes/Stop_rel);
		attribute<uint32>                    orgStopId                := org_rel;
		attribute<uint32>                    feedId                   := const(0, ., uint32);
		attribute<upoint>                    uni_StopId               := point_xy(feedId, orgStopId, upoint);
		attribute<string>                    Name                     := Label;

		unit<uint32> uq_points := unique(geometry)
		{
			attribute<float32>  x           := PointCol(values);
			attribute<float32>  y           := PointRow(values);
		}
		
		Template Define_Stopgroups_T
		{
			unit<uint32>                Station_dom;
			///
			attribute<rdc>              geometry  (Station_dom)      := Station_dom/Geometry;
			attribute<float32>          x         (Station_dom)      := PointCol(geometry);
			attribute<float32>          y         (Station_dom)      := PointRow(geometry);
			
			attribute<Station_dom>      stations_rel (uq_points)       := connect(geometry, uq_points/values);
			attribute<string>           station_code (uq_points)       := Station_dom/code[stations_rel];

			attribute<float32>          x_targetdomain (uq_points)  := PointCol(geometry)[stations_rel];
			attribute<float32>          y_targetdomain (uq_points)  := PointRow(geometry)[stations_rel];
			attribute<float32>          delta_x (uq_points)         := sqr(abs(x_targetdomain - uq_points/x));
			attribute<float32>          delta_y (uq_points)         := sqr(abs(y_targetdomain - uq_points/y));

			attribute<m>                dist (uq_points)            := sqrt(delta_x + delta_y)[m];
		}
		
		// container ModesServed := 
			// for_each_nedv(
				// AvailableModes/Name
				// , 'sum(uint32(ScheduledLinks/Mode_rel = '+string(AvailableModes/Values)+'), ScheduledLinks/FromStop) + sum(uint32(ScheduledLinks/Mode_rel = '+string(AvailableModes/Values)+'), ScheduledLinks/ToStop)'
				// , Stops
				// , uint32
			// )
		// {
			// attribute<uint32> Total (Stops) := ='add('+AsItemList(AvailableModes/Name)+')';
		// }
		
		attribute<StopsGrid> StopsGrid_rel         := geometry[StopsGrid];
		attribute<uint32>    StopsGrid_id          := StopsGrid/id[StopsGrid_rel];
		attribute<uint32>    CumulateStop_in_grid  := cumulate(const(1,.,uint32), StopsGrid_rel) - 1;
		attribute<upoint>    Unique_id             := point_xy(CumulateStop_in_grid, StopsGrid_id, upoint);
		attribute<uint32>    nTransfers            := StopsGrid/nTransfers[StopsGrid_rel];
		  
		unit<spoint> StopsGrid := ='rdc_'+string(ModelParameters/Advanced/MaxTransferDistKm)+'m'
		, Descr = "prepare grid with nStops and nTransfers for later use in determining transfers."
		{
			attribute<uint32> nStops     := pcount(StopsGrid_rel);
			attribute<uint32> nTransfers := nTop + nRight + nBottom + nLeft + (sub_or_null(nStops,1));
			attribute<uint32> nTop       := potential(float32(nStops), float32(Templates/Neighbourhood/Top))[uint32];
			attribute<uint32> nRight     := potential(float32(nStops), float32(Templates/Neighbourhood/Right))[uint32];
			attribute<uint32> nBottom    := potential(float32(nStops), float32(Templates/Neighbourhood/Bottom))[uint32];
			attribute<uint32> nLeft      := potential(float32(nStops), float32(Templates/Neighbourhood/Left))[uint32];
			attribute<uint32> id         := cumulate(const(1,.,uint32))-1;
		}
	}
	
	unit<uint32> Trips  := ReadFSS/Trips/read_domain/domain
	, Descr = "Trips for each route. A trip is a sequence of two or more stops that occur during a specific time period."
	{
		attribute<string>                  trip_nr         := string(id(.));
		attribute<string>                  trip_id         := ReadFSS/Trips/data/trip_id;
		attribute<string>                  route_id        := ReadFSS/Trips/data/route_id;
		attribute<uint32>                  shape_id        := uint32(ReadFSS/Trips/data/shape_id);
		attribute<string>                  service_id      := ReadFSS/Trips/data/service_id;
		attribute<Routes>                  Route_rel       := rlookup(route_id, Routes/route_id);
		attribute<string>                  RouteName       := Routes/route_name[Route_rel];
		attribute<string>                  RouteName_short := Routes/route_short_name[Route_rel];
		attribute<Agencies>                Agency_rel      := Routes/Agency_rel[Route_rel];
		attribute<Modes>                   Mode_rel        := rlookup(uint32(Routes/route_type)[Route_rel], Modes/ModeNr);
		attribute<Services>                Services_rel     := rlookup(service_id, Services/Values);
		attribute<bool>                    sel_today       := Services/Today_exc[Services_rel] = 1;
		attribute<bool>                    sel_yesterday   := Services/Yesterday_exc[Services_rel] = 1;
		// attribute<bool>                    inStudyArea     := any(StopTimes/StopinStudyArea, StopTimes/Trip_rel);
		// attribute<Trips_x_order_uq>        first_txo       := min_index(Trips_x_order_uq/ord, Trips_x_order_uq/trip_rel);
	}
	
	unit<uint32> ScheduledLinks := union_unit(protoStopTimes/Yesterday/Links, protoStopTimes/Today/Links)
	, Descr = ""
	{
		attribute<rdc>                     geometry (arc)  := union_data(., protoStopTimes/Yesterday/Links/geometry, protoStopTimes/Today/Links/geometry);
		attribute<Stops>                   FromStop_rel    := rlookup(union_data(., protoStopTimes/Yesterday/Links/From_protoStop_rel, protoStopTimes/Today/Links/From_protoStop_rel), Stops/org_rel);
		attribute<Stops>                   ToStop_rel      := rlookup(union_data(., protoStopTimes/Yesterday/Links/To_protoStop_rel, protoStopTimes/Today/Links/To_protoStop_rel), Stops/org_rel);
		attribute<Time>                    depTime         := union_data(., protoStopTimes/Yesterday/Links/depTime, protoStopTimes/Today/Links/depTime);
		attribute<Time>                    arrTime         := union_data(., protoStopTimes/Yesterday/Links/arrTime, protoStopTimes/Today/Links/arrTime);
		attribute<Trips>                   Trip_rel        := union_data(., protoStopTimes/Yesterday/Links/protoTrip_rel, protoStopTimes/Today/Links/protoTrip_rel);
		attribute<Modes>                   Mode_rel        := Trips/Mode_rel[Trip_rel];
		attribute<string>                  RouteName       := Trips/RouteName[Trip_rel];
		attribute<Routes>                  Route_rel       := Trips/Route_rel[Trip_rel];
		attribute<string>                  RouteName_short := Trips/RouteName_short[Trip_rel];
		attribute<Agencies>                Agency_rel      := Trips/Agency_rel[Trip_rel];
		attribute<s_f>                      Duration   := depTime <= arrTime 
															? float32(sub_or_null(arrTime,depTime))[s_f]
															: float32(sub_or_null(arrTime + #Time, depTime))[s_f];
		attribute<string>                   Label  := 'Scheduled: ' + Time/Label[depTime] + ' @ ' + Stops/Name[FromStop_rel] + ' to ' + Time/Label[arrTime] + ' @ ' + Stops/Name[ToStop_rel];
		
		attribute<c_Time_Stops> c_depTime_Stop := combine_data(c_Time_Stops, depTime, FromStop_rel);
		attribute<c_Time_Stops> c_arrTime_Stop := combine_data(c_Time_Stops, depTime, ToStop_rel);
		
		unit<uint32> findUniqueSpaceTimeEvents := union_unit(., .)
		{
			attribute<c_Time_Stops> c_Time_Stops_rel   := union_data(., ../c_depTime_Stop, ../c_arrTime_Stop);
			attribute<Time>         Time_rel           := value(c_Time_Stops_rel / uint64(#Stops), Time);
		}
		
		attribute<Concessiegebied>         Start_Concessiegebied_rel      := point_in_polygon(Stops/geometry[FromStop_rel], Concessiegebied/geometry);
		attribute<string>                  Mode_Agency_CG_Lijn_identifier := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel] +'_'+ Concessiegebied/name[Start_Concessiegebied_rel] + '_' + RouteName_short;
		attribute<string>                  Mode_Agency_CG_identifier      := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel] +'_'+ Concessiegebied/name[Start_Concessiegebied_rel];
		attribute<string>                  Mode_Agency_identifier         := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel];
		
		attribute<bool>                    IsForeign  := Agencies/IsForeign[Agency_rel];
		attribute<bool>                    IsDomestic := NOT(IsForeign);
		
		attribute<PrijsTabel>    PrijsTabel_rel_initial        := rlookup(Mode_Agency_CG_Lijn_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented1     := rlookup(Mode_Agency_CG_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented2     := rlookup(Mode_Agency_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmentation   := MakeDefined(PrijsTabel_rel_augmented1, PrijsTabel_rel_augmented2);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev1 := rlookup(Mode_Agency_CG_identifier, PrijsTabel/Mode_Agency_CG_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev2 := rlookup(Mode_Agency_identifier, PrijsTabel/Mode_Agency_identifier);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev  := MakeDefined(PrijsTabel_rel_augmented_rev1, PrijsTabel_rel_augmented_rev2);
		attribute<PrijsTabel>    PrijsTabel_rel_augmented      := MakeDefined(PrijsTabel_rel_augmentation, PrijsTabel_rel_augmented_rev);
		attribute<PrijsTabel>    PrijsTabel_rel                := MakeDefined(PrijsTabel_rel_initial, PrijsTabel_rel_augmented);
		attribute<bool>          HasPriceRelation              := IsForeign || IsDefined(PrijsTabel_rel) && IsDomestic;
		
		unit<uint32> HasNoPriceRelation := select_with_org_rel_with_attr_by_cond(.,NOT(HasPriceRelation));
	}

	unit<uint32> ScheduledSpaceTimeEvents := unique(ScheduledLinks/findUniqueSpaceTimeEvents/c_Time_Stops_rel)
	, Descr = "aka SSTE"
	{
		attribute<c_Time_Stops> c_Time_Stops_rel       := values;
		attribute<Time>         Time_rel               := value(c_Time_Stops_rel / uint64(#Stops), Time);
		attribute<Stops>        Stop_rel               := value(c_Time_Stops_rel % uint64(#Stops), Stops);
		attribute<string>       Label                  := Stops/Name[Stop_rel] + ' @ ' + Time/Label[Time_rel];
		attribute<uint32>       cumu_events_Stop       := cumulate(const(1,.,uint32), Stop_rel) - 1;
		attribute<upoint>       unique_id              := point_xy(cumu_events_Stop, Stop_rel, upoint);
		attribute<uint32>       aantal_tijden_per_stop := pcount(Stop_rel)[Stop_rel];
	}
	
	unit<uint32> Routes := union_unit(ReadFSS/Routes/read_domain/domain, Classifications/TimeInvariantTypes)
	, Descr = "Transit routes. A route is a group of trips that are displayed to riders as a single service. Plus voor- en natransport."
	{
		attribute<string>   agency_id        := union_data(., ReadFSS/Routes/data/agency_id, Classifications/TimeInvariantTypes/NetworkType);
		attribute<string>   agency_name      := rjoin(agency_id, ReadFSS/agency/data/agency_id, ReadFSS/agency/data/agency_name);
		attribute<Agencies> agency_rel       := rlookup(AsItemName(lowercase(agency_name)), Agencies/name);
		attribute<string>   route_id         := union_data(., ReadFSS/Routes/data/route_id, Classifications/TimeInvariantTypes/name);
		attribute<string>   route_type       := union_data(., ReadFSS/Routes/data/route_type, const(null_str,Classifications/TimeInvariantTypes));
		attribute<string>   route_long_name  := union_data(., ReadFSS/Routes/data/route_long_name, Classifications/TimeInvariantTypes/name);
		attribute<string>   route_short_name := union_data(., ReadFSS/Routes/data/route_short_name, Classifications/TimeInvariantTypes/name_short);
		attribute<string>   route_name       := route_short_name+ ' ' +route_long_name;
		attribute<string>   label            := route_name;
	}
	
	// unit<uint32> AvailableModes := unique(ScheduledLinks/Mode_rel)
	// {
		// attribute<string>  Name    := GTFS_Modes/Selectie/Name[Values];
	// }
}
