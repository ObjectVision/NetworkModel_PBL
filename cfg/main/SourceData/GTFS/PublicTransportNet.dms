// container PublicTransportNet : using = "geometries;sourcedata/regioindelingen;RelevantSelection"
// {
// unit<uint32> ScheduledTimeEvents      := unique(ScheduledLinks/findUniqueSpaceTimeEvents/Time_rel);
// unit<uint32> Places     := allLinks/Places;
// unit<uint32> AllTimes   := allLinks/UniqueTimeEvents;
// unit<uint32> Stops      := RelevantSelection/Stops;
// unit<uint32> Routes      := RelevantSelection/Routes;
// unit<uint8> Concessiegebied      := /SourceData/Infrastructuur/OVprijzen/Concessiegebieden;

unit<uint32> AddTransfersToScheduledLinks := union_unit(RelevantSelection/ScheduledLinks, CreateTransfersSet/TransfersByStart)
, Descr = "scheduled links + transfer links"
, Using = "RelevantSelection" 
{
	attribute<rdc>                     geometry (arc)  := union_data(., RelevantSelection/ScheduledLinks/geometry, CreateTransfersSet/TransfersByStart/geometry); 
	attribute<Time>                    fromTime        := union_data(., RelevantSelection/ScheduledLinks/depTime, CreateTransfersSet/TransfersByStart/fromTime); 
	attribute<Time>                    toTime          := union_data(., RelevantSelection/ScheduledLinks/arrTime, CreateTransfersSet/TransfersByStart/toTime); 
	attribute<s_f>                     Duration        := union_data(., RelevantSelection/ScheduledLinks/Duration, CreateTransfersSet/TransfersByStart/Duration); 
	attribute<string>                  Label           := union_data(., RelevantSelection/ScheduledLinks/Label, CreateTransfersSet/TransfersByStart/Label), DialogType = "LabelText";
	attribute<Trips>                   Trip_rel        := union_data(., RelevantSelection/ScheduledLinks/Trip_rel, const(0/0,CreateTransfersSet/TransfersByStart));
	attribute<Routes>                  Route_rel       := union_data(., RelevantSelection/ScheduledLinks/Route_rel, const((0/0)[Routes],CreateTransfersSet/TransfersByStart));
	attribute<string>                  RouteName       := union_data(., RelevantSelection/ScheduledLinks/RouteName, const('Walking',CreateTransfersSet/TransfersByStart));
	attribute<string>                  RouteName_short := union_data(., RelevantSelection/ScheduledLinks/RouteName_short, const('Walking',CreateTransfersSet/TransfersByStart));
	attribute<Agencies>                Agency_rel      := union_data(., RelevantSelection/ScheduledLinks/Agency_rel, const(0/0,CreateTransfersSet/TransfersByStart));
	attribute<Modes>                   Mode_rel        := union_data(., RelevantSelection/ScheduledLinks/Mode_rel, const(Modes/V/Walking, CreateTransfersSet/TransfersByStart, Modes));
	attribute<LinkTypes>               LinkType_rel    := union_data(., const(LinkTypes/V/Scheduled,RelevantSelection/ScheduledLinks,LinkTypes), const(LinkTypes/V/Transfer,CreateTransfersSet/TransfersByStart,LinkTypes));
	attribute<Stops>                   FromStop_rel    := union_data(., RelevantSelection/ScheduledLinks/FromStop_rel, CreateTransfersSet/TransfersByStart/FromStop_rel); 
	attribute<Stops>                   ToStop_rel      := union_data(., RelevantSelection/ScheduledLinks/ToStop_rel, CreateTransfersSet/TransfersByStart/ToStop_rel); 
	attribute<rdc>                     fromPoint       := first_point(geometry);
	attribute<rdc>                     toPoint         := last_point(geometry);
	attribute<Places>                  FromPlace_rel   := rlookup(fromPoint, Places/Values);
	attribute<string>                  FromPlace_name  := Places/Stop_name[FromPlace_rel];
	attribute<Places>                  ToPlace_rel     := rlookup(toPoint, Places/Values);
	attribute<string>                  ToPlace_name    := Places/Stop_name[ToPlace_rel];
	
	unit<uint32> doubledLinks := union_unit(., .)
	, Descr = "in order to get a set of all time-place events"
	{
		attribute<Time>     Moment         := union_data(., fromTime, toTime);
		attribute<rdc>      geometry       := union_data(., fromPoint, toPoint);
		attribute<Stops>    Stop_rel       := rlookup(geometry, Stops/geometry);
		attribute<Places>   Place_rel      := rlookup(geometry, Places/geometry);
		attribute<upoint>   MomentxPlace   := point_xy(Moment, Place_rel, upoint);
		attribute<upoint>   MomentxStop    := point_xy(Moment, Stop_rel, upoint);
	}
	
	unit<uint32> Places := unique(doubledLinks/geometry)
	, Descr = "unique stop locations"
	{
		attribute<Stops>   Stop_rel    := rlookup(geometry, Stops/geometry);
		attribute<string>  Stop_name   := Stops/Name[Stop_rel];
		attribute<string>  Label       := Stop_name;
		attribute<rdc>     geometry    := values;
	}
	
	unit<uint32> UniqueTimeEvents   := unique(doubledLinks/Moment);
	unit<uint32> UniqueMomentXStop  := unique(doubledLinks/MomentxStop)
	{
		attribute<upoint>   MomentxStop        := values;
		attribute<Stops>    Stop_rel           := pointRow(MomentxStop)[Stops];
		attribute<Time>     Time_rel           := pointCol(MomentxStop)[Time];
		attribute<string>   Label              := Stops/Name[Stop_rel] + ' @ ' + Time/Label[Time_rel];
		attribute<.>        FirstMoment        := min_index(Time_rel, Stop_rel)[Stop_rel];
		attribute<.>        NextMoment         := Stop_rel[add_or_null(id(.),1)] = Stop_rel ? add_or_null(id(.),1) : FirstMoment;
		attribute<bool>     points_unsorted    := Values != sort(Values); // check to verify Values are orderd ascendingly (documented as such in online documentation)
		
		unit<uint32>  MakeWaitingLines := union_unit(UniqueMomentXStop, UniqueMomentXStop)
		{
			attribute<rdc>                      geometry     := union_data(., Stops/geometry[Stop_rel], Stops/geometry[Stop_rel]);
			attribute<UniqueMomentXStop>        sequence_rel := union_data(., id(UniqueMomentXStop), id(UniqueMomentXStop));
			attribute<uint32>                   ordinal      := union_data(., const(0,UniqueMomentXStop,uint32), const(1,UniqueMomentXStop,uint32));
		}
	}
	unit<uint32> WaitingAtStop := UniqueMomentXStop 
	{
		attribute<rdc>          geometry (arc) := points2sequence(UniqueMomentXStop/MakeWaitingLines/geometry, UniqueMomentXStop/MakeWaitingLines/sequence_rel, UniqueMomentXStop/MakeWaitingLines/ordinal);
		attribute<Stops>        FromStop_rel   := Stop_rel;
		attribute<Stops>        ToStop_rel     := Stop_rel[NextMoment];
		// attribute<Places>       FromPlace_rel  := Stops/Place_rel[FromStop_rel];
		// attribute<string>       FromPlace_name := Stops/name[FromStop_rel];
		// attribute<string>       ToPlace_name   := Stops/name[ToStop_rel];
		// attribute<Places>       ToPlace_rel    := Stops/Place_rel[ToStop_rel];
		attribute<rdc>          FromPoint      := Stops/geometry[FromStop_rel];
		attribute<rdc>          ToPoint        := Stops/geometry[ToStop_rel];
		attribute<Time>         FromTime       := Time_rel;
		attribute<Time>         ToTime         := Time_rel[NextMoment];
		attribute<s_f>          Duration       := FromTime <= ToTime 
													? float32(sub_or_null(ToTime,FromTime))[s_f] 
													: float32(sub_or_null(ToTime + #Time,FromTime))[s_f]; // duration in seconds
		attribute<string>       Label          := 'Waiting at stop: ' + Stops/Name[FromStop_rel] + ' from ' + Time/Label[FromTime] + ' to ' + Time/Label[ToTime];
	}
	unit<uint32> NodeSet:= unique(doubledLinks/MomentXPlace)
	{
		attribute<Places>    Place_rel  := pointRow(Values);
		attribute<Time>      Time_rel   := pointCol(Values);
		attribute<rdc>       geometry   := Places/geometry[Place_rel];
	}
}

unit<uint32> PublicTransportNet := union_unit(AddTransfersToScheduledLinks, AddTransfersToScheduledLinks/WaitingAtStop)
, Descr = "full public transport network, including transfer links and waiting at stop"
, Using = "RelevantSelection"
{	
	unit<uint32> NodeSet := AddTransfersToScheduledLinks/Nodeset;
	unit<uint32> Places  := AddTransfersToScheduledLinks/Places;
	unit<uint32> Stops   := RelevantSelection/Stops
	{
		attribute<Places>     Place_rel             := rlookup(geometry, Places/geometry);
	}
	// unit<uint32> Routes  := ../Routes;
	
	
	attribute<rdc>                     geometry (arc)                 := union_data(., AddTransfersToScheduledLinks/geometry, AddTransfersToScheduledLinks/WaitingAtStop/geometry);
	attribute<Places>                  FromPlace_rel                  := Stops/Place_rel[FromStop_rel];
	attribute<string>                  FromPlace_name                 := Stops/name[FromStop_rel];
	attribute<string>                  ToPlace_name                   := Stops/name[ToStop_rel];
	attribute<Places>                  ToPlace_rel                    := Stops/Place_rel[ToStop_rel];
	
	// attribute<Places>                  FromPlace_rel                  := union_data(., AddTransfersToScheduledLinks/FromPlace_rel, AddTransfersToScheduledLinks/WaitingAtStop/FromPlace_rel);
	// attribute<string>                  FromPlace_name                 := union_data(., AddTransfersToScheduledLinks/FromPlace_name, AddTransfersToScheduledLinks/WaitingAtStop/FromPlace_name);
	// attribute<string>                  ToPlace_name                   := union_data(., AddTransfersToScheduledLinks/ToPlace_name, AddTransfersToScheduledLinks/WaitingAtStop/ToPlace_name);
	// attribute<Places>                  ToPlace_rel                    := union_data(., AddTransfersToScheduledLinks/ToPlace_rel, AddTransfersToScheduledLinks/WaitingAtStop/ToPlace_rel);
	attribute<rdc>                     FromPoint                      := union_data(., AddTransfersToScheduledLinks/FromPoint, AddTransfersToScheduledLinks/WaitingAtStop/FromPoint);
	attribute<rdc>                     ToPoint                        := union_data(., AddTransfersToScheduledLinks/ToPoint, AddTransfersToScheduledLinks/WaitingAtStop/ToPoint);
	// attribute<Stops>                   FromStop_rel                   := Places/Stop_rel[FromPlace_rel];
	// attribute<Stops>                   ToStop_rel                     := Places/Stop_rel[ToPlace_rel];
	attribute<Stops>                   FromStop_rel                   := union_data(., AddTransfersToScheduledLinks/FromStop_rel, AddTransfersToScheduledLinks/WaitingAtStop/FromStop_rel);
	attribute<Stops>                   ToStop_rel                     := union_data(., AddTransfersToScheduledLinks/ToStop_rel, AddTransfersToScheduledLinks/WaitingAtStop/ToStop_rel);
	
	attribute<string>                  Label                          := union_data(., AddTransfersToScheduledLinks/Label, AddTransfersToScheduledLinks/WaitingAtStop/Label);
	attribute<Time>                    FromTime                       := union_data(., AddTransfersToScheduledLinks/fromTime, AddTransfersToScheduledLinks/WaitingAtStop/fromTime);
	attribute<Time>                    ToTime                         := union_data(., AddTransfersToScheduledLinks/toTime, AddTransfersToScheduledLinks/WaitingAtStop/toTime);
	attribute<s_f>                     Duration                       := union_data(., AddTransfersToScheduledLinks/Duration, AddTransfersToScheduledLinks/WaitingAtStop/Duration), IntegrityCheck = "ModelParameters/Add_OV_PriceInformation ? all(RelevantSelection/ScheduledLinks/HasPriceRelation) : TRUE";
	attribute<LinkTypes>               LinkType_rel                   := union_data(., AddTransfersToScheduledLinks/LinkType_rel, const(LinkTypes/V/Waiting_at_Stop, AddTransfersToScheduledLinks/WaitingAtStop, LinkTypes));
	attribute<NodeSet>                 F1                             := rlookup(point_xy(FromTime, FromPlace_rel), NodeSet/Values);
	attribute<NodeSet>                 F2                             := rlookup(point_xy(ToTime, ToPlace_rel), NodeSet/Values);
	attribute<km>                      Length                         := arc_length(geometry, m)[km];
	attribute<Modes>                   Mode_rel                       := union_data(., AddTransfersToScheduledLinks/Mode_rel, const(Modes/V/Waiting, AddTransfersToScheduledLinks/WaitingAtStop, Modes));
	attribute<uint32>                  Trip_rel                       := union_data(., AddTransfersToScheduledLinks/Trip_rel, const(0/0, AddTransfersToScheduledLinks/WaitingAtStop));
	attribute<Agencies>                Agency_rel                     := union_data(., AddTransfersToScheduledLinks/Agency_rel, const(0/0, AddTransfersToScheduledLinks/WaitingAtStop));
	attribute<Routes>                  Route_rel                      := union_data(., AddTransfersToScheduledLinks/Route_rel, const((0/0)[Routes], AddTransfersToScheduledLinks/WaitingAtStop));
	attribute<string>                  RouteName                      := union_data(., AddTransfersToScheduledLinks/RouteName, const('Waiting', AddTransfersToScheduledLinks/WaitingAtStop));
	attribute<string>                  RouteName_short                := union_data(., AddTransfersToScheduledLinks/RouteName_short, const('Waiting', AddTransfersToScheduledLinks/WaitingAtStop));

	// attribute<uint32>                  LinkTypeSum (LinkTypes)        := pcount(LinkType_rel);
	// unit<uint32>                       NetCheck                       := connected_parts(F1, F2);
	// attribute<Concessiegebied>         Start_Concessiegebied_rel      := point_in_polygon(Stops/geometry[FromStop_rel], Concessiegebied/geometry);
	
	// attribute<string>                  Mode_Agency_CG_Lijn_identifier := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel] +'_'+ Concessiegebied/name[Start_Concessiegebied_rel] + '_' + RouteName_short;
	// attribute<string>                  Mode_Agency_CG_identifier      := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel] +'_'+ Concessiegebied/name[Start_Concessiegebied_rel];
	// attribute<string>                  Mode_Agency_identifier         := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel];
	
	// attribute<PrijsTabel>    PrijsTabel_rel_initial        := rlookup(Mode_Agency_CG_Lijn_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
	// attribute<PrijsTabel>    PrijsTabel_rel_augmented1     := rlookup(Mode_Agency_CG_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
	// attribute<PrijsTabel>    PrijsTabel_rel_augmented2     := rlookup(Mode_Agency_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
	// attribute<PrijsTabel>    PrijsTabel_rel_augmentation   := MakeDefined(PrijsTabel_rel_augmented1, PrijsTabel_rel_augmented2);
	// attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev1 := rlookup(Mode_Agency_CG_identifier, PrijsTabel/Mode_Agency_CG_identifier);
	// attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev2 := rlookup(Mode_Agency_identifier, PrijsTabel/Mode_Agency_identifier);
	// attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev  := MakeDefined(PrijsTabel_rel_augmented_rev1, PrijsTabel_rel_augmented_rev2);
	// attribute<PrijsTabel>    PrijsTabel_rel_augmented      := MakeDefined(PrijsTabel_rel_augmentation, PrijsTabel_rel_augmented_rev);
	// attribute<PrijsTabel>    PrijsTabel_rel                := MakeDefined(PrijsTabel_rel_initial, PrijsTabel_rel_augmented);
	
	// unit<uint8> PrijsTabel := /SourceData/Infrastructuur/OVprijzen/PrijsTabel;
}
