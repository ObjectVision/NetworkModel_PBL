container ModelParameters : using = "units"
{   
	//Generieke instellingen
	parameter<string>   AnalyseMoment                     := 'Y2023'                , Descr = "Select a year in order to automatically select the accompanying date values for other datasets, defined in Advanced/AnalyseMomentPresets";
	parameter<string>   Orgset                            := 'Buurt_enkele_Prov'    , Descr = "Select the origin set, defined in Advanced/org_domain_list.";              
	parameter<string>   Destset                           := 'Buurt_enkele_Prov'   , Descr = "Select the destination set, defined in Advanced/dest_domain_list.";       
	parameter<string>   CentroidWeightType                := 'Addresses'            , Descr = "If you want to use weighted centroids for origins, how would you like to weigh the values comprsing the coentroid? Via addresses or population?";
	parameter<string>   Orgset_EnkeleBuurt_selectie       := 'BU09350005'           , Descr = "If you choose 'enkele_buurt' in the OrgSet, which neighbourhood would you like? Use the BU_CODE.";
	parameter<string>   Orgset_EnkeleGem_selectie         := 'Dronten'              , Descr = "If you choose 'enkele_gem' in the OrgSet, which municipality would you like? Use the municipality name.";
	parameter<string>   Orgset_EnkeleProv_selectie        := 'Groningen'            , Descr = "If you choose 'enkele_prov' in the OrgSet, which provincie would you like? Use the province name.";
	parameter<string>   Orgset_EnkeleCorop_selectie       := 'Arnhem_Nijmegen'      , Descr = "If you choose 'enkele_corop' in the OrgSet, which COROP would you like? Use the corop name.";
	
	parameter<string>   Destset_Enkele_selectie           := 'BU09350003'           , Descr = "If you choose 'enkele_buurt' in the DestSet, which neighbourhood would you like? Use the BU_CODE.";
	parameter<string>   Destset_EnkeleCorop_selectie      := 'Twente'               , Descr = "If you choose 'enkele_corop' in the DestSet, which COROP would you like? Use the corop name.";
	parameter<bool>     Export_AfgelegdeAfstand           := FALSE                  , Descr = "Would you like to export the travelled distance along with the other attributes in the case of private transport?";
	
	//OV-berekening instellingen
	parameter<string>   GTFS_file_date                    := '20231003'             , Descr = "Which file date for the GTFS file would you like to use? Only relevant for public transport analysis.";
	parameter<string>   Analysis_date                     := '20231003'             , Descr = "What is the date of interest for the public transport analysis? Make sure this date is equal or later than GTFS_file_date, and should be no later than a month after the GTFS_file_date.", IntegrityCheck = "uint32(this) >= uint32(GTFS_file_date) && uint32(this) <= uint32(GTFS_file_date) + 100"; 

	parameter<min_f>    MaxWalkingTime_Org2Dest           := 20[min_f]              , Descr = "Maximum walking time from origin towards destination";
	parameter<min_f>    MaxWalkingTime_Org2Stops          := 15[min_f]              , Descr = "Maximum walking time from origin towards first stop";
	parameter<min_f>    MaxWalkingTime_Org2TMT_Stops      := 15[min_f]              , Descr = "Maximum walking time from origin towards first rail, metro, or tram stop";
	parameter<min_f>    MaxWalkingTime_Org2Tic_Stops      := 15[min_f]              , Descr = "Maximum walking time from origin towards first InterCity train station";
	parameter<min_f>    MaxWalkingTime_Stops2Dest         := 15[min_f]              , Descr = "Maximum walking time from last stop towards destination";
	parameter<min_f>    MaxWalkingTime_OVF_Stops2Dest     := 15[min_f]              , Descr = "Maximum walking time from last stop which is an OV-fiets station towards destination";
	
	parameter<min_f>    MaxCyclingTime_Org2Dest           := 30[min_f]              , Descr = "Maximum cycling time from origin towards destination";
	parameter<min_f>    MaxCyclingTime_Org2Stops          := 15[min_f]              , Descr = "Maximum cycling time from origin towards first stop";
	parameter<min_f>    MaxCyclingTime_Org2TMT_Stops      := 15[min_f]              , Descr = "Maximum cycling time from origin towards first rail, metro, or tram stop";
	parameter<min_f>    MaxCyclingTime_Org2Tic_Stops      := 15[min_f]              , Descr = "Maximum cycling time from origin towards first InterCity train station";
	parameter<min_f>    MaxCyclingTime_Stops2Dest         := 15[min_f]              , Descr = "Maximum cycling time from origin towards first stop";
	parameter<min_f>    MaxCyclingTime_OVF_Stops2Dest     := 15[min_f]              , Descr = "Maximum cycling time from last stop which is an OV-fiets station towards destination";
	
	parameter<min_f>    MaxOVTime                         := 60[min_f]              , Descr = "Maximum travel time using public transport, including transfers and waiting. Note that limiting this value might result in not being able to reach all destinations.";
	parameter<min_f>    MaxTravelTime                     := 60[min_f]              , Descr = "Maximum travel time of the complete journey. Only relevant for public transport analysis. Note that limiting this value might result in not being able to reach all destinations.";
	
	parameter<string>   NS_Tariefkeuze                    := 'Prijs_voltarief'      , Descr = "Which tarif class for NS would you like to use. Full fare, or a discounted fare? Choices: 'Prijs_40pr_tarief' 'Prijs_20pr_tarief' 'Prijs_voltarief'";
	parameter<string>   PrijsTabel_jaar                   := '2023'                 , Descr = "From which year would like the public transport prices?";
	parameter<string>   MinimiseCriterium                 := 'Traveltime'                , Descr = "Would you like to find the fastest or cheapest public transport journey? Choices: price or traveltime";
	parameter<uint32>   Max_overstappen                   := 2                      , Descr = "How many transfers are allowed?", IntegrityCheck = "this >= 1 && this <= 4";
	parameter<uint32>   NumberOfBlocks                    := 185                     , Descr = "How many blocks should be used in the Ketenrijger? Less means more memory usage per unit of time.";
	parameter<uint32>   MaxBlockSize                      := 250                    , Descr = "What is maximum block size?";
	
	parameter<euro_min> Transfer_Walking_Time_Costs       := 0.19[euro_min]         , Descr = "To attach a value to walking, the cost therof (or the time it takes) is incorporated. This is a mechanism to ensure when looking for the cheapest journey the model won't let you walk as much as possible.";
	parameter<euro_min> Transfer_Waiting_Time_Costs       := 0.05[euro_min]         , Descr = "To attach a value to waiting, the cost therof (or the time it takes) is incorporated.";
	parameter<euro_min> Voortransport_Walking_Time_Costs  := 0.19[euro_min]         , Descr = "To attach a value to walking, the cost therof (or the time it takes) is incorporated. This is a mechanism to ensure when looking for the cheapest journey the model won't let you walk as much as possible.";
	parameter<euro_min> Natransport_Walking_Time_Costs    := 0.19[euro_min]         , Descr = "To attach a value to walking, the cost therof (or the time it takes) is incorporated. This is a mechanism to ensure when looking for the cheapest journey the model won't let you walk as much as possible.";
	parameter<euro_min> Direct_Walking_Time_Costs         := 0.19[euro_min]         , Descr = "To attach a value to walking, the cost therof (or the time it takes) is incorporated. This is a mechanism to ensure when looking for the cheapest journey the model won't let you walk as much as possible.";
	parameter<euro_min> Direct_Cycling_Time_Costs         := 0.19[euro_min]         , Descr = "To attach a value to cycling, the cost therof (or the time it takes) is incorporated. This is a mechanism to ensure when looking for the cheapest journey the model won't let you cycle as much as possible.";
	parameter<euro_min> Voortransport_Cycling_Time_Costs  := 0.08[euro_km] * Advanced/CyclingSpeed_kmhr * 1[hr_f] / 60[min_f], Descr = "To attach a value to cycling, the cost therof (or the time it takes) is incorporated. This is a mechanism to ensure when looking for the cheapest journey the model won't let you cycle as much as possible.";
	parameter<euro_min> Natransport_Cycling_Time_Costs    := 0.08[euro_km] * Advanced/CyclingSpeed_kmhr * 1[hr_f] / 60[min_f], Descr = "To attach a value to cycling, the cost therof (or the time it takes) is incorporated. This is a mechanism to ensure when looking for the cheapest journey the model won't let you cycle as much as possible.";
	
	//Auto berekening instellingen
	parameter<min_f>    MaxCarTime                        := 90[min_f]              , Descr = "Maximum travel time using car transport. Note that limiting this value might result in not being able to reach all destinations.";
	parameter<bool>     UseTomTomNetworkForCars           := TRUE                   , Descr = "Would you like to use the TomTom network car analysis? Or if not, the OSM network is used.";
	
	container Advanced : using = "classifications"
	{
		/// GENERAL
		parameter<bool>     Create_Symmetric_fullOD                   := FALSE      , Descr = "Would like to create a symmetric OD-matrix. So from origins to origins.", IntegrityCheck = "NOT(Getiled_berekenen)";
		parameter<bool>     Getiled_berekenen                         := FALSE      , Descr = "Would you like to split the origins up into smaller sets to speed up calculation by reducing memory usage per unit of time.";
		parameter<string>   Regio_voor_Tiling                         := 'corop'    , Descr = "If calculating in tiled, which tiling would you like to use? Options: 'Corop' 'provincies'";
		parameter<string>   BAG_jaar                                  := RegioIndelingen_jaar, Descr = "Which BAG year would you like to use? This is now decided via RegioIndelingen_jaar, via AnalyseMoment. This data is used for weighted centroids.";
		parameter<string>   RegioIndelingen_jaar                      := rjoin(AnalyseMoment, Advanced/AnalyseMomentPresets/name, Advanced/AnalyseMomentPresets/RegioIndelingen_jaar), Descr = "Which year for the adminstrative boundaries would you like to use? This is now decided via AnalyseMoment.";
		parameter<string>   LISA_jaar                                 := '2018'     , Descr = "Which year of the LISA-dataset would you like to use?";
		parameter<bool>     Dests_geclusterd                          := FALSE      , Descr = "Would you like to cluster destinations? For example useful for firm destinations, with many firms at the same location. To determine the area of clustering look at Dest_location_scale";
		parameter<string>   Dest_location_scale                       := '100m'     , Descr = "If clustering the destination, at which scale would you like to cluster? Options: '100m', '500m', '1000m', '5000m', '10000m', '50000m'";
		parameter<string>   items_of_interest                         := rjoin(lowercase(DestSet), lowercase(Advanced/dest_domain_list/label), Advanced/dest_domain_list/items_of_interest), Descr = "What is the item of interest in the analysis? Such as number of jobs. Decided via the dest_set.";
		parameter<bool>     ExcludeOrgBuurtCentroidsWithoutAddressPop := FALSE      , Descr = "Would yo like to exclude buurt centroid that do not contain addresses or population (depending on CentroidWeightType).";
		parameter<string>   fileNamePrefix                            := Getiled_berekenen ? '%LocalDataProjDir%/Output/PerRegio/' : '%LocalDataProjDir%/Output/', Descr = "Location where output files will be saved.";
		parameter<uint8>    NumberOfItersForNetworkCleanUp            := 10b        , Descr = "In the network clean up method, how many iternations should be used?";


		// PUBLIC TRANSPORT
		parameter<m>        MaxTransferDist                           := 500[m], Descr = "Maximum Euclidean distance between public transport stops that is allowed to be walked for transfers.";
		parameter<string>   Concessiegebied_jaar                      := 'Y2024', Descr = "Which year of the concession areas would you like to use? Relevant for public transport price determination.";
		parameter<m>        DistanceTrainStationsSelection            := 350[m], Descr = "To find out which GTFS-stops relate to which trainstation a geographic search distance is used.";
		parameter<m>        DistanceStopClusters                      := 100[m], Descr = "To cluster stops which belong to the same 'stop' a geographic search distance is used. Stops in opposite directions should be considered the same stop cluster. Travelling from stops within a cluster is non-sensical.";
		parameter<m>        DistanceOVFietsStops                      := 200[m], Descr = "";
		parameter<min_f>    MaxOverstapTijdVoorBasistarief            := 35[min_f], Descr = "";
		parameter<bool>     AllowDirectCyclingOverWalking             := FALSE, Descr = "Direct walking is the minimum, however, directly cycling may also be an option";
		parameter<m_s>      TransferEffectiveSpeed                    := value(4[km_hr] / 1.2f, m_s), Descr = "";           //De loopsnelheid tijdens het overstappen. X km/uur / 1.2 (correctie voor Manhattan distances) en dan geconverteerd naar meter/sec.
		parameter<uint16>   WachttijdThuisMeetellen                   := 1w, Descr = "";                                      //Wil je dat de wachttijd thuis wordt meegenomen in de totale reisduur, bij vertrektijd vanaf bepaald moment? 1=ja
		parameter<Time>     MaxWachttijdThuis                         := 299[Time], Descr = "";                               //Maximale wachttijd thuis, als WegingWachttijdThuisVoortransport > 0. Uitdrukt in Time = seconden.
		// parameter<min_f>    OngelijkvloersPenalty                     := 2[min_f]               , Descr = "Does a public transport stop have a lot of vertical distance to traverse? In that case a time penalty will be given when traffering through that stop.";
		// parameter<min_f>    FietsVoortransport_Penalty                := 2[min_f]               , Descr = "When using a bike in pre-transport, a time penalty may be added to incorporate time to park the bike.";


		// PRIVATE TRANSPORT
		parameter<bool>     UseActualCyclingSpeeds                    := FALSE                  , Descr = "In the case of cycling, would you like to use actual cycling speeds (from Fietstelweek) or a constant speed (as defined in BikingSpeed_kmhr)?";
		parameter<string>   CongestionSpeed_DaySelection              := 'tuesday', Descr = "";  // 'Weekday' 'Weekend' 'Week' 'monday' 'tuesday' 'wednesday' 'thursday' 'friday' 'saturday' 'sunday' 
		parameter<string>   TomTom_StreetTypeSelectie                 := 'FuncRoadClass/V/Local_Road_of_Minor_Importance', Descr = "";    //7 FuncRoadClass/V/Local_Road   8 FuncRoadClass/V/Secondary_Road Local_Road_of_Minor_Importance  Local_Road_of_High_Importance 
		parameter<m>        Fietstel_OSM_link_dist                    := 8[m], Descr = "";                                    //De maximale afstand tussen OSM en FietsTelWeek data om te linken  
		parameter<float32>  ConnectSearchDist                         := 100f^2f, Descr = "";                                 //Zoek gebied voor connect_info operaties, zoals linken NDW aan NWB en NWB aan OSM, en FietsTelWeek aan OSM.
		parameter<km_hr>    WalkingSpeed_kmhr                         := 4.5[km_hr], Descr = "";
		parameter<km_hr>    CyclingSpeed_kmhr                         := 16[km_hr], Descr = "";
		parameter<km_hr>    E_BikingSpeed_kmhr                        := 18[km_hr], Descr = "";
		parameter<km_hr>    E_BikingSpeed_actualspeed_addition_kmhr   := 10[km_hr], Descr = "";
		// parameter<m_s>      PedestrianSpeed                           := WalkingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km], Descr = "";
		// parameter<m_s>      BikeSpeed                                 := BikingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km], Descr = "";
		// parameter<m_s>      E_BikeSpeed                               := E_BikingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km], Descr = "";
		parameter<km_hr>    CarSpeed_kmhr                               := 130[km_hr], Descr = "Alleen relevant bij OSM";
		parameter<km_hr>    CarSpeed_limit_kmhr                         := 100[km_hr], Descr = "Bijvoorbeeld bij 100kmpu op snelwegen overdag. Alleen relevant bij OSM";
		// parameter<km_hr>    WalkingDefaultSpeed                       := WalkingSpeed_kmhr, Descr = "";
		// parameter<km_hr>    CyclingDefaultSpeed                       := BikingSpeed_kmhr, Descr = "";
		// parameter<km_hr>    E_BikeDefaultSpeed                        := E_BikingSpeed_kmhr, Descr = "";
		parameter<km_hr>    CarDefaultSpeed                           := 50[km_hr], Descr = "";
		parameter<km_hr>    CarDefaultSpeed_low                       := 30[km_hr], Descr = "";
		parameter<km_hr>    Ferry_Speed                               := 25[km_hr], Descr = "";
		parameter<bool>     InterpretAllRoadsAsBidirectional          := FALSE, Descr = "";                          //Should car(!) roads be interpreted as bidirectional, or should the OneDirection property be guiding?
		parameter<string>   DestSet_string                            := Create_Symmetric_fullOD 
																		? lowercase(Orgset) 
																		: Dests_geclusterd 
																			? lowercase(Destset) + '_' + lowercase(Dest_location_scale)
																			: lowercase(Destset), Descr = "";
		parameter<string>   Orgset_str                                := Getiled_berekenen ? lowercase(Orgset)+'_per'+lowercase(Regio_voor_Tiling) : lowercase(Orgset), Descr = "";    //'PC6_domain_corop'; //'PC6full' 'PC6sub' 'PC4full' 'PC4sub' PC6sub_MRA PC6sub_Pijp Point100m LocatiesMachiel Buurtsub_MRA  //org punten selectie
		unit<uint32>        Regio                                     := =Getiled_berekenen 
																		? 'RegioIndeling' 
																		: 'SourceData/RegioIndelingen/NL', Descr = ""; // Als je getiled wilt rekenen, zorgt dit dat je verwijst naar die tiling, of naar heel NL in één keer.
		unit<uint32>        RegioIndeling                             := ='SourceData/RegioIndelingen/'+Regio_voor_Tiling, Descr = "";
		
		
		
		unit<uint8> OV_Voortransport_Typen : nrofrows = 2 
		, Descr = ""
		{
			attribute<TimeInvariantTypes> TimeInvariantTypes_rel := 
				union_data(.,
					 TimeInvariantTypes/V/Org2Stops_Walking
					// ,TimeInvariantTypes/V/Org2Stops_Cycling
					// ,TimeInvariantTypes/V/Org2TMT_Stops_Cycling
					,TimeInvariantTypes/V/Org2Tic_Stops_Cycling
				);
			attribute<string> name    := TimeInvariantTypes/name[TimeInvariantTypes_rel];
			attribute<min_f>  MaxTime := TimeInvariantTypes/MaxTime[TimeInvariantTypes_rel];
		}
		unit<uint8> OV_Natransport_Typen : nrofrows = 2 
		, Descr = ""
		{
			attribute<TimeInvariantTypes> TimeInvariantTypes_rel :=
				union_data(.,
					 TimeInvariantTypes/V/Stops2Dest_Walking
					// ,TimeInvariantTypes/V/Stops2Dest_Cycling
					,TimeInvariantTypes/V/OVF_Stops2Dest_Cycling
				);
			attribute<string> name    := TimeInvariantTypes/name[TimeInvariantTypes_rel];
			attribute<min_f>  MaxTime := TimeInvariantTypes/MaxTime[TimeInvariantTypes_rel];
		}
		
		
		unit<uint8> OV_Reis_vertrek_uren : nrofrows = 1 
		, Descr = ""
		{
			attribute<uint32> values : [7];
			// attribute<uint32> values : [7,8,12,13,21,22]; // 6 stuks
		}
		unit<uint8> OV_Reis_vertrek_minuten : nrofrows = 2
		, Descr = ""
		{
			// attribute<uint32> values : [0]; 
			attribute<uint32> values : [0,30]; 
			// attribute<uint32> values : [0,5,10,15,20,25,30,35,40,45,50,55];  //12 stuks
		}
		
		unit<uint8>  AnalyseMomentPresets : nrofrows = 9
		, Descr = ""
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// name, OSM date , Regios, OSM_perProv, CarCongestionSpeed_date_TomTom
				[
				'Y2012','20221201', '2012', 'TRUE',  'yr2021_12', //20140101
				'Y2013','20140101', '2022', 'FALSE', 'yr2021_12',
				'Y2018','20190101', '2020', 'FALSE', 'yxx2021_12',
				'Y2020','20200117', '2020', 'FALSE', 'yr2021_12',
				'Y2021','20211221', '2021', 'TRUE',  'yr2021_12',
				'Y2022','20221201', '2022', 'TRUE',  'yr2022_12',
				'Y2023','20240524', '2023', 'TRUE',  'yr2023_12', //20240524
				'Y2024','20240524', '2024', 'TRUE',  'yr2024_12', //20240524
				'Y2025','20240524', '2024', 'TRUE',  'yr2024_12'  //20240524
				];
			}
			
			attribute<string>        name                    := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
			attribute<string>        OSM_file_date           := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
			attribute<string>        RegioIndelingen_jaar    := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
			attribute<bool>          OSM_NL_prov             := Elements/Text[value(UInt32(ID(.))* nrAttr + 3, Elements)][bool];
			attribute<string>        CarCongestionSpeed_date := Elements/Text[value(UInt32(ID(.))* nrAttr + 4, Elements)];
			
			parameter<uint32> nrAttr := 5;
		}
	
		unit<uint32> org_domain_list : nrofrows = 20 // Hier worden de paden voor elke org set opgegeven. En wanneer er nieuwe bij komen dat hier ook toegevoegd worden.
		, Descr = ""
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// Label, Path
				[
				'Buurt'                               ,'SourceData/RegioIndelingen/Buurt/Centroiden',
				'Buurt_perProvincie'                  ,'SourceData/RegioIndelingen/Buurt/Per_Prov/@REGIO@/sub',
				'Buurt_perCOROP'                      ,'SourceData/RegioIndelingen/Buurt/Per_COROP/@REGIO@/sub',
				'Buurt_enkele_buurt'                  ,'SourceData/RegioIndelingen/Buurt/Enkele_buurt',
				'Buurt_enkele_Gemeente'               ,'SourceData/RegioIndelingen/Buurt/Enkele_Gemeente',
				'Buurt_enkele_Prov'                   ,'SourceData/RegioIndelingen/buurt/Enkele_Prov',
				'Buurt_enkele_Corop'                  ,'SourceData/RegioIndelingen/buurt/Enkele_Corop',
				
				'Wijk'                                ,'SourceData/RegioIndelingen/Wijk/Centroiden',
				'Wijk_perProvincie'                   ,'SourceData/RegioIndelingen/Wijk/Per_Prov/@REGIO@/sub',
				'Wijk_perCOROP'                       ,'SourceData/RegioIndelingen/Wijk/Per_COROP/@REGIO@/sub',
				
				'Gemeente'                            ,'SourceData/RegioIndelingen/Gemeente/Centroiden',
				'Gemeente_perProvincie'               ,'SourceData/RegioIndelingen/Gemeente/Per_Prov/@REGIO@/sub',
				'Gemeente_perCOROP'                   ,'SourceData/RegioIndelingen/Gemeente/Per_COROP/@REGIO@/sub',
				'Gemeente_enkele_gemeente'            ,'SourceData/RegioIndelingen/Gemeente/Enkele_gemeente',
				
				'PC4'                                 ,'SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids',
				'PC4_perCOROP'                        ,'SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids/Per_COROP/@REGIO@/sub',
				
				'PC6'                                 ,'SourceData/BAG/Adressen/Woon_Voorraad/PC6_centroids',
				'PC6_sub'                             ,'SourceData/BAG/Adressen/Woon_Voorraad/PC6_centroids/sub',
				
				'BAG_woonpanden'                      ,'SourceData/BAG/Panden/pand/pand_woon_vbo',
				'BAG_woonpanden_Clustered'            ,'SourceData/BAG/Panden/pand/pand_woon_vbo/HeeftPanden'
				]; 
			}
			
			attribute<uint32>        id              := id(.);
			attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
			attribute<string>        path           := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)], DialogType = "LabelText";
			
			parameter<uint32> nrAttr := 2;
		}
		
		unit<uint32> dest_domain_list : nrofrows = 5 // Hier worden de paden voor elke dest set opgegeven. En wanneer er nieuwe bij komen dat hier ook toegevoegd worden.
		, Descr = ""
		{ 
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// Label, Path
				[
				 'LISA'                                                           ,'SourceData/locaties/LISA/ReadFSS/y@LISAJAAR@/PerYear/HeeftBanen'                                                  , 'nr_banen'
				,'Buurt'                                                          ,'SourceData/RegioIndelingen/Buurt/Centroiden'                                                                      , 'nr_banen'
				,'Buurt_enkele_Buurt'                                             ,'SourceData/RegioIndelingen/Buurt/Enkele_buurt_Dest'                                                               , 'nr_banen'
				,'Buurt_enkele_Prov'                                              ,'SourceData/RegioIndelingen/Buurt/Enkele_Prov'                                                                    , 'nr_banen'
				,'Buurt_enkele_Corop'                                             ,'SourceData/RegioIndelingen/Buurt/Enkele_Corop'                                                                    , 'nr_banen'
				]; 
			}
			
			attribute<uint32>        id                := id(.);
			attribute<string>        label             := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
			attribute<string>        path              := replace(Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)], '@LISAJAAR@', LISA_jaar), DialogType = "LabelText";
			attribute<string>        items_of_interest := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
			
			parameter<uint32> nrAttr := 3;
		}
		
		unit<uint8> CongestionTimes : nrofrows = 3
		, Descr = ""
		{
			attribute<string> name : ['MorningRush','NoonRush','LateEveningRush'];
			attribute<string> Time : ['0730', '1230', '1930'];
		}
		
		container Distance_decay //distance decay parameters, calculated and provided by PBL
		: Descr = ""
		{
			parameter<float32> car_a   := -8.65786f;
			parameter<float32> car_b   := 2.492099f;
			parameter<float32> car_c   := 0.011641f;
			parameter<float32> bike_a  := -7.95686f;
			parameter<float32> bike_b  := 2.675059f;
			parameter<float32> bike_c  := 0.011981f;
			parameter<float32> ov_a    := -12.3301f;
			parameter<float32> ov_b    := 2.907621f;
			parameter<float32> ov_c    := 0.012824f;
		}
	
		
		container Junction_Penalties
		: Descr = "bij het reizen over door een netwerk kun je meestal niet zonder vertraging voorbij een kruispunt komen. Daarom geven we hiervoor een penalty afhankelijk van het aantal benen van het kruispunt." 
		{
			parameter<s>        with_2Links_Walking                  := 0[s]; // 0
			parameter<s>        with_3Links_Walking                  := 2[s]; // 1
			parameter<s>        with_4Links_Walking                  := 5[s]; // 2
			parameter<s>        with_gt4Links_Walking                := 6[s]; // 3
			
			parameter<s>        with_2Links_Cycling                  := 0[s]; // 0
			parameter<s>        with_3Links_Cycling                  := 2[s]; // 1
			parameter<s>        with_4Links_Cycling                  := 5[s]; // 2
			parameter<s>        with_gt4Links_Cycling                := 6[s]; // 3
			
			parameter<s>        with_2Links_E_Biking                 := 0[s]; // 0
			parameter<s>        with_3Links_E_Biking                 := 2[s]; // 1
			parameter<s>        with_4Links_E_Biking                 := 5[s]; // 2
			parameter<s>        with_gt4Links_E_Biking               := 6[s]; // 3
			
			parameter<s>        with_2Links_Car                      := 0[s]; // 0
			parameter<s>        with_3Links_Car                      := 2[s]; // 2
			parameter<s>        with_4Links_Car                      := 5[s]; // 5
			parameter<s>        with_gt4Links_Car                    := 6[s]; // 6
			
			parameter<s>        with_2_lowerSpeedLinks_Walking       := 0[s]; // 0
			parameter<s>        with_3_lowerSpeedLinks_Walking       := 0[s]; // 1
			parameter<s>        with_4_lowerSpeedLinks_Walking       := 0[s]; // 2
			parameter<s>        with_gt4_lowerSpeedLinks_Walking     := 0[s]; // 3
			
			parameter<s>        with_2_lowerSpeedLinks_Cycling       := 0[s]; // 0
			parameter<s>        with_3_lowerSpeedLinks_Cycling       := 0[s]; // 1
			parameter<s>        with_4_lowerSpeedLinks_Cycling       := 0[s]; // 2
			parameter<s>        with_gt4_lowerSpeedLinks_Cycling     := 0[s]; // 3
			
			parameter<s>        with_2_lowerSpeedLinks_E_Biking      := 0[s]; // 0
			parameter<s>        with_3_lowerSpeedLinks_E_Biking      := 0[s]; // 1
			parameter<s>        with_4_lowerSpeedLinks_E_Biking      := 0[s]; // 2
			parameter<s>        with_gt4_lowerSpeedLinks_E_Biking    := 0[s]; // 3
			
			parameter<s>        with_2_lowerSpeedLinks_Car           := 0[s]; // 0
			parameter<s>        with_3_lowerSpeedLinks_Car           := 0[s]; // 2
			parameter<s>        with_4_lowerSpeedLinks_Car           := 0[s]; // 5
			parameter<s>        with_gt4_lowerSpeedLinks_Car         := 0[s]; // 6
		}
		
		container OSM_impl
		: Descr = ""
		{
			unit<uint32> InEenBestand : nrofrows = 4
			{
				unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
				{
					attribute<String> Text:
					// Regio             , OrgSet , OrgPath, Land, Type, 
					[
					'Netherlands'             ,'NL', 'OD',

					'Belgium'                 ,'BE', 'OD',

					'Niedersachsen'           ,'DE', 'OD',
					'Nordrhein-Westfalen'     ,'DE', 'OD'
					]; 
				}
				
				attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)], DialogType = "LabelText";
				attribute<string>        name           := replace(label, '-', '_');
				attribute<string>        Country        := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
				attribute<string>        Type_src       := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
				
				parameter<uint32> nrAttr := 3;
			}
			unit<uint32> InProvincies : nrofrows = 17
			{
				unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
				{
					attribute<String> Text:
					// Regio             , OrgSet , OrgPath, Land, Type, 
					[
					'Drenthe'                 ,'NL', 'OD',
					'Flevoland'               ,'NL', 'OD',
					'Friesland'               ,'NL', 'OD',
					'Gelderland'              ,'NL', 'OD',
					'Groningen'               ,'NL', 'OD',
					'Limburg'                 ,'NL', 'OD',
					'Noord-Brabant'           ,'NL', 'OD',
					'Noord-Holland'           ,'NL', 'OD',
					'Overijssel'              ,'NL', 'OD',
					'Utrecht'                 ,'NL', 'OD',
					'Zeeland'                 ,'NL', 'OD',
					'Zuid-Holland'            ,'NL', 'OD',

					'Belgium'                 ,'BE', 'OD',

					'Niedersachsen'           ,'DE', 'OD',
					'Duesseldorf-regbez'       ,'DE', 'OD',
					'Koeln-regbez'             ,'DE', 'OD',
					'Muenster-regbez'          ,'DE', 'OD'
					]; 
				}
				
				attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)], DialogType = "LabelText";
				attribute<string>        name           := replace(label, '-', '_');
				attribute<string>        Country        := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
				attribute<string>        Type_src       := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
				
				parameter<uint32> nrAttr := 3;
			}
		}
		
		unit<uint32> SampleDay := select_with_attr_by_org_rel(Time, Time/Day = 0) //Hier worden de analyse tijdstippen opgegeven. LET OP: Verander je deze dan zul je ook de NDW_meetmomenten/time moeten aanpassen. En de ChosenMoments ook wanneer er meer/minder momenten opgegeven zijn.
		, Descr = ""
		{
			attribute<bool>    ChosenMoments   := =AsList(HoursMinutes/str,' || ');
			attribute<Time>    Time_rel        := org_rel;
			unit<uint8> ChosenHours    := OV_Reis_vertrek_uren;
			unit<uint8> ChosenMinutes  := OV_Reis_vertrek_minuten;
			unit<uint8> HoursMinutes   := combine_uint8(ChosenHours, ChosenMinutes)
			{
				attribute<uint32> Hours     := ChosenHours/values[first_rel];
				attribute<uint32> Minutes   := ChosenMinutes/values[second_rel];
				attribute<string> str       := '(hour == '+string(Hours)+' && minute == '+string(Minutes)+' && second == 0)';
			}
		}
		
		unit<uint32> MeasureMoments := select_with_attr_by_cond(SampleDay, SampleDay/ChosenMoments)
		, Descr = ""
		{
			attribute<Time>    Moment := Time_rel;
			attribute<string>  Name   := Time/TemplatableText[Moment];
		}
	}
}
