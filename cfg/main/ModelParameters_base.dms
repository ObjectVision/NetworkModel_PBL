container ModelParameters : using = "units"
{   
	//Generieke instellingen
	parameter<string>   AnalyseMoment                     := 'Y2023', Descr = "";                            //gebruikt om de rij te selecten in Advanced/AnalyseMomentPresets
	parameter<string>   Orgset                            := 'Buurt_enkele_prov', Descr = "";               //Welke origin punten worden gebruikt? Opties: 'PC4' 'PC6' 'Buurt_enkele_Corop' 'Buurt_enkele_Gemeente' 'Buurt_enkele_Buurt'
	parameter<string>   Destset                           := 'Buurt_enkele_Corop', Descr = "";               //Welke destination punten worden gebruikt? Opties: Groen_BS2017 'LISA' 'Huisartsenposten' 'Huisartsenposten_geclusterd', 'Ziekenhuizen_y2020', 'Ziekenhuizen_y2020_sub' 'Supermarkten_yokt2018' 'Winkelsdagelijks_yokt2018' 'PC6pnt_y2020' 'Basisscholen_okt2021' 'Scholen_voortgezet_onderwijs_okt2021'
	parameter<string>   CentroidWeightType                := 'Addresses', Descr = "";                        //Als je gewogen centroide neemt bij de orgs, op welke manier wil je die gewogen hebben? Obv Population of Addresses ?
	parameter<string>   Orgset_EnkeleBuurt_selectie       := 'BU09350005', Descr = "";                       //Als je een enkele buurt selecteert bij OrgSet, welke buurt wil je dan? BU00140107  'Laanhuizen'; 'Elzenhof'; BU19010209
	parameter<string>   Orgset_EnkeleGem_selectie         := 'Dronten', Descr = "";                           //Als je een enkele gemeente selecteert bij OrgSet, welke gemeente wil je dan?
	parameter<string>   Orgset_EnkeleProv_selectie        := 'Groningen', Descr = "";                        //Als je een enkele provincie selecteert bij OrgSet, welke provincie wil je dan?
	parameter<string>   Orgset_EnkeleCorop_selectie       := 'Arnhem_Nijmegen', Descr = ""; //Als je een enkele corop selecteert bij OrgSet, welke provincie wil je dan?
	
	parameter<string>   Destset_Enkele_selectie           := 'BU09350003', Descr = "";                                //Als je een enkele dest selecteert bij dest, welke gebruik je dan in de subset selectie?
	// parameter<string>   Destset_EnkeleCorop_selectie := 'Twente', Descr = "";                                //Als je een enkele dest selecteert bij dest, welke gebruik je dan in de subset selectie?
	parameter<bool>     Export_AfgelegdeAfstand           := FALSE, Descr = "";                               // export (en daarmee bereken) de afgelegde afstand in de output cvs's voor private transport.
	
	//OV-berekening instellingen
	parameter<string>   GTFS_file_date                    := '20231003', Descr = "";                         //GTFS file date  20231003 20220928 20211001 20201002 20191007 20120917 
	parameter<string>   Analysis_date                     := '20231003', Descr = "", IntegrityCheck = "uint32(this) >= uint32(GTFS_file_date) && uint32(this) <= uint32(GTFS_file_date) + 100"; //GTFS model date 20120918 20191008 20221004 20231008  20201006 20201004 20211005 20211003 20171003 (=dinsdag) 20171001 (=zondag)

	parameter<min_f>    MaxWalkingTime_Org2Dest           := 20[min_f], Descr = "Maximum walking time from origin towards destination";
	parameter<min_f>    MaxWalkingTime_Org2Stops          := 15[min_f], Descr = "Maximum walking time from origin towards first stop";
	parameter<min_f>    MaxWalkingTime_Org2TMT_Stops      := 15[min_f], Descr = "Maximum walking time from origin towards first rail, metro, or tram stop";
	parameter<min_f>    MaxWalkingTime_Org2Tic_Stops      := 15[min_f], Descr = "Maximum walking time from origin towards first InterCity train station";
	parameter<min_f>    MaxWalkingTime_Stops2Dest         := 15[min_f], Descr = "Maximum walking time from last stop towards destination";
	parameter<min_f>    MaxWalkingTime_OVF_Stops2Dest     := 15[min_f], Descr = "Maximum walking time from last stop which is an OV-fiets station towards destination";
	
	parameter<min_f>    MaxCyclingTime_Org2Dest           := 30[min_f], Descr = "Maximum cycling time from origin towards destination";
	parameter<min_f>    MaxCyclingTime_Org2Stops          := 15[min_f], Descr = "Maximum cycling time from origin towards first stop";
	parameter<min_f>    MaxCyclingTime_Org2TMT_Stops      := 15[min_f], Descr = "Maximum cycling time from origin towards first rail, metro, or tram stop";
	parameter<min_f>    MaxCyclingTime_Org2Tic_Stops      := 15[min_f], Descr = "Maximum cycling time from origin towards first InterCity train station";
	parameter<min_f>    MaxCyclingTime_Stops2Dest         := 15[min_f], Descr = "Maximum cycling time from origin towards first stop";
	parameter<min_f>    MaxCyclingTime_OVF_Stops2Dest     := 15[min_f], Descr = "Maximum cycling time from last stop which is an OV-fiets station towards destination";
	parameter<min_f>    MaxOVTime                         := 60[min_f], Descr = "";                          //Maximale reistijd met OV. Te gebruiken om de rekentijd te verkorten. LET OP: hierdoor worden mogelijk de verste locaties niet bereikt. Wannneer een distance decay wordt gebruikt is niet zo erg. Maar bij een volledige OD wel! 
	parameter<min_f>    MaxTravelTime                     := 60[min_f], Descr = "";                          //Maximale reistijd met alle vervoersmiddelen (i.e. ook voor en na transport). Te gebruiken om de rekentijd te verkorten. LET OP: hierdoor worden mogelijk de verste locaties niet bereikt. Wannneer een distance decay wordt gebruikt is niet zo erg. Maar bij een volledige OD wel! 
	parameter<min_f>    OngelijkvloersPenalty             := 2[min_f], Descr = "";                           //Is er sprake van een halte waar je veel verticale afstand moet afleggen? Dan kun je daar een tijd penalty voor geven bij het overstappen, in seconden.
	parameter<min_f>    FietsVoortransport_Penalty        := 2[min_f], Descr = "";                           //
	parameter<bool>     UseActualBikeSpeeds               := FALSE, Descr = "";                              //Gebruik van actualbike speeds in OV berekening voor voor- en natransport. TRUE: Gebruik FietsTelWeek data fietssnelheden. FALSE: Gebruik default waarde, hieronder gedefinieerd.
	parameter<string>   NS_Tariefkeuze                    := 'Prijs_voltarief', Descr = "";                  //Welk tarief wil je hanteren voor NS reizen? Opties: 'Prijs_40pr_tarief' 'Prijs_20pr_tarief' 'Prijs_voltarief' 
	parameter<string>   PrijsTabel_jaar                   := '2023', Descr = "";                             //
	parameter<string>   MinimiseCriterium                 := 'Price', Descr = "";                            //Price Traveltime
	parameter<uint32>   Max_overstappen                   := 2, Descr = "";
	
	parameter<euro_min> Transfer_Walking_Time_Costs       := 0.19[euro_min], Descr = "";
	parameter<euro_min> Transfer_Waiting_Time_Costs       := 0.05[euro_min], Descr = "";
	parameter<euro_min> Voortransport_Walking_Time_Costs  := 0.19[euro_min], Descr = "";
	parameter<euro_min> Natransport_Walking_Time_Costs    := 0.19[euro_min], Descr = "";
	parameter<euro_min> Direct_Walking_Time_Costs         := 0.19[euro_min], Descr = "";
	parameter<euro_min> Direct_Cycling_Time_Costs         := 0.19[euro_min], Descr = "";
	parameter<euro_min> Voortransport_Cycling_Time_Costs  := 0.08[euro_km] * Advanced/BikingSpeed_kmhr * 1[hr_f] / 60[min_f], Descr = "";
	parameter<euro_min> Natransport_Cycling_Time_Costs    := 0.08[euro_km] * Advanced/BikingSpeed_kmhr * 1[hr_f] / 60[min_f], Descr = "";
	
	//Auto berekening instellingen
	parameter<min_f>    MaxCarTime                       := 90[min_f], Descr = "";                      //Maximale reistijd met lopen/fiets/auto //120
	parameter<bool>     UseTomTomNetworkForCars          := TRUE, Descr = "";                           //Gebruik het TomTom auto netwerk, of het OSM netwerk.
	
	container Advanced : using = "classifications"
	{
		/// GENERAL
		parameter<bool>     Create_Symmetric_fullOD                   := FALSE, Descr = "", IntegrityCheck = "NOT(Getiled_berekenen)";                             //Als je van org naar org wilt, zet deze dan op true
		parameter<bool>     Getiled_berekenen                         := FALSE, Descr = "";                               //Als je getiled wilt rekenen, om het rekenproces sneller te maken. En opsplitst om het effect van crashes te verkleinen
		parameter<string>   Regio_voor_Tiling                         := 'corop', Descr = "";                            //Deze indeling bepaald hoe je wilt tilen. Opties: 'corop', 'provincies'
		parameter<string>   BAG_jaar                                  := RegioIndelingen_jaar, Descr = "";               //Het BAG jaar laten we nu afhankelijk zijn van het gekozen regio indelingen jaar. Gebruikt voor de gewogen centroiden. 
		parameter<string>   RegioIndelingen_jaar                      := rjoin(AnalyseMoment, Advanced/AnalyseMomentPresets/name, Advanced/AnalyseMomentPresets/RegioIndelingen_jaar), Descr = "";
		parameter<string>   LISA_jaar                                 := '2018', Descr = "";                             //LISA file date
		parameter<bool>     Dests_geclusterd                          := FALSE, Descr = "";                              //Destinations clusteren? aan te raden bij bijv LISA.
		parameter<string>   items_of_interest                         := rjoin(lowercase(DestSet), lowercase(Advanced/dest_domain_list/label), Advanced/dest_domain_list/items_of_interest), Descr = "";
		parameter<bool>     ExcludeOrgBuurtCentroidsWithoutAddressPop := FALSE, Descr = ""; //Would yo like to exclude buurt centroid that do not contain addresses or population (depending on CentroidWeightType).
		parameter<string>   Dest_location_scale                       := '100m', Descr = "";                                  //Het schaalniveau om destination op te clusteren. Opties: '100m', '500m', '1000m', '5000m', '10000m', '50000m'
		parameter<string>   fileNamePrefix                            := Getiled_berekenen ? '%LocalDataProjDir%/Output/PerRegio/' : '%LocalDataProjDir%/Output/', Descr = "";  //Locatie waar output files moeten worden opgeslagen.
		parameter<uint8>    NumberOfItersForNetworkCleanUp            := 10b, Descr = "";


		// PUBLIC TRANSPORT
		parameter<m>        MaxTransferDist                           := 500[m], Descr = "";                             //Maximale euclidische loopafstand tussen OV-haltes voor overstappen, in meters.
		parameter<string>   Concessiegebied_jaar                      := 'Y2024', Descr = "";                            //Welk jaar voor de concessiegebied indeling wil je gebruiken? Dit is relevant voor de prijsbepaling van OV-vervoer.
		parameter<m>        DistanceTrainStationsSelection            := 350[m], Descr = "";
		parameter<m>        DistanceStopClusters                      := 100[m], Descr = "";
		parameter<m>        DistanceOVFietsStops                      := 200[m], Descr = "";
		parameter<min_f>    MaxOverstapTijdVoorBasistarief            := 35[min_f], Descr = "";
		parameter<bool>     AllowDirectCyclingOverWalking             := FALSE, Descr = "Direct walking is the minimum, however, directly cycling may also be an option";
		parameter<m_s>      TransferEffectiveSpeed                    := value(4[km_hr] / 1.2f, m_s), Descr = "";           //De loopsnelheid tijdens het overstappen. X km/uur / 1.2 (correctie voor Manhattan distances) en dan geconverteerd naar meter/sec.
		parameter<uint16>   WachttijdThuisMeetellen                   := 1w, Descr = "";                                      //Wil je dat de wachttijd thuis wordt meegenomen in de totale reisduur, bij vertrektijd vanaf bepaald moment? 1=ja
		parameter<Time>     MaxWachttijdThuis                         := 299[Time], Descr = "";                               //Maximale wachttijd thuis, als WegingWachttijdThuisVoortransport > 0. Uitdrukt in Time = seconden.


		// PRIVATE TRANSPORT
		parameter<string>   CongestionSpeed_DaySelection              := 'tuesday', Descr = "";  // 'Weekday' 'Weekend' 'Week' 'monday' 'tuesday' 'wednesday' 'thursday' 'friday' 'saturday' 'sunday' 
		parameter<string>   TomTom_StreetTypeSelectie                 := 'FuncRoadClass/V/Local_Road_of_Minor_Importance', Descr = "";    //7 FuncRoadClass/V/Local_Road   8 FuncRoadClass/V/Secondary_Road Local_Road_of_Minor_Importance  Local_Road_of_High_Importance 
		parameter<m>        Fietstel_OSM_link_dist                    := 8[m], Descr = "";                                    //De maximale afstand tussen OSM en FietsTelWeek data om te linken  
		parameter<float32>  ConnectSearchDist                         := 100f^2f, Descr = "";                                 //Zoek gebied voor connect_info operaties, zoals linken NDW aan NWB en NWB aan OSM, en FietsTelWeek aan OSM.
		parameter<km_hr>    WalkingSpeed_kmhr                         := 4.5[km_hr], Descr = "";
		parameter<km_hr>    BikingSpeed_kmhr                          := 16[km_hr], Descr = "";
		parameter<km_hr>    E_BikingSpeed_kmhr                        := 18[km_hr], Descr = "";
		parameter<km_hr>    E_BikingSpeed_actualspeed_addition_kmhr   := 10[km_hr], Descr = "";
		// parameter<m_s>      PedestrianSpeed                           := WalkingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km], Descr = "";
		// parameter<m_s>      BikeSpeed                                 := BikingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km], Descr = "";
		// parameter<m_s>      E_BikeSpeed                               := E_BikingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km], Descr = "";
		parameter<km_hr>    MaxCarSpeed                               := 130[km_hr], Descr = "Alleen relevant bij OSM";
		parameter<km_hr>    MaxCarSpeed_limit                         := 100[km_hr], Descr = "Bijvoorbeeld bij 100kmpu op snelwegen overdag. Alleen relevant bij OSM";
		// parameter<km_hr>    PedestrianDefaultSpeed                    := WalkingSpeed_kmhr, Descr = "";
		// parameter<km_hr>    BikeDefaultSpeed                          := BikingSpeed_kmhr, Descr = "";
		// parameter<km_hr>    E_BikeDefaultSpeed                        := E_BikingSpeed_kmhr, Descr = "";
		parameter<km_hr>    CarDefaultSpeed                           := 50[km_hr], Descr = "";
		parameter<km_hr>    CarDefaultSpeed_low                       := 30[km_hr], Descr = "";
		parameter<km_hr>    Ferry_Speed                               := 25[km_hr], Descr = "";
		parameter<bool>     InterpretAllRoadsAsBidirectional          := FALSE, Descr = "";                          //Should car(!) roads be interpreted as bidirectional, or should the OneDirection property be guiding?
		parameter<string>   DestSet_string                            := Create_Symmetric_fullOD 
																		? lowercase(Orgset) 
																		: Dests_geclusterd 
																			? lowercase(Destset) + '_' + lowercase(Dest_location_scale)
																			: lowercase(Destset), Descr = "";
		parameter<string>   Orgset_str                                := Getiled_berekenen ? lowercase(Orgset)+'_per'+lowercase(Regio_voor_Tiling) : lowercase(Orgset), Descr = "";    //'PC6_domain_corop'; //'PC6full' 'PC6sub' 'PC4full' 'PC4sub' PC6sub_MRA PC6sub_Pijp Point100m LocatiesMachiel Buurtsub_MRA  //org punten selectie
		unit<uint32>        Regio                                     := =Getiled_berekenen 
																		? 'RegioIndeling' 
																		: 'SourceData/RegioIndelingen/NL', Descr = ""; // Als je getiled wilt rekenen, zorgt dit dat je verwijst naar die tiling, of naar heel NL in één keer.
		unit<uint32>        RegioIndeling                             := ='SourceData/RegioIndelingen/'+Regio_voor_Tiling, Descr = "";
		
		
		
		unit<uint8> OV_Voortransport_Typen : nrofrows = 2 
		, Descr = ""
		{
			attribute<TimeInvariantTypes> TimeInvariantTypes_rel := 
				union_data(.,
					 TimeInvariantTypes/V/Org2Stops_Walking
					// ,TimeInvariantTypes/V/Org2Stops_Cycling
					// ,TimeInvariantTypes/V/Org2TMT_Stops_Cycling
					,TimeInvariantTypes/V/Org2Tic_Stops_Cycling
				);
			attribute<string> name    := TimeInvariantTypes/name[TimeInvariantTypes_rel];
			attribute<min_f>  MaxTime := TimeInvariantTypes/MaxTime[TimeInvariantTypes_rel];
		}
		unit<uint8> OV_Natransport_Typen : nrofrows = 2 
		, Descr = ""
		{
			attribute<TimeInvariantTypes> TimeInvariantTypes_rel :=
				union_data(.,
					 TimeInvariantTypes/V/Stops2Dest_Walking
					// ,TimeInvariantTypes/V/Stops2Dest_Cycling
					,TimeInvariantTypes/V/OVF_Stops2Dest_Cycling
				);
			attribute<string> name    := TimeInvariantTypes/name[TimeInvariantTypes_rel];
			attribute<min_f>  MaxTime := TimeInvariantTypes/MaxTime[TimeInvariantTypes_rel];
		}
		
		
		unit<uint8> OV_Reis_vertrek_uren : nrofrows = 1 
		, Descr = ""
		{
			attribute<uint32> values : [7];
			// attribute<uint32> values : [7,8,12,13,21,22]; // 6 stuks
		}
		unit<uint8> OV_Reis_vertrek_minuten : nrofrows = 2
		, Descr = ""
		{
			// attribute<uint32> values : [0]; 
			attribute<uint32> values : [0,30]; 
			// attribute<uint32> values : [0,5,10,15,20,25,30,35,40,45,50,55];  //12 stuks
		}
		
		unit<uint8>  AnalyseMomentPresets : nrofrows = 9
		, Descr = ""
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// name, OSM date , Regios, OSM_perProv, CarCongestionSpeed_date_TomTom
				[
				'Y2012','20221201', '2012', 'TRUE',  'yr2021_12', //20140101
				'Y2013','20140101', '2022', 'FALSE', 'yr2021_12',
				'Y2018','20190101', '2020', 'FALSE', 'yxx2021_12',
				'Y2020','20200117', '2020', 'FALSE', 'yr2021_12',
				'Y2021','20211221', '2021', 'TRUE',  'yr2021_12',
				'Y2022','20221201', '2022', 'TRUE',  'yr2022_12',
				'Y2023','20240524', '2023', 'TRUE',  'yr2023_12', //20240524
				'Y2024','20240524', '2024', 'TRUE',  'yr2024_12', //20240524
				'Y2025','20240524', '2024', 'TRUE',  'yr2024_12'  //20240524
				];
			}
			
			attribute<string>        name                    := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
			attribute<string>        OSM_file_date           := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
			attribute<string>        RegioIndelingen_jaar    := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
			attribute<bool>          OSM_NL_prov             := Elements/Text[value(UInt32(ID(.))* nrAttr + 3, Elements)][bool];
			attribute<string>        CarCongestionSpeed_date := Elements/Text[value(UInt32(ID(.))* nrAttr + 4, Elements)];
			
			parameter<uint32> nrAttr := 5;
		}
	
		unit<uint32> org_domain_list : nrofrows = 20 // Hier worden de paden voor elke org set opgegeven. En wanneer er nieuwe bij komen dat hier ook toegevoegd worden.
		, Descr = ""
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// Label, Path
				[
				'Buurt'                               ,'SourceData/RegioIndelingen/Buurt/Centroiden',
				'Buurt_perProvincie'                  ,'SourceData/RegioIndelingen/Buurt/Per_Prov/@REGIO@/sub',
				'Buurt_perCOROP'                      ,'SourceData/RegioIndelingen/Buurt/Per_COROP/@REGIO@/sub',
				'Buurt_enkele_buurt'                  ,'SourceData/RegioIndelingen/Buurt/Enkele_buurt',
				'Buurt_enkele_Gemeente'               ,'SourceData/RegioIndelingen/Buurt/Enkele_Gemeente',
				'Buurt_enkele_Prov'                   ,'SourceData/RegioIndelingen/buurt/Enkele_Prov',
				'Buurt_enkele_Corop'                  ,'SourceData/RegioIndelingen/buurt/Enkele_Corop',
				
				'Wijk'                                ,'SourceData/RegioIndelingen/Wijk/Centroiden',
				'Wijk_perProvincie'                   ,'SourceData/RegioIndelingen/Wijk/Per_Prov/@REGIO@/sub',
				'Wijk_perCOROP'                       ,'SourceData/RegioIndelingen/Wijk/Per_COROP/@REGIO@/sub',
				
				'Gemeente'                            ,'SourceData/RegioIndelingen/Gemeente/Centroiden',
				'Gemeente_perProvincie'               ,'SourceData/RegioIndelingen/Gemeente/Per_Prov/@REGIO@/sub',
				'Gemeente_perCOROP'                   ,'SourceData/RegioIndelingen/Gemeente/Per_COROP/@REGIO@/sub',
				'Gemeente_enkele_gemeente'            ,'SourceData/RegioIndelingen/Gemeente/Enkele_gemeente',
				
				'PC4'                                 ,'SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids',
				'PC4_perCOROP'                        ,'SourceData/BAG/Adressen/Woon_Voorraad/PC4_centroids/Per_COROP/@REGIO@/sub',
				
				'PC6'                                 ,'SourceData/BAG/Adressen/Woon_Voorraad/PC6_centroids',
				'PC6_sub'                             ,'SourceData/BAG/Adressen/Woon_Voorraad/PC6_centroids/sub',
				
				'BAG_woonpanden'                      ,'SourceData/BAG/Panden/pand/pand_woon_vbo',
				'BAG_woonpanden_Clustered'            ,'SourceData/BAG/Panden/pand/pand_woon_vbo/HeeftPanden'
				]; 
			}
			
			attribute<uint32>        id              := id(.);
			attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
			attribute<string>        path           := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)], DialogType = "LabelText";
			
			parameter<uint32> nrAttr := 2;
		}
		
		unit<uint32> dest_domain_list : nrofrows = 4 // Hier worden de paden voor elke dest set opgegeven. En wanneer er nieuwe bij komen dat hier ook toegevoegd worden.
		, Descr = ""
		{ 
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// Label, Path
				[
				 'LISA'                                                           ,'SourceData/locaties/LISA/ReadFSS/y@LISAJAAR@/PerYear/HeeftBanen'                                                  , 'nr_banen'
				,'Buurt'                                                          ,'SourceData/RegioIndelingen/Buurt/Centroiden'                                                                      , 'nr_banen'
				,'Buurt_enkele_Buurt'                                             ,'SourceData/RegioIndelingen/Buurt/Enkele_buurt_Dest'                                                               , 'nr_banen'
				,'Buurt_enkele_Corop'                                             ,'SourceData/RegioIndelingen/Buurt/Enkele_Corop'                                                                    , 'nr_banen'
				]; 
			}
			
			attribute<uint32>        id                := id(.);
			attribute<string>        label             := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)];
			attribute<string>        path              := replace(Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)], '@LISAJAAR@', LISA_jaar), DialogType = "LabelText";
			attribute<string>        items_of_interest := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
			
			parameter<uint32> nrAttr := 3;
		}
		
		unit<uint8> CongestionTimes : nrofrows = 3
		, Descr = ""
		{
			attribute<string> name : ['MorningRush','NoonRush','LateEveningRush'];
			attribute<string> Time : ['0730', '1230', '1930'];
		}
		
		container Distance_decay //distance decay parameters, calculated and provided by PBL
		: Descr = ""
		{
			parameter<float32> car_a   := -8.65786f;
			parameter<float32> car_b   := 2.492099f;
			parameter<float32> car_c   := 0.011641f;
			parameter<float32> bike_a  := -7.95686f;
			parameter<float32> bike_b  := 2.675059f;
			parameter<float32> bike_c  := 0.011981f;
			parameter<float32> ov_a    := -12.3301f;
			parameter<float32> ov_b    := 2.907621f;
			parameter<float32> ov_c    := 0.012824f;
		}
	
		
		container Junction_Penalties
		: Descr = "bij het reizen over door een netwerk kun je meestal niet zonder vertraging voorbij een kruispunt komen. Daarom geven we hiervoor een penalty afhankelijk van het aantal benen van het kruispunt." 
		{
			parameter<s>        with_2Links_Pedestrian               := 0[s]; // 0
			parameter<s>        with_3Links_Pedestrian               := 2[s]; // 1
			parameter<s>        with_4Links_Pedestrian               := 5[s]; // 2
			parameter<s>        with_gt4Links_Pedestrian             := 6[s]; // 3
			
			parameter<s>        with_2Links_Bike                     := 0[s]; // 0
			parameter<s>        with_3Links_Bike                     := 2[s]; // 1
			parameter<s>        with_4Links_Bike                     := 5[s]; // 2
			parameter<s>        with_gt4Links_Bike                   := 6[s]; // 3
			
			parameter<s>        with_2Links_E_Bike                   := 0[s]; // 0
			parameter<s>        with_3Links_E_Bike                   := 2[s]; // 1
			parameter<s>        with_4Links_E_Bike                   := 5[s]; // 2
			parameter<s>        with_gt4Links_E_Bike                 := 6[s]; // 3
			
			parameter<s>        with_2Links_Car                      := 0[s]; // 0
			parameter<s>        with_3Links_Car                      := 2[s]; // 2
			parameter<s>        with_4Links_Car                      := 5[s]; // 5
			parameter<s>        with_gt4Links_Car                    := 6[s]; // 6
			
			parameter<s>        with_2_lowerSpeedLinks_Pedestrian    := 0[s]; // 0
			parameter<s>        with_3_lowerSpeedLinks_Pedestrian    := 0[s]; // 1
			parameter<s>        with_4_lowerSpeedLinks_Pedestrian    := 0[s]; // 2
			parameter<s>        with_gt4_lowerSpeedLinks_Pedestrian  := 0[s]; // 3
			
			parameter<s>        with_2_lowerSpeedLinks_Bike          := 0[s]; // 0
			parameter<s>        with_3_lowerSpeedLinks_Bike          := 0[s]; // 1
			parameter<s>        with_4_lowerSpeedLinks_Bike          := 0[s]; // 2
			parameter<s>        with_gt4_lowerSpeedLinks_Bike        := 0[s]; // 3
			
			parameter<s>        with_2_lowerSpeedLinks_E_Bike        := 0[s]; // 0
			parameter<s>        with_3_lowerSpeedLinks_E_Bike        := 0[s]; // 1
			parameter<s>        with_4_lowerSpeedLinks_E_Bike        := 0[s]; // 2
			parameter<s>        with_gt4_lowerSpeedLinks_E_Bike      := 0[s]; // 3
			
			parameter<s>        with_2_lowerSpeedLinks_Car           := 0[s]; // 0
			parameter<s>        with_3_lowerSpeedLinks_Car           := 0[s]; // 2
			parameter<s>        with_4_lowerSpeedLinks_Car           := 0[s]; // 5
			parameter<s>        with_gt4_lowerSpeedLinks_Car         := 0[s]; // 6
		}
		
		container OSM_impl
		: Descr = ""
		{
			unit<uint32> InEenBestand : nrofrows = 4
			{
				unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
				{
					attribute<String> Text:
					// Regio             , OrgSet , OrgPath, Land, Type, 
					[
					'Netherlands'             ,'NL', 'OD',

					'Belgium'                 ,'BE', 'OD',

					'Niedersachsen'           ,'DE', 'OD',
					'Nordrhein-Westfalen'     ,'DE', 'OD'
					]; 
				}
				
				attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)], DialogType = "LabelText";
				attribute<string>        name           := replace(label, '-', '_');
				attribute<string>        Country        := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
				attribute<string>        Type_src       := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
				
				parameter<uint32> nrAttr := 3;
			}
			unit<uint32> InProvincies : nrofrows = 17
			{
				unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
				{
					attribute<String> Text:
					// Regio             , OrgSet , OrgPath, Land, Type, 
					[
					'Drenthe'                 ,'NL', 'OD',
					'Flevoland'               ,'NL', 'OD',
					'Friesland'               ,'NL', 'OD',
					'Gelderland'              ,'NL', 'OD',
					'Groningen'               ,'NL', 'OD',
					'Limburg'                 ,'NL', 'OD',
					'Noord-Brabant'           ,'NL', 'OD',
					'Noord-Holland'           ,'NL', 'OD',
					'Overijssel'              ,'NL', 'OD',
					'Utrecht'                 ,'NL', 'OD',
					'Zeeland'                 ,'NL', 'OD',
					'Zuid-Holland'            ,'NL', 'OD',

					'Belgium'                 ,'BE', 'OD',

					'Niedersachsen'           ,'DE', 'OD',
					'Duesseldorf-regbez'       ,'DE', 'OD',
					'Koeln-regbez'             ,'DE', 'OD',
					'Muenster-regbez'          ,'DE', 'OD'
					]; 
				}
				
				attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)], DialogType = "LabelText";
				attribute<string>        name           := replace(label, '-', '_');
				attribute<string>        Country        := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
				attribute<string>        Type_src       := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
				
				parameter<uint32> nrAttr := 3;
			}
		}
		
		unit<uint32> SampleDay := select_with_attr_by_org_rel(Time, Time/Day = 0) //Hier worden de analyse tijdstippen opgegeven. LET OP: Verander je deze dan zul je ook de NDW_meetmomenten/time moeten aanpassen. En de ChosenMoments ook wanneer er meer/minder momenten opgegeven zijn.
		, Descr = ""
		{
			attribute<bool>    ChosenMoments   := =AsList(HoursMinutes/str,' || ');
			attribute<Time>    Time_rel        := org_rel;
			unit<uint8> ChosenHours    := OV_Reis_vertrek_uren;
			unit<uint8> ChosenMinutes  := OV_Reis_vertrek_minuten;
			unit<uint8> HoursMinutes   := combine_uint8(ChosenHours, ChosenMinutes)
			{
				attribute<uint32> Hours     := ChosenHours/values[first_rel];
				attribute<uint32> Minutes   := ChosenMinutes/values[second_rel];
				attribute<string> str       := '(hour == '+string(Hours)+' && minute == '+string(Minutes)+' && second == 0)';
			}
		}
		
		unit<uint32> MeasureMoments := select_with_attr_by_cond(SampleDay, SampleDay/ChosenMoments)
		, Descr = ""
		{
			attribute<Time>    Moment := Time_rel;
			attribute<string>  Name   := Time/TemplatableText[Moment];
		}
	}
}
