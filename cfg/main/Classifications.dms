container Classifications: Using = "Units"
{
	unit<uint32> OD_Modes : NrOfRows = 6
	{
		unit<uint32> Matrix := Range(uint32, 0, nrAttr*#.)
		{
			attribute<string> Values: 
			[
			'NS-kort'    , 'Rail'    ,'Nk',
			'NS-lang'    , 'Rail'    ,'Nl',
			'Niet-NS-OV' , ''        ,'R', //een groep waarin het opstaptarief blijft gelden bij overstappen (en je mits 30min overstapt). e.g. 1.08 euro voor bus betalen en daarna 'gratis' op de metro stappen.
			'Transfer'   , 'Walking' ,'T',
			'Walking'    , 'Walking' ,'W',
			'Cycling'    , 'Cycling' ,'C'
			];
		}
		
		// Ketens: https://github.com/ObjectVision/NetworkModel_PBL/issues/31
		
		attribute<string>               Label         := Matrix/Values[value(id(.)* nrAttr + 0, Matrix)];
		attribute<string>               Mode          := Matrix/Values[value(id(.)* nrAttr + 1, Matrix)];
		attribute<GTFS_Modes/Selectie>  Mode_rel      := rlookup(Mode, GTFS_Modes/Selectie/name);
		attribute<string>               Name          := AsItemName(label);
		
		container V := for_each_nedv(Name, String(ID(.))+'[..]', void, .);
		parameter<uint32> nrAttr := 3;
	}
	
	unit<uint32> ToegestaneKetens 
	{
	
	
	}
	
	
	
	
	
	unit<uint8> TimeInvariantTypes := combine_uint8(TimeInvariant_ConnectionTypes, TimeInvariant_Modes)
	{
		attribute<string> ConnectionType := TimeInvariant_ConnectionTypes/name[first_rel];
		attribute<string> Mode           := TimeInvariant_Modes/Name[second_rel];
		attribute<string> Mode_abbrev    := TimeInvariant_Modes/Name_abbrev[second_rel];
		attribute<string> NetworkType    := TimeInvariant_Modes/NetworkType[second_rel];
		attribute<string> OriginSet      := TimeInvariant_ConnectionTypes/OriginSet[first_rel];
		attribute<string> DestinationSet := TimeInvariant_ConnectionTypes/DestinationSet[first_rel];
		attribute<string> Label          := ConnectionType + '_' + Mode;
		attribute<string> Name           := AsItemName(label);
		attribute<string> Name_short     := ConnectionType + '_' + Mode_abbrev;
		
		container V := for_each_nedv(Name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> TimeInvariant_ConnectionTypes : NrOfRows = 2
	{
		attribute<string> Label          := OriginSet + '2' + DestinationSet;
		attribute<string> OriginSet      : ['Org',  'Stops'];
		attribute<string> DestinationSet : ['Stops', 'Dest'];
		attribute<string> Name           := AsItemName(label);
	}
	unit<uint8> TimeInvariant_Modes : NrOfRows = 2
	{
		attribute<string> Label       : ['Walking', 'Cycling'];
		attribute<string> Name_abbrev : ['W','B'];
		attribute<string> Name        := AsItemName(label);
		attribute<string> NetworkType : ['Pedestrian', 'Bike'];
	}

	#include<modes.dms>
	#include<lisa.dms>
	#include<osm.dms>
	#include<LandUse.dms>
	
	unit<uint32> Directions_TomTom : NrOfRows = 4
	{
		attribute<string> code: ['','N','FT','TF'];
		attribute<string> Label: ['dual', 'nocars', 'forwards', 'backwards'];
		
		container V := for_each_nedv(Label, String(ID(.))+'[..]', void, .);
	}
	unit<uint32> Directions_OSM : NrOfRows = 3
	{
		attribute<string> code: ['B','F','T'];
		attribute<string> Label: ['dual', 'forwards', 'backwards'];
		
		container V := for_each_nedv(Label, String(ID(.))+'[..]', void, .);
	}

	unit<uint8> FuncRoadClass_EK := range(uint8, 0b, 9b);
	unit<uint8> FuncRoadClass : nrofrows = 10
	{
		attribute<string> Label : ['Not Applicable', 'Motorway, Freeway, or Other Major Road', 'Major Road Less Important than a Motorway', 'Other Major Road','Secondary Road','Local Connecting Road','Local Road of High Importance','Local Road','Local Road of Minor Importance','Other Road'];
		attribute<string> name := AsItemName(label);
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint32> LinkTypes: NrOfRows = 7
	{
		attribute<string> Name     : ['Undefined','Scheduled','Transfer','Stop_to_Dest','Org_to_Stop','Waiting_at_Stop','Waiting_at_Org'];
		attribute<string> Label    := Name;
		attribute<uint32> PenColor : [rgb(128,128,128), rgb(200,0,0), rgb(129,129,0), rgb(0,0,128),rgb(0,0,255), rgb(128,128,128), rgb(128,128,128)], DialogType = "PenColor";
		attribute<int16>  PenStyle : [4,0,1,2,2,0], DialogType = "PenStyle";
		
		container v := for_each_nedv(Name, string(id(.)), void, .);
	}
	
	unit<uint32> Agencies := unique(lowercase(SourceData/Infrastructuur/GTFS/LoadFeeds/ReadFSS/Agency/data/agency_name))
	{
		attribute<string> name  := AsItemName(values);
		attribute<string> label := values;
		
		attribute<bool>   IsForeign := name == 'de_lijn' || name == 'db'  || name == 'eurobahn' || name == 'niag' || name == 'nmbs' || name == 'vias' || name == 'ns_international' || name == 'eu_sleeper';
						//vervoerders die wel in GTFS zitten maar niet in deze lijst zijn niet opgenomen omdat ze in het buitenland opereren (De Lijn, DB, Eurobahn, NIAG, NMBS, VIAS)

		container V := for_each_nedv(Name, string(id(.)), void, .);
	}
	
	unit<uint8> ImpedanceTypes : nrofrows = 10
	{
		attribute<string> name : ['max_pedestrian','max_bike','max_e_bike','max_car','max_limit_car','congested_morning_car','congested_noon_car','congested_late_car','congested_bike','congested_e_bike'];
	}
	
	unit<uint8> pand_status : nrofrows = 10
	{
		attribute<string>    label     : ['Bouw gestart','Bouwvergunning verleend','Niet gerealiseerd pand','Pand buiten gebruik','Pand gesloopt','Pand in gebruik','Pand in gebruik (niet ingemeten)','Sloopvergunning verleend','Pand ten onrechte opgevoerd','Verbouwing pand'], DialogType = "LabelText";
		attribute<string>    name      := replace(label, ' ', '_', '-', '_', '(', '', ')', '');
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> vbo_status : nrofrows = 8
	{
		attribute<string>    label     : ['Niet gerealiseerd verblijfsobject','Verblijfsobject buiten gebruik','Verblijfsobject gevormd','Verblijfsobject in gebruik','Verblijfsobject in gebruik (niet ingemeten)','Verblijfsobject ingetrokken','Verblijfsobject ten onrechte opgevoerd', 'Verbouwing verblijfsobject'], DialogType = "LabelText";
		attribute<string>    name      := replace(label, ' ', '_', '-', '_', '(', '', ')', '');
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	unit<uint8> vbo_gebruiksdoel: nrofrows = 11
	{
		attribute<uint8> ID := ID(.);
		attribute<string> label:
		[
			'bijeenkomstfunctie',
			'celfunctie',
			'gezondheidszorgfunctie',
			'industriefunctie',
			'kantoorfunctie',
			'logiesfunctie',
			'onderwijsfunctie',
			'overige gebruiksfunctie',
			'sportfunctie',
			'winkelfunctie',
			'woonfunctie'
		];
		
		attribute<string> name := replace(replace(label,' ','_'), 'functie','');
		attribute<uint32> BrushColor:  DialogType = "BrushColor",[rgb(255,255,255), rgb(  0,129,  0),rgb(  0,  0,255),rgb(255,220,  0),rgb(255,  0,  0)];
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<uint8> WPSrc: nrofrows = 6
	{
		attribute<string> label :  ['geen woonpand','vrijstaand','twee onder 1 kap','hoekwoning','tussenwoning','appartement'], DialogType = "LabelText";
		attribute<string> name := replace(label, ' ', '_');
		// attribute<WP>  WP_rel :  [0,1,2,3,3,4];
		// attribute<WP3> WP3_rel :  [0,1,1,1,1,2];
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
}