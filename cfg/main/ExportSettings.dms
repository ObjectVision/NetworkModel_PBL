container ExportSettings: url = "='#'+ExportSettings/Docdata +'/ExportSettings.adms'"
{
	// container SvnImpl
	// {
		// parameter<String> RevisionInfoCmd := Replace(Expand(., 'SubWCRev %projDir% > %projDir%/SubWCRevData.str'), '/', '\\');
		// parameter<uint32> WriteCode := exec_ec(Expand(., '%env:ComSpec%'), '/c ' + RevisionInfoCmd, Expand(., '%projdir%'));
	// }
	
	container MetaInfo 
	{
		parameter<string> FileName : ='%storageBaseName%.xml';
		parameter<string> FileType : ='xml'; // default is 'ini' but ini files cannot be used well to store multi-line properties such as error messages of inproperly configured properties
		
		container Contents
		{
			container Software
			{
				parameter<string> GeoDmsVersion: [ '=string(GeoDmsVersion())' ];
			}
			container Config
			{
				parameter<string> FullName := '=PropValue(this, '+Quote('FullName')+')';
				parameter<string> Expr     := '=PropValue(this, '+Quote('Expr'    )+')';
			}
			container Environment
			{
				parameter<string> Processor    := expand(., '%env:PROCESSOR_IDENTIFIER%');
				parameter<string> User         := expand(., '%env:USERNAME%');
				parameter<string> ComputerName := expand(., '%env:COMPUTERNAME%');
			}
			// container Svn
			// {
				// parameter<string> RevisionInfo: Storagename = "=(SvnImpl/WriteCode==0)?'%projDir%/SubWCRevData.str':'Error '+String(SvnImpl/WriteCode)+' while producing %projDir%/SubWCRevData.str'";
			// }
			
			container Parameters
			{
				parameter<string>  GTFS_file_date                          := string(ModelParameters/GTFS_file_date);
				parameter<string>  OSM_file_date                           := string(ModelParameters/OSM_file_date);
				parameter<string>  NWB_file_date                           := string(ModelParameters/NWB_file_date);
				parameter<string>  NDW_file_date                           := string(ModelParameters/NDW_file_date);
				parameter<string>  LISA_jaar                               := string(ModelParameters/LISA_jaar);
				parameter<string>  RegioIndelingen_jaar                    := string(ModelParameters/RegioIndelingen_jaar);
				parameter<string>  CarCongestionSpeed_date                 := string(ModelParameters/CarCongestionSpeed_date);
				parameter<string>  Analysis_date                           := string(ModelParameters/Analysis_date);
				parameter<string>  CongestionSpeed_DaygroupSelection       := string(ModelParameters/CongestionSpeed_DaygroupSelection);
				parameter<string>  Orgset                                  := string(ModelParameters/Orgset);
				parameter<string>  Destset                                 := string(ModelParameters/Destset);
				parameter<string>  Dests_geclusterd                        := string(ModelParameters/Dests_geclusterd);
				parameter<string>  Orgset_EnkeleBuurt_selectie             := string(ModelParameters/Orgset_EnkeleBuurt_selectie);
				parameter<string>  Orgset_EnkeleProv_selectie              := string(ModelParameters/Orgset_EnkeleProv_selectie);
				parameter<string>  Arrival_or_Departure_at_time            := string(ModelParameters/Arrival_or_Departure_at_time);
				parameter<string>  MaxTransferDistKm                       := string(ModelParameters/MaxTransferDistKm);
				parameter<string>  MaxODconn                               := string(ModelParameters/MaxODconn);
				parameter<string>  MaxWalkingTime_Org2Stop                 := string(ModelParameters/MaxWalkingTime_Org2Stop);
				parameter<string>  MaxWalkingTime_Stop2Dest                := string(ModelParameters/MaxWalkingTime_Stop2Dest);
				parameter<string>  MaxBikingTime_Org2Stop                  := string(ModelParameters/MaxBikingTime_Org2Stop);
				parameter<string>  MaxBikingTime_Stop2Dest                 := string(ModelParameters/MaxBikingTime_Stop2Dest);
				parameter<string>  MaxPedestrianTime_Org2Dest              := string(ModelParameters/MaxPedestrianTime_Org2Dest);
				parameter<string>  MaxBikeTime_Org2Dest                    := string(ModelParameters/MaxBikeTime_Org2Dest);
				parameter<string>  MaxOVTime                               := string(ModelParameters/MaxOVTime);
				parameter<string>  MaxCarTime                              := string(ModelParameters/MaxCarTime);
				parameter<string>  OngelijkvloersPenalty                   := string(ModelParameters/OngelijkvloersPenalty);
				parameter<string>  UseActualBikeSpeeds                     := string(ModelParameters/UseActualBikeSpeeds);
				parameter<string>  Fietstel_OSM_link_dist                  := string(ModelParameters/Advanced/Fietstel_OSM_link_dist);
				parameter<string>  Dest_location_scale                     := string(ModelParameters/Advanced/Dest_location_scale);
				parameter<string>  TransferEffectiveSpeed                  := string(ModelParameters/Advanced/TransferEffectiveSpeed);
				parameter<string>  ConnectSearchDist                       := string(ModelParameters/Advanced/ConnectSearchDist);
				parameter<string>  WegingWachttijdThuisVoortransport       := string(ModelParameters/Advanced/WegingWachttijdThuisVoortransport);
				parameter<string>  NumberOfItersForNetworkCleanUp          := string(ModelParameters/Advanced/NumberOfItersForNetworkCleanUp);
				parameter<string>  WalkingSpeed_kmhr                       := string(ModelParameters/Advanced/WalkingSpeed_kmhr);
				parameter<string>  BikingSpeed_kmhr                        := string(ModelParameters/Advanced/BikingSpeed_kmhr);
				parameter<string>  E_BikingSpeed_kmhr                      := string(ModelParameters/Advanced/E_BikingSpeed_kmhr);
				parameter<string>  E_BikingSpeed_actualspeed_addition_kmhr := string(ModelParameters/Advanced/E_BikingSpeed_actualspeed_addition_kmhr);
				parameter<string>  MaxCarSpeed                             := string(ModelParameters/Advanced/MaxCarSpeed);
				parameter<string>  MaxCarSpeed_limit                       := string(ModelParameters/Advanced/MaxCarSpeed_limit);
				parameter<string>  CarDefaultSpeed                         := string(ModelParameters/Advanced/CarDefaultSpeed);
				parameter<string>  CarDefaultSpeed_low                     := string(ModelParameters/Advanced/CarDefaultSpeed_low);
				parameter<string>  Ferry_Speed                             := string(ModelParameters/Advanced/Ferry_Speed);
				parameter<string>  PrivateTransport_nr_balancing_iter      := string(ModelParameters/Advanced/PrivateTransportSettings/nr_balancing_iter);
				parameter<string>  PrivateTransport_nr_imp_iter            := string(ModelParameters/Advanced/PrivateTransportSettings/nr_imp_iter);
				parameter<string>  PrivateTransport_imp_margin             := string(ModelParameters/Advanced/PrivateTransportSettings/imp_margin);
				parameter<string>  PrivateTransport_imp_step               := string(ModelParameters/Advanced/PrivateTransportSettings/imp_step);
				parameter<string>  Distance_decay_car_a                    := string(ModelParameters/Advanced/Distance_decay/car_a);
				parameter<string>  Distance_decay_car_b                    := string(ModelParameters/Advanced/Distance_decay/car_b);
				parameter<string>  Distance_decay_car_c                    := string(ModelParameters/Advanced/Distance_decay/car_c);
				parameter<string>  Distance_decay_bike_a                   := string(ModelParameters/Advanced/Distance_decay/bike_a);
				parameter<string>  Distance_decay_bike_b                   := string(ModelParameters/Advanced/Distance_decay/bike_b);
				parameter<string>  Distance_decay_bike_c                   := string(ModelParameters/Advanced/Distance_decay/bike_c);
				parameter<string>  Distance_decay_ov_a                     := string(ModelParameters/Advanced/Distance_decay/ov_a);
				parameter<string>  Distance_decay_ov_b                     := string(ModelParameters/Advanced/Distance_decay/ov_b);
				parameter<string>  Distance_decay_ov_c                     := string(ModelParameters/Advanced/Distance_decay/ov_c);
				parameter<string>  NDW_meetmomenten                        := AsList(ModelParameters_base/Advanced/NDW_meetmomenten/date/VALUE,',');
			}
		}
	}
}