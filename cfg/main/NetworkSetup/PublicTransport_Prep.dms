container PublicTransport_Prep
{
	container impl
	{
		unit<uint32> org := =Org_domain
		{
			attribute<rdc>                   geometry       := =impl/Org_domain+'/geometry';
			attribute<string>                name           := =impl/Org_domain+'/name';
			attribute<float32>               nr_inwoners    := =impl/Org_domain+'/nr_inwoners[float32]';
		}
		
		unit<uint32> dest := =Advanced/Create_Symmetric_fullOD ? 'org' : 'impl/dest_src'
		{
			attribute<rdc>                   geometry       := =Advanced/Create_Symmetric_fullOD ? 'org/geometry' : 'impl/dest_src/geometry';
		}
		
		parameter<string> Org_domain        := rjoin(lowercase(ModelParameters/Orgset),  lowercase(Advanced/org_domain_list/label),  Advanced/org_domain_list/path);
		parameter<string> Dest_domain       := rjoin(lowercase(ModelParameters/DestSet), lowercase(Advanced/dest_domain_list/label), Advanced/dest_domain_list/path);
		
		unit<uint32> dest_src := =Dest_domain
		{
			attribute<uint32>                nr_items_of_interest := =Dest_domain+'/'+Advanced/items_of_interest;
			attribute<rdc>                   geometry             := =Dest_domain+'/geometry';
			attribute<string>                name                 := =Dest_domain+'/name';
			attribute<string>                label                := =Dest_domain+'/label';
		}
		
		parameter<string>   PT_path_str           := 'SourceData/Infrastructuur/GTFS/PublicTransportNet'; 
		unit<uint32>        PT_net                := =PT_path_str+''; //indirection, want dan kun je die later gebruiken in een select_with_attr_by_cond waarbij alle attributen worden opgehaald.
		
		// unit<uint32>        AllPlaces             := union_unit(PT_net/SL_Places, org, dest)
		unit<uint32>        Places             := union_unit(PT_net/SL_Places, org, dest)
		, Descr = "All stops, orgs and dests"
		{
			attribute<rdc>              geometry      := union_data(., PT_net/SL_Places/geometry, org/geometry, dest/geometry);
			attribute<string>           label         := union_data(., PT_net/SL_Places/label, org/label, dest/label);
			attribute<org>              Origin_rel    := union_data(., const(null_u, PT_net/SL_Places), id(org), const(null_u, dest));
			attribute<dest>             Dest_rel      := union_data(., const(null_u, PT_net/SL_Places), const(null_u, org), id(dest));
			attribute<PT_net/SL_Places> SL_Places_rel := union_data(., id(PT_net/SL_Places), const(null_u, org), const(null_u, dest));
			attribute<Stops>            Stop_rel      := PT_net/SL_Places/Stop_rel[SL_Places_rel];
		// }	
		
		// unit<uint32>        Places                := unique(AllPlaces/geometry)
		// , Descr = "unique places"
		// {
			// attribute<rdc>                                     geometry        := values;
			// attribute<AllPlaces>                               AllPlaces_rel   := rlookup(geometry, AllPlaces/geometry);
			// attribute<string>                                  label           := AllPlaces/label[AllPlaces_rel];
			// attribute<org>                                     Origin_rel      := AllPlaces/Origin_rel[AllPlaces_rel];
			// attribute<dest>                                    Dest_rel        := AllPlaces/Dest_rel[AllPlaces_rel];
			// attribute<org>                                     Origin_rel      := rlookup(geometry, org/geometry);
			// attribute<dest>                                    Dest_rel        := rlookup(geometry, dest/geometry);
			// attribute<Stops>                                   Stop_rel        := AllPlaces/Stop_rel[AllPlaces_rel];
			attribute<Infrastructuur/OVprijzen/NS/NS_stations> NS_Stations_rel := Stops/NS_Stations_rel[Stop_rel];
			attribute<TMT_Stops>                               TMT_Stop_rel    := invert(TMT_Stops/Place_rel);
			attribute<Tic_Stops>                               Tic_Stop_rel    := invert(Tic_Stops/Place_rel);
			attribute<T_Stops>                                 T_Stop_rel      := invert(T_Stops/Place_rel);
			
			attribute<Stops>                                   Stops_rel       := Stop_rel;
			attribute<T_Stops>                                 T_Stops_rel     := T_Stop_rel;
			attribute<Tic_Stops>                               Tic_Stops_rel   := Tic_Stop_rel;
			attribute<TMT_Stops>                               TMT_Stops_rel   := TMT_Stop_rel;
			attribute<OVF_Stops>                               OVF_Stops_rel   := invert(OVF_Stops/Place_rel);
			
			attribute<RegioIndelingen/CoropP> CoropP_rel := point_in_polygon(geometry, RegioIndelingen/CoropP/geometry);
		}
		
		unit<uint64> c_Time_Place_Routes   := combine_unit_uint64(c_Time_Places,Routes);
		unit<uint64> c_Time_Places         := combine_uint64(Time, Places)
		{
			attribute<string> Time_name  := Time/label[first_rel];
			attribute<string> Place_name := Places/label[second_rel];
			attribute<string> Label      := Place_name + ' @ ' + Time_name;
		}
		
		unit<uint32>        Stops                 := =PT_path_str+'/Stops'
		{
			attribute<string> name      := =PT_path_str+'/Stops/name';
			attribute<rdc>    geometry  := =PT_path_str+'/Stops/geometry';
			attribute<Places> Place_rel := rlookup(geometry, Places/geometry);
		}
		unit<uint32>        TMT_Stops              := select_with_attr_by_cond(Stops, Stops/Mode_rel == GTFS_Modes/Selectie/V/Rail || Stops/Mode_rel == GTFS_Modes/Selectie/V/Metro || Stops/Mode_rel == GTFS_Modes/Selectie/V/Tram);
		unit<uint32>        T_Stops                := select_with_attr_by_cond(Stops, Stops/Mode_rel == GTFS_Modes/Selectie/V/Rail);
		unit<uint32>        Tic_Stops              := select_with_attr_by_cond(Stops, Stops/IsNSICStation);
		unit<uint32>        OVF_Stops              := select_with_attr_by_cond(Stops, Stops/IsOVFietsStation);
		
		parameter<Time>     EersteVertrekMoment    := first(Advanced/MeasureMoments/Moment);
		parameter<Time>     LaatsteVertrekMoment   := last(Advanced/MeasureMoments/Moment);
		
		unit<uint32>        Routes                := =PT_path_str+'/Routes';
		unit<uint32>        NS_Stations            := SourceData/Infrastructuur/OVprijzen/NS/NS_Stations;
		unit<uint8>         Modes                  := GTFS_Modes/Selectie;
		unit<uint8>         PrijsTabel             := SourceData/Infrastructuur/OVprijzen/PrijsTabel;
		unit<uint32>        Provincie              := SourceData/RegioIndelingen/Provincie;
		unit<uint8>         Concessiegebied        := SourceData/RegioIndelingen/Concessiegebied;
		unit<uint32>        CoropP                 := SourceData/RegioIndelingen/CoropP;
		unit<uint32>        c_NS_start_end         := /SourceData/Infrastructuur/OVprijzen/NS/NS_tariefeenheden_matrix/c_NS_start_end;
		unit<uint32>        TariefEenhedenMatrix   := Infrastructuur/OVprijzen/NS/NS_tariefeenheden_matrix/ODMatrix;
		unit<uint32>        ToBeCalculated_Ketens  := /Classifications/Ketens/ToBeCalculated_Keten;
		unit<uint32>        Toegestane_Ketens      := /Classifications/Ketens/Keten/Toegestaan;
	} 


	unit<uint32> PTnet_prep := =impl/PT_path_str+''
	{
		attribute<bool>   IsSub_from := From_Time_rel >= impl/EersteVertrekMoment ;
		attribute<bool>   IsSub_to   := To_Time_rel   < (impl/LaatsteVertrekMoment + (convert(ModelParameters/MaxTravelTime, s_f)[Time]));
		attribute<bool>   IsSub_dur  := duration <= convert(ModelParameters/MaxTravelTime , s_f);
	}

	container Set_R := Get_Windowed_Agency_Set_T(' &&  '+impl/PT_path_str+'/Agency_rel != Agencies/V/ns &&  '+impl/PT_path_str+'/Duration > 0f'), Descr = "subset of public transport net for the relevant time windows and agency-set.", using = "impl";
	container Set_L := Get_Windowed_Agency_Set_T(' && ('+impl/PT_path_str+'/Agency_rel == Agencies/V/ns || ('+impl/PT_path_str+'/Mode_rel == impl/Modes/V/Waiting && IsDefined('+impl/PT_path_str+'/c_NS_start_end_rel))) && '+impl/PT_path_str+'/Duration > 0f');
	container Set_K := Get_Windowed_Agency_Set_T(' && ('+impl/PT_path_str+'/Agency_rel == Agencies/V/ns || ('+impl/PT_path_str+'/Mode_rel == impl/Modes/V/Waiting && IsDefined('+impl/PT_path_str+'/c_NS_start_end_rel))) && '+impl/PT_path_str+'/Duration > 0f && '+impl/PT_path_str+'/IsConnectedToNSkortStation');

	#include<MakeODs.dms>
	#include<Transfers.dms>

	container Keten_Generatie := 
		for_each_ne(impl/ToBeCalculated_Ketens/name
		, 	iif(impl/ToBeCalculated_Ketens/right == ''
			, 'OD_'+impl/ToBeCalculated_Ketens/left
			, 'KetenRijger_T('+impl/ToBeCalculated_Ketens/left+'/Result,'+impl/ToBeCalculated_Ketens/right+'/Result,Transfers/'+impl/ToBeCalculated_Ketens/transfer_name+'/Result, '+Quote(impl/ToBeCalculated_Ketens/Left)+','+Quote(impl/ToBeCalculated_Ketens/Right)+')' //e.g. er is een right 
			) 
		), using = "impl";

	unit<uint64> ToegestaneKetens := ='union_unit_uint64('+AsItemList('Keten_Generatie/'+impl/Toegestane_Ketens/name+'/Result')+')', using = "impl"
	{
		attribute<Toegestane_Ketens>    Toegestane_Keten_rel        := ='union_data(., '+AsList('const('+string(id(Toegestane_Ketens))+', Keten_Generatie/'+Toegestane_Ketens/name+'/Result)', ',')+')';
		attribute<c_Time_Places>        c_FromTime_Place_rel        := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/c_FromTime_Place_rel')+')';
		attribute<c_Time_Places>        c_ToTime_Place_rel          := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/c_ToTime_Place_rel')+')';
		attribute<ct>                   Price                       := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Price')+')';
		attribute<s>                    Traveltime                  := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveltime')+')';
		attribute<ct>                   Price_augm                  := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Price_augm')+')';
		attribute<uint32>               PriceTime_Score             := =ModelParameters/MinimiseCriterium == 'Price'
																		? 'value(Price_augm, uint32) * value(ModelParameters/MaxTravelTime[s], uint32) + value(Traveltime, uint32)'
																		: 'value(Traveltime, uint32) * 10000 + value(Price_augm, uint32)';
		#include<OD_uq_attributen.dms>
		
		attribute<dam>                  TravelDist_Bus              := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/TravelDist_Bus')+')';
		attribute<dam>                  Traveldist_Metro            := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveldist_Metro')+')';
		attribute<dam>                  Traveldist_Tram             := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveldist_Tram')+')';
		attribute<dam>                  Traveldist_Rail             := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveldist_Rail')+')';
		attribute<dam>                  Traveldist_Ferry            := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveldist_Ferry')+')';
		
		unit<uint64>          OD_key_set    := combine_unit_uint64(uq_c_FromTime_Place, uq_c_ToTime_Place);
		attribute<OD_key_set> OD_key        := combine_data(OD_key_set, uq_c_FromTime_Place_rel, uq_c_ToTime_Place_rel);
		unit<uint64>          uq_OD_key     := unique(OD_key);
		attribute<uq_OD_key>  uq_OD_key_rel := rlookup(OD_key, uq_OD_key/values); //attribuut om partitionering van price/traveltime etc te doen.
	} 
	
	unit<uint64> Write_Result := ToegestaneKetens/uq_OD_key
	, StorageName = "=StorageName_Str"
	, using = "impl;ToegestaneKetens"
	{ 
		attribute<ToegestaneKetens>     Min_Index                   := ='min_index(ToegestaneKetens/PriceTime_Score, ToegestaneKetens/uq_OD_key_rel)', DisableStorage = "true";
		attribute<ct>                   Price                       := Min_Index -> Price;
		attribute<ct>                   Price_augm                  := Min_Index -> Price_augm;
		attribute<s>                    Traveltime                  := Min_Index -> Traveltime;
		attribute<Toegestane_Ketens>    Toegestane_Keten_rel        := Min_Index -> Toegestane_Keten_rel;
		
		attribute<uq_c_FromTime_Place>  uq_c_FromTime_Place_rel     := value(uq_OD_key/values / #uq_c_ToTime_Place, uq_c_FromTime_Place), DisableStorage = "true";
		attribute<uq_c_ToTime_Place>    uq_c_ToTime_Place_rel       := value(uq_OD_key/values % #uq_c_ToTime_Place, uq_c_ToTime_Place), DisableStorage = "true";
		attribute<c_Time_Places>        c_FromTime_Place_rel        := uq_c_FromTime_Place/c_FromTime_Place_rel[uq_c_FromTime_Place_rel];
		attribute<c_Time_Places>        c_ToTime_Place_rel          := uq_c_ToTime_Place/c_ToTime_Place_rel[uq_c_ToTime_Place_rel];
		// attribute<Time>                 From_Time_rel            := value(c_FromTime_Place_rel / uint64(#Places), Time);
		// attribute<Places>               From_Place_rel           := value(c_FromTime_Place_rel % uint64(#Places), Places);
		// attribute<Time>                 To_Time_rel              := value(c_ToTime_Place_rel / uint64(#Places), Time);
		// attribute<Places>               To_Place_rel             := value(c_ToTime_Place_rel % uint64(#Places), Places); 
		
		attribute<dam>                  TravelDist_Bus             := Min_Index -> TravelDist_Bus;
		attribute<dam>                  Traveldist_Metro           := Min_Index -> Traveldist_Metro;
		attribute<dam>                  Traveldist_Tram            := Min_Index -> Traveldist_Tram;
		attribute<dam>                  Traveldist_Rail            := Min_Index -> Traveldist_Rail;
		attribute<dam>                  Traveldist_Ferry           := Min_Index -> Traveldist_Ferry;
	}
	
	unit<uint64> Result
	: StorageName = "=StorageName_Str"
	, StorageReadOnly = "true"
	, using = "impl"
	{ 
		attribute<ct>                   Price;
		attribute<ct>                   Price_augm;
		attribute<s>                    Traveltime;
		attribute<Toegestane_Ketens>    Toegestane_Keten_rel;
		
		attribute<c_Time_Places>        c_FromTime_Place_rel;
		attribute<c_Time_Places>        c_ToTime_Place_rel;
		attribute<Time>                 From_Time_rel            := value(c_FromTime_Place_rel / uint64(#Places), Time);
		attribute<Places>               From_Place_rel           := value(c_FromTime_Place_rel % uint64(#Places), Places);
		attribute<Time>                 To_Time_rel              := value(c_ToTime_Place_rel / uint64(#Places), Time);
		attribute<Places>               To_Place_rel             := value(c_ToTime_Place_rel % uint64(#Places), Places); 
		
		attribute<dam>                  TravelDist_Bus;
		attribute<dam>                  Traveldist_Metro;
		attribute<dam>                  Traveldist_Tram;
		attribute<dam>                  Traveldist_Rail;
		attribute<dam>                  Traveldist_Ferry;
	}
	
	parameter<string>     StorageName_Str := '%LocalDataProjDir%/IntermediateResults/PT_Ketens_'+Time/TemplatableTextShrt[impl/EersteVertrekMoment]+'_to_'+Time/TemplatableTextShrt[impl/LaatsteVertrekMoment+convert(ModelParameters/MaxTravelTime,s_f)[Time]]+'_'+/ModelParameters/Analysis_date+'_min-'+ModelParameters/MinimiseCriterium+'_maxtransf-'+string(ModelParameters/Max_overstappen)+'.fss';
	// parameter<string>     StorageName_Str := 'C:/LocalData/networkmodel_pbl/IntermediateResults/PT_Ketens_07h00m_to_08h30m_20231003_min-Price_maxtransf-2.fss';
		

	#include<KetenRijger_T.dms>
	#include<CreateTransfers_T.dms>
	#include<Get_Windowed_Agency_Set_T.dms>
}
