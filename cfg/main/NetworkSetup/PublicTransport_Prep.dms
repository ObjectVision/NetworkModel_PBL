container PublicTransport_Prep
{
	container impl
	{
		unit<uint32> org := =Org_domain
		{
			attribute<rdc>                   geometry       := =impl/Org_domain+'/geometry';
			attribute<string>                name           := =impl/Org_domain+'/name';
			attribute<float32>               nr_inwoners    := =impl/Org_domain+'/nr_inwoners[float32]';
		}
		
		unit<uint32> dest := =Advanced/Create_Symmetric_fullOD ? 'org' : 'impl/dest_src'
		{
			attribute<rdc>                   geometry       := =Advanced/Create_Symmetric_fullOD ? 'org/geometry' : 'impl/dest_src/geometry';
		}
		
		parameter<string> Org_domain        := rjoin(lowercase(ModelParameters/Orgset),  lowercase(Advanced/org_domain_list/label),  Advanced/org_domain_list/path);
		parameter<string> Dest_domain       := rjoin(lowercase(ModelParameters/DestSet), lowercase(Advanced/dest_domain_list/label), Advanced/dest_domain_list/path);
		
		unit<uint32> dest_src := =Dest_domain
		{
			attribute<uint32>                nr_items_of_interest := =Dest_domain+'/'+Advanced/items_of_interest;
			attribute<rdc>                   geometry             := =Dest_domain+'/geometry';
			attribute<string>                name                 := =Dest_domain+'/name';
			attribute<string>                label                := =Dest_domain+'/label';
		}
		
		parameter<string>   PT_path_str           := 'SourceData/Infrastructuur/GTFS/PublicTransportNet'; 
		unit<uint32>        PT_net                := =PT_path_str+''; //indirection, want dan kun je die later gebruiken in een select_with_attr_by_cond waarbij alle attributen worden opgehaald.
		
		unit<uint32>        Places             := union_unit(PT_net/SL_Places, org, dest)
		, Descr = "All stops, orgs and dests"
		{
			attribute<rdc>              geometry      := union_data(., PT_net/SL_Places/geometry, org/geometry, dest/geometry);
			attribute<string>           label         := union_data(., PT_net/SL_Places/label, org/name, dest/name);
			attribute<org>              Origin_rel    := union_data(., const(null_u, PT_net/SL_Places), id(org), const(null_u, dest));
			attribute<dest>             Dest_rel      := union_data(., const(null_u, PT_net/SL_Places), const(null_u, org), id(dest));
			attribute<PT_net/SL_Places> SL_Places_rel := union_data(., id(PT_net/SL_Places), const(null_u, org), const(null_u, dest));
			attribute<Stops>            Stop_rel      := PT_net/SL_Places/Stop_rel[SL_Places_rel];
			attribute<Infrastructuur/OVprijzen/NS/NS_stations> NS_Stations_rel := Stops/NS_Stations_rel[Stop_rel];
			attribute<RMT_Stops>                               RMT_Stop_rel    := invert(RMT_Stops/Place_rel);
			attribute<RM_Stops>                                RM_Stop_rel     := invert(RM_Stops/Place_rel);
			attribute<Tic_Stops>                               Tic_Stop_rel    := invert(Tic_Stops/Place_rel);
			attribute<T_Stops>                                 T_Stop_rel      := invert(T_Stops/Place_rel);
			
			attribute<Stops>                                   Stops_rel       := Stop_rel;
			attribute<T_Stops>                                 T_Stops_rel     := T_Stop_rel;
			attribute<Tic_Stops>                               Tic_Stops_rel   := Tic_Stop_rel;
			attribute<RMT_Stops>                               RMT_Stops_rel   := RMT_Stop_rel;
			attribute<RM_Stops>                                RM_Stops_rel    := RM_Stop_rel;
			attribute<OVF_Stops>                               OVF_Stops_rel   := invert(OVF_Stops/Place_rel);
			
			attribute<RegioIndelingen/CoropP> CoropP_rel := point_in_polygon(geometry, RegioIndelingen/CoropP/geometry);
		}
		
		unit<uint64> c_Time_Stop_Routes    := combine_unit_uint64(c_Time_Stops,Routes);
		// unit<uint64> c_Time_Stops          := combine_uint64(Time, Stops);
		unit<uint64> c_Time_Stops          := /SourceData/Infrastructuur/GTFS/c_Time_Stops;
		unit<uint64> c_Time_Places         := combine_uint64(Time, Places);
	
		unit<uint32>        Stops                 := =PT_path_str+'/Stops'
		{
			attribute<string> name      := =PT_path_str+'/Stops/name';
			attribute<rdc>    geometry  := =PT_path_str+'/Stops/geometry';
			attribute<RegioIndelingen/CoropP> CoropP_rel := point_in_polygon(geometry, RegioIndelingen/CoropP/geometry);
			attribute<Places> Place_rel := invert(Places/stop_rel);
		}
		unit<uint32>        RMT_Stops              := select_with_attr_by_cond(Stops, Stops/Mode_rel == GTFS_Modes/Selectie/V/Rail || Stops/Mode_rel == GTFS_Modes/Selectie/V/Metro || Stops/Mode_rel == GTFS_Modes/Selectie/V/Tram);
		unit<uint32>        RM_Stops               := select_with_attr_by_cond(Stops, Stops/Mode_rel == GTFS_Modes/Selectie/V/Rail || Stops/Mode_rel == GTFS_Modes/Selectie/V/Metro);
		unit<uint32>        T_Stops                := select_with_attr_by_cond(Stops, Stops/Mode_rel == GTFS_Modes/Selectie/V/Rail);
		unit<uint32>        Tic_Stops              := select_with_attr_by_cond(Stops, Stops/IsNSICStation);
		unit<uint32>        OVF_Stops              := select_with_attr_by_cond(Stops, Stops/IsOVFietsStation);
		
		parameter<Time>     EersteVertrekMoment    := first(Advanced/MeasureMoments/Moment);
		parameter<Time>     LaatsteVertrekMoment   := last(Advanced/MeasureMoments/Moment);
		
		unit<uint32>        Routes                := =PT_path_str+'/Routes';
		unit<uint32>        NS_Stations            := SourceData/Infrastructuur/OVprijzen/NS/NS_Stations;
		unit<uint8>         Modes                  := GTFS_Modes/Selectie;
		unit<uint8>         PrijsTabel             := SourceData/Infrastructuur/OVprijzen/PrijsTabel;
		unit<uint32>        Provincie              := SourceData/RegioIndelingen/Provincie;
		unit<uint8>         Concessiegebied        := SourceData/RegioIndelingen/Concessiegebied;
		unit<uint32>        CoropP                 := SourceData/RegioIndelingen/CoropP;
		unit<uint32>        c_NS_start_end         := /SourceData/Infrastructuur/OVprijzen/NS/NS_tariefeenheden_matrix/c_NS_start_end;
		unit<uint32>        TariefEenhedenMatrix   := Infrastructuur/OVprijzen/NS/NS_tariefeenheden_matrix/ODMatrix;
		unit<uint16>        ToBeCalculated_Ketens  := /Classifications/Ketens/ToBeCalculated_Keten;
		unit<uint16>        Toegestane_Ketens      := /Classifications/Ketens/Keten/Toegestaan;
		
		unit<uint32> PTnet_prep := =impl/PT_path_str+''
		{
			attribute<bool>   IsSub_from := From_Time_rel >= impl/EersteVertrekMoment ;
			attribute<bool>   IsSub_to   := To_Time_rel   < (impl/LaatsteVertrekMoment + (convert(ModelParameters/MaxOVTime, s_f)[Time]));//MaxTravelTime
			attribute<bool>   IsSub_dur  := duration <= convert(ModelParameters/MaxOVTime , s_f);
			// attribute<c_Time_Places> c_fromTime_Place_rel := combine_data(c_Time_Places, From_Time_rel, impl/Stops/Place_rel[From_Stop_rel]);
		}

		container Set_R := Get_Windowed_Agency_Set_T(' &&  '+impl/PT_path_str+'/Agency_rel != Agencies/V/ns &&  '+impl/PT_path_str+'/Duration > 0f'), Descr = "subset of public transport net for the relevant time windows and agency-set.", using = "impl";
		container Set_L := Get_Windowed_Agency_Set_T(' && ('+impl/PT_path_str+'/Agency_rel == Agencies/V/ns || ('+impl/PT_path_str+'/Mode_rel == impl/Modes/V/Waiting && IsDefined('+impl/PT_path_str+'/c_NS_start_end_rel))) && '+impl/PT_path_str+'/Duration > 0f');
		container Set_K := Get_Windowed_Agency_Set_T(' && ('+impl/PT_path_str+'/Agency_rel == Agencies/V/ns || ('+impl/PT_path_str+'/Mode_rel == impl/Modes/V/Waiting && IsDefined('+impl/PT_path_str+'/c_NS_start_end_rel))) && '+impl/PT_path_str+'/Duration > 0f && '+impl/PT_path_str+'/IsConnectedToNSkortStation');
		
		unit<uint64> All_Time_Stops := union_unit_uint64(OD_L/Result,OD_K/Result,OD_R/Result,OD_O/Result)
		{
			attribute<impl/c_Time_Stops>       c_FromTime_Stop_rel       := union_data(., OD_L/Result/c_FromTime_Stop_rel,OD_K/Result/c_FromTime_Stop_rel,OD_R/Result/c_FromTime_Stop_rel,OD_O/Result/c_FromTime_Stop_rel);
			attribute<impl/c_Time_Stops>       c_ToTime_Stop_rel         := union_data(., OD_L/Result/c_ToTime_Stop_rel,OD_K/Result/c_ToTime_Stop_rel,OD_R/Result/c_ToTime_Stop_rel,OD_O/Result/c_ToTime_Stop_rel);
			unit<uint64> Doubled := union_unit_uint64(.,.)
			{
				attribute<impl/c_Time_Stops>       c_Time_Stop_rel       := union_data(., ../c_FromTime_Stop_rel, ../c_ToTime_Stop_rel);
			}
		}
		#include<MakeODs.dms>
		
		unit<uint32> BlockSelections := Impl/Stops
		{
			attribute<uint32> L_Weight      := uint32(pcount(OD_L/Result/From_Stop_rel));
			attribute<uint32> K_Weight      := uint32(pcount(OD_K/Result/From_Stop_rel));
			attribute<uint32> RO_Weight     := uint32(pcount(OD_R/Result/From_Stop_rel));
			attribute<uint32> Cum_Weight    := cumulate(L_Weight + K_Weight + RO_Weight) - L_Weight - K_Weight - RO_Weight;
		}	
		unit<uint32>      BlockDomain   := range(0, ModelParameters/NumberOfBlocks)
		{
			attribute<string> name          := 'Block_'+string(id(.)+1)+'of'+string(max(id(.))+1);
			attribute<uint64> BlockOffset   := min_elem(uint64(id(.)) * uint64(ModelParameters/MaxBlockSize), uint64(#BlockSelections));
			attribute<uint64> BlockEnd      := min_elem(BlockOffset + uint64(ModelParameters/MaxBlockSize), uint64(#BlockSelections));
			attribute<uint32> BlockSize     := uint32(BlockEnd - BlockOffset);
			attribute<uint32> ClassBreak    := ClassifyEqualCount(BlockSelections/Cum_Weight, .);
		}
	} 

	unit<uint64> uq_c_FromTime_Stop := unique_uint64(impl/All_Time_Stops/c_FromTime_Stop_rel), using = "impl"
	{
		attribute<impl/c_Time_Stops> c_FromTime_Stop_rel      := values;
		attribute<Time>              From_Time_rel            := value(c_FromTime_Stop_rel / uint64(#Stops), Time); //debug
		attribute<Stops>             From_Stop_rel            := value(c_FromTime_Stop_rel % uint64(#Stops), Stops);//debug
		attribute<string>            Label                    := Stops/name[From_Stop_rel]+' @ '+Time/TemplatableText[From_Time_rel];
	}
	unit<uint64> uq_c_ToTime_Stop   := unique_uint64(impl/All_Time_Stops/c_ToTime_Stop_rel), using = "impl"
	{
		attribute<impl/c_Time_Stops> c_ToTime_Stop_rel        := values;
		attribute<Time>              To_Time_rel              := value(c_ToTime_Stop_rel / uint64(#Stops), Time);//debug
		attribute<Stops>             To_Stop_rel              := value(c_ToTime_Stop_rel % uint64(#Stops), Stops); //debug
		attribute<string>            Label                    := Stops/name[To_Stop_rel]+' @ '+Time/TemplatableText[To_Time_rel];
	}
	unit<uint64> uq_c_Time_Stop   := unique_uint64(impl/All_Time_Stops/Doubled/c_Time_Stop_rel), using = "impl"
	{
		attribute<impl/c_Time_Stops> c_Time_Stop_rel        := values;
		attribute<Time>              Time_rel               := value(c_Time_Stop_rel / uint64(#Stops), Time);//debug
		attribute<Stops>             Stop_rel               := value(c_Time_Stop_rel % uint64(#Stops), Stops); //debug
		attribute<string>            Label                  := Stops/name[Stop_rel]+' @ '+Time/TemplatableText[Time_rel];
	} 
	
	unit<uint64> c_FromTS_ToTS      := combine_unit_uint64(uq_c_FromTime_Stop, uq_c_ToTime_Stop);

	container KetenGeneratie_PerBlock :=
		for_each_ne(
			impl/BlockDomain/name
			, 'KetenGeneratie_PerBlock_T('+string(id(impl/BlockDomain))+')'
		), using = "impl";
		
	Template KetenGeneratie_PerBlock_T
	{
		parameter<BlockDomain> BlockDomain_id;
		///
		container StartCalc0{parameter<string> BlockDomain_name := BlockDomain/name[../BlockDomain_id], IntegrityCheck = "uint64(ModelParameters/MaxBlockSize) * uint64(ModelParameters/NumberOfBlocks) > uint64(#BlockSelections)";}
		container StartCalc := PhaseContainer(StartCalc0, 'Start calculating '+string(StartCalc0/BlockDomain_name)+', with block size of '+string(BlockDomain/BlockSize[BlockDomain_id]));
		
		unit<uint64> Sub_OD_L := select_with_attr_by_cond(OD_L/Result, Classify(BlockSelections/Cum_Weight[OD_L/Result/From_Stop_rel], BlockDomain/ClassBreak) == BlockDomain_id)
		{
			unit<uint64> Result := .;
		}
		unit<uint64> Sub_OD_K := select_with_attr_by_cond(OD_K/Result, Classify(BlockSelections/Cum_Weight[OD_K/Result/From_Stop_rel], BlockDomain/ClassBreak) == BlockDomain_id)
		{
			unit<uint64> Result := .;
		}
		unit<uint64> Sub_OD_R := select_with_attr_by_cond(OD_R/Result, Classify(BlockSelections/Cum_Weight[OD_R/Result/From_Stop_rel], BlockDomain/ClassBreak) == BlockDomain_id)
		{
			unit<uint64> Result := .;
		}
		unit<uint64> Sub_OD_O := select_with_attr_by_cond(OD_O/Result, Classify(BlockSelections/Cum_Weight[OD_O/Result/From_Stop_rel], BlockDomain/ClassBreak) == BlockDomain_id)
		{
			unit<uint64> Result := .;
		}
		
		#include<Transfers.dms>

		container Keten_Generatie := 
			for_each_ne(impl/ToBeCalculated_Ketens/name
			, 	iif(impl/ToBeCalculated_Ketens/right == ''
				, 'Sub_OD_'+impl/ToBeCalculated_Ketens/left
				, 'KetenRijger_T(
						'+impl/ToBeCalculated_Ketens/left+'/Result' //left unit
						',OD_'+impl/ToBeCalculated_Ketens/right+'/Result' //right unit
						',Transfers/'+impl/ToBeCalculated_Ketens/transfer_name+'/Result' //transfer unit
						','+Quote(impl/ToBeCalculated_Ketens/Left)+ //left name str
						','+Quote(impl/ToBeCalculated_Ketens/Right)+ //right name str
					')' 
				) 
			), using = "impl";
			
		unit<uint64> ToegestaneKetens := ='union_unit_uint64('+AsItemList('Keten_Generatie/'+impl/Toegestane_Ketens/name+'/Result')+')', using = "impl"
		{
			attribute<Toegestane_Ketens>    Toegestane_Keten_rel        := ='union_data(., '+AsList('const('+string(id(Toegestane_Ketens))+'[Toegestane_Ketens], Keten_Generatie/'+Toegestane_Ketens/name+'/Result)', ',')+')';
			attribute<c_Time_Stops>         c_FromTime_Stop_rel         := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/c_FromTime_Stop_rel')+')';
			attribute<c_Time_Stops>         c_ToTime_Stop_rel           := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/c_ToTime_Stop_rel')+')';
			attribute<ct>                   Price                       := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Price')+')';
			attribute<s>                    Traveltime                  := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveltime')+')';
			attribute<s>                    WaitingAtStop_time          := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/WaitingAtStop_time')+')';
			attribute<s>                    Walking_time                := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Walking_time')+')';
			attribute<ct>                   Price_augm                  := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Price_augm')+')';
			attribute<uint32>               PriceTime_Score             := =ModelParameters/MinimiseCriterium == 'Price'
																			? 'value(Price_augm, uint32) * value(ModelParameters/MaxOVTime[s], uint32) + value(Traveltime, uint32)'
																			: 'value(Traveltime, uint32) * 10000 + value(Price_augm, uint32)';
			attribute<uq_c_FromTime_Stop>   uq_c_FromTime_Stop_rel      := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/uq_c_FromTime_Stop_rel')+')';
			attribute<uq_c_ToTime_Stop>     uq_c_ToTime_Stop_rel        := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/uq_c_ToTime_Stop_rel')+')';

			attribute<dam>                  TravelDist_Bus              := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/TravelDist_Bus')+')';
			attribute<dam>                  Traveldist_Metro            := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveldist_Metro')+')';
			attribute<dam>                  Traveldist_Tram             := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveldist_Tram')+')';
			attribute<dam>                  Traveldist_Rail             := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveldist_Rail')+')';
			attribute<dam>                  Traveldist_Ferry            := ='union_data(., '+AsItemList('Keten_Generatie/'+Toegestane_Ketens/name+'/Result/Traveldist_Ferry')+')';
			
			attribute<c_FromTS_ToTS>        c_FromTS_ToTS_rel        := combine_data(c_FromTS_ToTS, uq_c_FromTime_Stop_rel, uq_c_ToTime_Stop_rel); //fka OD_key
			unit<uint64>                    uq_c_FromTS_ToTS         := unique_uint64(c_FromTS_ToTS_rel); //fka uq_OD_key
			attribute<uq_c_FromTS_ToTS>     uq_c_FromTS_ToTS_rel     := rlookup(c_FromTS_ToTS_rel, uq_c_FromTS_ToTS/values); //attribuut om partitionering van price/traveltime etc te doen. //fka uq_OD_key_rel
		} 
		
		container x
		: Descr = "hack om deadlock te omzeilen"
		, URL = "https://github.com/ObjectVision/GeoDMS/issues/965"
		{
			unit<uint64> Result := ToegestaneKetens/uq_c_FromTS_ToTS
			, using = "impl;ToegestaneKetens"
			{ 
				attribute<ToegestaneKetens>     Min_Index                   := ='min_index(ToegestaneKetens/PriceTime_Score, ToegestaneKetens/uq_c_FromTS_ToTS_rel)', DisableStorage = "true";
				attribute<ct>                   Price                       := Min_Index -> Price;
				attribute<ct>                   Price_augm                  := Min_Index -> Price_augm;
				attribute<s>                    Traveltime                  := Min_Index -> Traveltime;
				attribute<s>                    WaitingAtStop_time          := Min_Index -> WaitingAtStop_time;
				attribute<s>                    Walking_time                := Min_Index -> Walking_time;
				attribute<Toegestane_Ketens>    Toegestane_Keten_rel        := Min_Index -> Toegestane_Keten_rel;
				
				attribute<uq_c_FromTime_Stop>   uq_c_FromTime_Stop_rel      := value(uq_c_FromTS_ToTS/values / #uq_c_ToTime_Stop, uq_c_FromTime_Stop), DisableStorage = "true";
				attribute<uq_c_ToTime_Stop>     uq_c_ToTime_Stop_rel        := value(uq_c_FromTS_ToTS/values % #uq_c_ToTime_Stop, uq_c_ToTime_Stop), DisableStorage = "true";
				attribute<c_Time_Stops>         c_FromTime_Stop_rel         := uq_c_FromTime_Stop/c_FromTime_Stop_rel[uq_c_FromTime_Stop_rel];
				attribute<c_Time_Stops>         c_ToTime_Stop_rel           := uq_c_ToTime_Stop/c_ToTime_Stop_rel[uq_c_ToTime_Stop_rel];
				
				attribute<dam>                  TravelDist_Bus              := Min_Index -> TravelDist_Bus;
				attribute<dam>                  Traveldist_Metro            := Min_Index -> Traveldist_Metro;
				attribute<dam>                  Traveldist_Tram             := Min_Index -> Traveldist_Tram;
				attribute<dam>                  Traveldist_Rail             := Min_Index -> Traveldist_Rail;
				attribute<dam>                  Traveldist_Ferry            := Min_Index -> Traveldist_Ferry;
				
				attribute<Time>                 From_Time_rel            := value(c_FromTime_Stop_rel / uint64(#Stops), Time); //debug
				attribute<Stops>                From_Stop_rel            := value(c_FromTime_Stop_rel % uint64(#Stops), Stops);//debug
				attribute<Time>                 To_Time_rel              := value(c_ToTime_Stop_rel / uint64(#Stops), Time);//debug
				attribute<Stops>                To_Stop_rel              := value(c_ToTime_Stop_rel % uint64(#Stops), Stops); //debug
			}
		}
	 	container Fence := PhaseContainer(x, 'Calculated: '+string(StartCalc/BlockDomain_name));
	}
	
	unit<uint64> Write_Result   := ='union_unit_uint64('+AsItemList('KetenGeneratie_PerBlock/'+impl/BlockDomain/name+'/Fence/Result')+')'
	, StorageName = "=StorageName_Str"
	, Descr = "Deze set bevat de geunionede resultaten per block."
	, using = "impl"
	{
		attribute<Ct>                  Price                      := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/Price')+')';
		attribute<Ct>                  Price_augm                 := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/Price_augm')+')';
		attribute<s>                   Traveltime                 := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/Traveltime')+')';
		attribute<s>                   WaitingAtStop_time         := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/WaitingAtStop_time')+')';
		attribute<s>                   Walking_time               := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/Walking_time')+')';
		attribute<Toegestane_Ketens>   Toegestane_Keten_rel       := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/Toegestane_Keten_rel')+')';
		
		attribute<dam>                 TravelDist_Bus             := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/TravelDist_Bus')+')';
		attribute<dam>                 Traveldist_Metro           := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/Traveldist_Metro')+')';
		attribute<dam>                 Traveldist_Tram            := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/Traveldist_Tram')+')';
		attribute<dam>                 Traveldist_Rail            := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/Traveldist_Rail')+')';
		attribute<dam>                 Traveldist_Ferry           := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/Traveldist_Ferry')+')';
		
		attribute<c_Time_Stops>        c_FromTime_Stop_rel        := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/c_FromTime_Stop_rel')+')';
		attribute<c_Time_Stops>        c_ToTime_Stop_rel          := ='union_data(.,'+AsItemList('KetenGeneratie_PerBlock/'+BlockDomain/name+'/Fence/Result/c_ToTime_Stop_rel')+')';
		
		attribute<uq_c_FromTime_Stop>   uq_c_FromTime_Stop_rel      := rlookup(c_FromTime_Stop_rel, uq_c_FromTime_Stop/c_FromTime_Stop_rel), DisableStorage = "true"; //debug
		attribute<uq_c_ToTime_Stop>     uq_c_ToTime_Stop_rel        := rlookup(c_ToTime_Stop_rel, uq_c_ToTime_Stop/c_ToTime_Stop_rel), DisableStorage = "true";//debug
	} 
	
	unit<uint64> Result
	: StorageName = "=StorageName_Str"
	, StorageReadOnly = "true"
	, using = "impl"
	{ 
		attribute<ct>                   Price;
		attribute<ct>                   Price_augm;
		attribute<s>                    Traveltime;
		attribute<s>                    WaitingAtStop_time;
		attribute<s>                    Walking_time;
		attribute<Toegestane_Ketens>    Toegestane_Keten_rel;
		
		attribute<c_Time_Stops>         c_FromTime_Stop_rel;
		attribute<c_Time_Stops>         c_ToTime_Stop_rel;
		attribute<Time>                 From_Time_rel            := value(c_FromTime_Stop_rel / uint64(#Stops), Time);
		attribute<Stops>                From_Stop_rel            := value(c_FromTime_Stop_rel % uint64(#Stops), Stops);
		attribute<Time>                 To_Time_rel              := value(c_ToTime_Stop_rel / uint64(#Stops), Time);
		attribute<Stops>                To_Stop_rel              := value(c_ToTime_Stop_rel % uint64(#Stops), Stops); 
		
		attribute<Stops/c_Stop_Stop>    c_Stop_Stop_rel          := combine_data(Stops/c_Stop_Stop, From_Stop_rel, To_Stop_rel);
		attribute<Places>               From_Place_rel           := Stops/Place_rel[From_Stop_rel];
		attribute<Places>               To_Place_rel             := Stops/Place_rel[To_Stop_rel];
		attribute<c_Time_Places>        c_FromTime_Place_rel     := combine_data(c_Time_Places, From_Time_rel, From_Place_rel);
		attribute<c_Time_Places>        c_ToTime_Place_rel       := combine_data(c_Time_Places, To_Time_rel, To_Place_rel);
		
		attribute<dam>                  TravelDist_Bus;
		attribute<dam>                  Traveldist_Metro;
		attribute<dam>                  Traveldist_Tram;
		attribute<dam>                  Traveldist_Rail;
		attribute<dam>                  Traveldist_Ferry;
		
		attribute<uq_c_FromTime_Stop>   uq_c_FromTime_Stop_rel      := rlookup(c_FromTime_Stop_rel, uq_c_FromTime_Stop/c_FromTime_Stop_rel);
		attribute<uq_c_ToTime_Stop>     uq_c_ToTime_Stop_rel        := rlookup(c_ToTime_Stop_rel, uq_c_ToTime_Stop/c_ToTime_Stop_rel);
	}
	
	parameter<string>     StorageName_Str := '%LocalDataProjDir%/IntermediateResults/PT_Ketens_'+Time/TemplatableTextShrt[impl/EersteVertrekMoment]+'_to_'+Time/TemplatableTextShrt[impl/LaatsteVertrekMoment+convert(ModelParameters/MaxOVTime,s_f)[Time]]+'_'+/ModelParameters/Analysis_date+'_min-'+ModelParameters/MinimiseCriterium+'_maxtransf-'+string(ModelParameters/Max_overstappen)+'_MaxOV-' + string(ModelParameters/MaxOVTime) + 'min.fss';
	
	#include<KetenRijger_T.dms>
	#include<CreateTransfers_T.dms>
	#include<Get_Windowed_Agency_Set_T.dms>
}
