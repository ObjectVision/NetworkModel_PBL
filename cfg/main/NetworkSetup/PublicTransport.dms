Template PublicTransport_T 
{  
	parameter<uint32>   inTime;
	parameter<string>   inTime_string;
	
	parameter<string>   OUTPUT_Generate_decay_CSVFiles        := =AsList('CreateODs/CreateExports/'+ModelParameters/Advanced/Export_CombinationTypes/name+'/LongFormat/File_decay',' + ');
	parameter<string>   OUTPUT_Generate_fullOD_long_CSVFiles  := =AsList('CreateODs/CreateExports/'+ModelParameters/Advanced/Export_CombinationTypes/name+'/LongFormat/results/File_fullOD',' + ');

	container OUTPUT_decayed := 
		for_each_nedv(
			ModelParameters/Advanced/Export_CombinationTypes/name
			, 'CreateODs/CreateExports/'+ModelParameters/Advanced/Export_CombinationTypes/name+'/nr_items_of_interest_bereikbaar_decayed'
			, org
			, float32
		);
	
	unit<uint32>        Static_net        := SourceData/Infrastructuur/GTFS/StaticNets/Static_net;
	unit<uint32>        Stops             := SourceData/Infrastructuur/GTFS/StaticNets/Stops
	{
			attribute<rdc> geometry := SourceData/Infrastructuur/GTFS/StaticNets/Stops/geometry;
	}
	unit<uint32>        NodeSet           := SourceData/Infrastructuur/GTFS/StaticNets/Static_net/NodeSet;
	unit<uint32>        Places            := SourceData/Infrastructuur/GTFS/StaticNets/allLinks/Places;
	unit<uint32>        Routes            := SourceData/Infrastructuur/GTFS/StaticNets/Routes;
	unit<uint32>        NS_Stations       := SourceData/Infrastructuur/OVprijzen/NS/NS_Stations;
	unit<uint32>        Modes             := ModesList/List_selectie;
	unit<uint8>         PrijsTabel        := SourceData/Infrastructuur/OVprijzen/PrijsTabel;
	unit<uint32>        Provincie         := SourceData/RegioIndelingen/Provincie;
	unit<uint8>         Concessiegebied   := SourceData/RegioIndelingen/Concessiegebied;
	
	unit<uint32>        Org2Stop_B_Tic    := ODConnections/CreateODconnections/Sparse_uitwerking_Org2StopIC_B/AB;
	unit<uint32>        Org2Stop_B_T      := ODConnections/CreateODconnections/Sparse_uitwerking_Org2StopT_B/AB;
	unit<uint32>        Org2Stop_B_TM     := ODConnections/CreateODconnections/Sparse_uitwerking_Org2StopTM_B/AB;
	unit<uint32>        Org2Stop_B_TMT    := ODConnections/CreateODconnections/Sparse_uitwerking_Org2StopTMT_B/AB;
	unit<uint32>        Org2Stop_W        := ODConnections/CreateODconnections/Sparse_uitwerking_Org2Stop_W/AB;
	unit<uint32>        Org2Stop_B        := ODConnections/CreateODconnections/Sparse_uitwerking_Org2Stop_B/AB;
	unit<uint32>        Stop2Dest_W       := ODConnections/CreateODconnections/Sparse_uitwerking_Stop2Dest_W/AB;
	unit<uint32>        Stop2Dest_B       := ODConnections/CreateODconnections/Sparse_uitwerking_Stop2Dest_B/AB;
	
	unit<uint64>        Combine_OrgDest   := combine_unit_uint64(Org, Dest);

	container TransitionTypes := 
		for_each_ne(
			ModelParameters/Advanced/TransitionType_list/Type
			, 'Transition_T(
				'+inTime_string+'/'+string(ModelParameters/Advanced/TransitionType_list/Type)+'
				, '+quote(ModelParameters/Advanced/TransitionType_list/Type)+'
				, '+quote(ModelParameters/Advanced/TransitionType_list/Type_shrt)+'
				, '+quote(ModelParameters/Advanced/TransitionType_list/Mode)+'
				, '+string(ModelParameters/Advanced/TransitionType_list/ModeMax)+'[min_f]
				, '+quote(ModelParameters/Advanced/TransitionType_list/OrgDest)+'
			)'
		);
	
	Template Transition_T
	{
		unit<uint32>      OD_unit;
		parameter<string> OD_unit_name;
		parameter<string> Type_shrt;
		parameter<string> Mode;
		parameter<min_f>  ModeMax_min;
		parameter<string> OrgDest;
		///
		parameter<Time>     ModeMax_sec := convert(ModeMax_min, s_f)[Time];
		parameter<string>   Arrive_at_time_CalcStr     := replace('select_with_org_rel(UNIT/TPS_FromTime >= (inTime[Time] - convert(ModelParameters/MaxOVTime, s_f)[Time] - MM)
																			&& UNIT/TPS_FromTime <= inTime[Time] 
																			&& UNIT/TPS_FromTime <= inTime[Time] 
																			&& UNIT/duration <= MM)'
																				,'UNIT',OD_unit_name,'TPS',Type_shrt,'MM', string(ModeMax_sec));
		
		
		parameter<string>   Departure_at_time_CalcStr  := replace('select_with_org_rel(UNIT/TPS_FromTime >= inTime[Time] 
																			&& UNIT/TPS_ToTime >= inTime[Time] 
																			&& UNIT/duration <= MM 
																			&& UNIT/TPS_FromTime < (inTime[Time] + convert(ModelParameters/MaxOVTime, s_f)[Time] + MM))'
																				,'UNIT',OD_unit_name,'TPS',Type_shrt,'MM', string(ModeMax_sec));
		
		
		
		parameter<string>   CalcStr  := ModelParameters/Advanced/Arrival_or_Departure_at_time == 'Arrival'
																? Arrive_at_time_CalcStr
																: Departure_at_time_CalcStr;

		unit<uint32> Transition := =CalcStr
		{
			attribute<Org>                        Origin_rel           := ='OD_unit/'+OrgDest+'_rel[org_rel]';
			attribute<Dest>                       Dest_rel          := ='OD_unit/'+OrgDest+'_rel[org_rel]';
			attribute<Stops>                      Stop_rel          := OD_unit/Stop_rel[org_rel];
			attribute<Places>                     Place_rel         := OD_unit/Place_rel[org_rel];
			attribute<rdc>                        geometry (arc)    := OD_unit/geometry[org_rel];
			attribute<km>                         LengthKm          := OD_unit/LengthKm[org_rel];
			attribute<Time>                       Duration          := OD_unit/Duration[org_rel];
			attribute<Time>                       FromTime          := ='OD_unit/'+Type_shrt+'_FromTime[org_rel]';
			attribute<Time>                       toTime            := ='OD_unit/'+Type_shrt+'_ToTime[org_rel]';
			attribute<string>                     Label             := OD_unit/Label[org_rel];
			attribute<string>                     LabelText_ext     := ModelParameters/Advanced/WegingWachttijdThuisVoortransport == 1f && OrgDest == 'Org'
																			? Label + ' ('+time/Label[FromTime]+' - '+time/Label[ToTime]+' and waiting at home from '+time/Label[InTime]+' to '+time/Label[FromTime]+')'
																			: Label + ' ('+time/Label[FromTime]+' - '+time/Label[ToTime]+')';
			attribute<upoint>                     MomentxPlace_O2S  := point_xy(toTime, Place_rel, upoint);
			attribute<upoint>                     MomentxPlace_S2D  := point_xy(FromTime, Place_rel, upoint);
			attribute<NodeSet>                    NodeRef_O2S       := rlookup(MomentxPlace_O2S, NodeSet/values);
			attribute<NodeSet>                    NodeRef_S2D       := rlookup(MomentxPlace_S2D, NodeSet/values);
			
			attribute<Time>                       Duration_withWaitingAtOrg := Duration + ((FromTime - InTime)[float32] * ModelParameters/Advanced/WegingWachttijdThuisVoortransport)[Time];
		}
	}

	container CreateODs
	{
		unit<uint32> StaticNet_subset_debug := Static_net
		{
			attribute<bool>   IsSub_from := FromTime >= inTime ;
			attribute<bool>   IsSub_to   := ToTime   < (inTime + (convert(ModelParameters/MaxOVTime, s_f)[Time] * 2));
			attribute<bool>   IsSub_dur  := duration <= convert(ModelParameters/MaxOVTime , s_f) * 2f;
		}
	
		unit<uint32> StaticNet_subset := select_with_attr_by_cond(SourceData/Infrastructuur/GTFS/StaticNets/Static_net, StaticNet_subset_debug/IsSub_from && StaticNet_subset_debug/IsSub_to && StaticNet_subset_debug/IsSub_dur);
	
		//// CREATE OD FSS ////
		
		container OD_traveltime_WW     := OD_traveltime_PrivateTransport_T('WW');
		container OD_traveltime_BB     := OD_traveltime_PrivateTransport_T('BB');
		
		Template OD_traveltime_PrivateTransport_T
		{
			parameter<string> name;
			////
			parameter<string> transport_type := name == 'WW' ? 'pedestrian' : name == 'BB' ? 'bike' : '';
			
			unit<uint64> OD := ='NetworkSetup/ConfigurationPerRegio/'+Regio_Name+'/PrivateTransport/'+transport_type+'/Calc_Traveltimes_maxspeed_'+transport_type+'/Traveltimes'  
			{
				attribute<Min_f>            reistijd_min                                    := impedance;
				attribute<Km>               afgelegde_afstand_km                            := alt_imp;
				attribute<Combine_OrgDest>  OD_nummer                                       := combine_data(Combine_OrgDest, OrgZone_rel, DstZone_rel);
				
				attribute<float32>          nr_items_of_interest                            := dest/nr_items_of_interest[float32][DstZone_rel];
				attribute<float32>          decay_function                                  := reistijd_min == 0f ? 1f : 1f / (1f + exp(ModelParameters/Advanced/Distance_decay/ov_a + ModelParameters/Advanced/Distance_decay/ov_b*log(reistijd_min / 1[min_f]) + ModelParameters/Advanced/Distance_decay/ov_c*reistijd_min / 1[min_f]));
				attribute<float32>          nr_items_of_interest_decayed                    := MakeDefined(nr_items_of_interest * decay_function,0f);
				attribute<float32>          nr_items_of_interest_bereikbaar_decayed (Org)   := sum(UniqueOD/Best_nr_items_of_interest_decayed, value(UniqueOD/OD_nummer / uint64(#dest), org));
				attribute<float32>          nr_items_of_interest_bereikbaar (Org)           := sum(UniqueOD/Best_nr_items_of_interest, value(UniqueOD/OD_nummer / uint64(#dest), org));

				parameter<string>           MaxDuration_Org2Dest_str                        := ='string(ModelParameters/Max'+transport_type+'Time_Org2Dest) + ''min''';
				attribute<string>           ModeUsed                                        := const(name,.);
				attribute<Euro>             Prijs_per_reis                                  := const(0[Euro],.);

 				unit<uint32> AfgelegdeReis := sequence2points(LinkSet) //vertaling van LinkSet attribute (afgelegde route in OD), naar onderdelen van de reis
				{
					unit<uint32> LinkSet := PrivateTransport/Pedestrian/Calc_Traveltimes_maxspeed_pedestrian/LinkSet;
					unit<uint32> NodeSet := PrivateTransport/Pedestrian/Calc_Traveltimes_maxspeed_pedestrian/NodeSet;

					// voor visuaisatie
					attribute<rdc>         Route (arc) := points2sequence(LinkPoints/Point, LinkPoints/Sequence_rel, LinkPoints/Ordinal);
					attribute<rdc>         FromPoint   := LinkSet/FirstPoint[point];
					attribute<rdc>         ToPoint     := LinkSet/LastPoint[point];

					unit<uint32> LinkPoints := union_unit(., .)
					{
						attribute<rdc>                  Point        := union_data(., FromPoint, ToPoint);
						attribute<..>                   Sequence_rel := union_data(., id(..), id(..));
						attribute<uint32>               Ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
					}
				}
				
				unit<uint64> UniqueOD := select_with_org_rel(IsDefined(OD_nummer))
				{
					attribute<float32>          Best_nr_items_of_interest_decayed   := ../nr_items_of_interest_decayed[org_rel];
					attribute<float32>          Best_nr_items_of_interest           := ../nr_items_of_interest[org_rel];
					attribute<float32>          ShortestTraveltime                  := ../reistijd_min[org_rel];
					attribute<Euro>             Prijs_van_snelste_reis              := const(0[Euro],.);
					attribute<string>           ModeUsed                            := ../ModeUsed[org_rel];
					attribute<Combine_OrgDest>  OD_nummer                           := ../OD_nummer[org_rel];
					attribute<Combine_OrgDest>  values                              := OD_nummer;
					attribute<string>           OrgName                             := Org/name[Origin_rel];
					attribute<string>           DestName                            := Dest/name[Dest_rel];
					attribute<org>              Origin_rel                           := value(OD_nummer / uint64(#Dest), org);
					attribute<dest>             Dest_rel                             := value(OD_nummer % uint64(#Dest), Dest);
				}
			}
		}		
		
		//singles
		container OD_traveltime_W_OV_W     := OD_Traveltime_single_T('W','W');
		container OD_traveltime_B_OV_W     := OD_Traveltime_single_T('B','W');
		container OD_traveltime_B_OV_B     := OD_Traveltime_single_T('B','B');
		container OD_traveltime_B_T_OV_B   := OD_Traveltime_single_T('B_T','B');
		container OD_traveltime_B_TM_OV_B  := OD_Traveltime_single_T('B_TM','B');
		container OD_traveltime_B_TMT_OV_B := OD_Traveltime_single_T('B_TMT','B');
		container OD_traveltime_B_Tic_OV_B := OD_Traveltime_single_T('B_Tic','B');
		container OD_traveltime_B_T_OV_W   := OD_Traveltime_single_T('B_T','W');
		container OD_traveltime_B_TM_OV_W  := OD_Traveltime_single_T('B_TM','W');
		container OD_traveltime_B_TMT_OV_W := OD_Traveltime_single_T('B_TMT','W');
		container OD_traveltime_B_Tic_OV_W := OD_Traveltime_single_T('B_Tic','W');
		
		Template OD_Traveltime_single_T
		{
			parameter<string> voortransport;
			parameter<string> natransport;
			////
			
			parameter<string> name := voortransport+'_OV_'+natransport;
			
			container Org2Stop     := ='TransitionTypes/Org2Stop_'+voortransport;
			container Stop2Dest    := ='TransitionTypes/Stop2Dest_'+natransport;
			
			unit<uint64> OD_src := 
				impedance_matrix_od64('directed;startPoint(Node_rel,impedance,OrgZone_rel);endPoint(Node_rel,impedance,DstZone_rel);cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel,LinkSet'
					, StaticNet_subset/Duration
					, StaticNet_subset/F1
					, StaticNet_subset/F2
					
					, Org2Stop/Transition/NodeRef_O2S , value(Org2Stop/Transition/Duration_withWaitingAtOrg,s_f), Org2Stop/Transition/Origin_rel     //sP node_rel, impedance, OrgZone_rel
					, Stop2Dest/Transition/NodeRef_S2D, value(Stop2Dest/Transition/Duration,s_f)                , Stop2Dest/Transition/Dest_rel //eP node_rel, impedance, DstZone_rel
					, convert(ModelParameters/MaxOVTime, s_f)
					, StaticNet_subset/Length
				)
			{
				attribute<Combine_OrgDest>  OD_nummer                                       := combine_data(Combine_OrgDest, OrgZone_rel, DstZone_rel);
				attribute<Euro>             Prijs_per_reis                                  := sum(
																									AfgelegdeReis/uq_reis_route_sorted/Price
																									, AfgelegdeReis/uq_reis_route_sorted/Reis_rel
																								);
				attribute<bool>             IsUnwantedTrip1                                 := all(AfgelegdeReis/Mode_rel == Modes/v/Walking || AfgelegdeReis/Mode_rel == Modes/v/Waiting || AfgelegdeReis/LinkType == LinkTypes/V/Transfer, AfgelegdeReis/Reis_rel);
				attribute<bool>             IsUnwantedTrip2                                 := Sum_Reistijd_VoorNaTransport == impedance;
				attribute<bool>             IsUnwantedTrip                                  := IsUnwantedTrip1 || IsUnwantedTrip2;

				attribute<s_f>              Sum_Reistijd_VoorNaTransport                    := sum(AfgelegdeReis/Reistijd_Voortransport + AfgelegdeReis/Reistijd_Natransport, AfgelegdeReis/Reis_rel);
				attribute<min_f>            reistijd_min                                    := impedance[min_f];
				
 				unit<uint32> AfgelegdeReis := sequence2points(LinkSet) //vertaling van LinkSet attribute (afgelegde route in OD), naar onderdelen van de reis
				// , KeepData = "true"
				{
					attribute<Combine_OrgDest>         OD_nummer               := ../OD_nummer[reis_rel];
					attribute<rdc>                     geometry (arc)          := StaticNet_subset/geometry[point];
					attribute<Places>                  FromPlace               := StaticNet_subset/FromPlace[point];
					attribute<Places>                  ToPlace                 := StaticNet_subset/ToPlace[point];
					attribute<Time>                    FromTime                := StaticNet_subset/FromTime[point];
					attribute<Time>                    ToTime                  := StaticNet_subset/ToTime[point];
					attribute<Modes>                   Mode_rel                := StaticNet_subset/Mode_rel[point];
					attribute<min_f>                   reistijd_min            := ../impedance[reis_rel][min_f];
					
					attribute<LinkTypes>               LinkType                := StaticNet_subset/LinkType[point];
					attribute<km>                      Length_OV               := StaticNet_subset/Length[point]; //nodig tbv variabele prijs bepaling
					attribute<km>                      Total_Length            := AfgelegdeAfstand_Voortransport + Length_OV + AfgelegdeAfstand_Natransport;
					attribute<Agencies>                Agency_rel              := StaticNet_subset/Agency_rel[point];
					
					attribute<Stops>                   FromStop_rel            := Places/Stop_rel[FromPlace];
					attribute<Stops>                   ToStop_rel              := Places/Stop_rel[ToPlace];
					
					attribute<..>                      Reis_rel                := Sequence_rel;
					attribute<Routes>                  Route_rel               := StaticNet_subset/Route_rel[point];
					attribute<upoint>                  Reis_Route_Identifier   := point_xy(Route_rel, uint32(Reis_rel));
					attribute<uq_reis_route>           uq_reis_route_rel       := rlookup(Reis_Route_Identifier, uq_reis_route/values);
					
					attribute<uint64>                  Reis_FromTime_Identifier := Reis_rel * value(1000000000, uint64) + value(FromTime, uint64);
					attribute<uint64>                  Reis_ToTime_Identifier   := Reis_rel * value(1000000000, uint64) + value(ToTime, uint64);
					
					attribute<rdc>                     geometry_voortransport   (arc) := rjoin(OpstapHalte, Org2Stop/Transition/Place_rel, Org2Stop/Transition/geometry);
					attribute<Places>                  OpstapHalte                    := min(FromTime, reis_rel)[reis_rel] == FromTime ? FromPlace : null_u; //tbv afgelegde afstand voortransport
					attribute<km>                      AfgelegdeAfstand_Voortransport := MakeDefined(rjoin(OpstapHalte, Org2Stop/Transition/Place_rel, Org2Stop/Transition/LengthKm), 0[km]);
					attribute<s_F>                     Reistijd_Voortransport         := MakeDefined(rjoin(OpstapHalte, Org2Stop/Transition/Place_rel, Org2Stop/Transition/Duration[s_f]), 0[s_f]);
					
					attribute<rdc>                     geometry_natransport     (arc) := rjoin(UitstapHalte, Stop2Dest/Transition/Place_rel, Stop2Dest/Transition/geometry);
					attribute<Places>                  UitstapHalte                   := max(ToTime, reis_rel)[reis_rel] == ToTime ? ToPlace : null_u; //; //tbv afgelegde afstand natransport
					attribute<km>                      AfgelegdeAfstand_Natransport   := MakeDefined(rjoin(UitstapHalte, Stop2Dest/Transition/Place_rel, Stop2Dest/Transition/LengthKm), 0[km]);
					attribute<s_F>                     Reistijd_Natransport           := MakeDefined(rjoin(UitstapHalte, Stop2Dest/Transition/Place_rel, Stop2Dest/Transition/Duration[s_f]), 0[s_f]);
					
					attribute<bool>                    IsUnwantedTrip                 := ../IsUnwantedTrip[reis_rel];
					
					unit<uint32> uq_reis_route := unique(Reis_Route_Identifier) //indikking van reis/route combinaties. Transfers en wachten vallen eruit, net zoals de tussenliggende stations binnen een route.
					// , KeepData = "true"
					{
						attribute<Routes>        Route_rel                     := pointcol(values);
						attribute<...>           Reis_rel                      := value(pointrow(values),...);
						attribute<Agencies>      Agency_rel                    := first(../Agency_rel, ../uq_reis_route_rel);
						attribute<Modes>         Mode_rel                      := first(../Mode_rel, ../uq_reis_route_rel);
						attribute<Time>          First_StopTime_Route          := min(../FromTime, ../uq_reis_route_rel);
						attribute<Time>          Last_StopTime_Route           := max(../ToTime, ../uq_reis_route_rel);
						attribute<uint64>        Reis_FirstTime_Identifier     := uint64(Reis_rel) * value(1000000000, uint64) + value(First_StopTime_Route, uint64);
						attribute<km>            Afgelegde_afstand_OV          := sum(../Length_OV, ../uq_reis_route_rel); //nodig tbv variabele prijs bepaling
						attribute<.>             Reis_Time_Sort_Index          := index(Reis_FirstTime_Identifier);
					}
					
					unit<uint32> uq_reis_route_sorted := unique(uq_reis_route/Reis_Time_Sort_Index) // hack om het domein te sorteren op reis_rel en vertrektijden. Om zo in de prijsbepaling de volgende 'leg' te kunnen bepalen. En dus bus/trein onderbroken door overstappen samen te kunnen voegen.
					{
						attribute<Routes>        Route_rel                     := (uq_reis_route/Route_rel[uq_reis_route/Reis_Time_Sort_Index])[values];
						attribute<...>           Reis_rel                      := (uq_reis_route/Reis_rel[uq_reis_route/Reis_Time_Sort_Index])[values];
						attribute<Agencies>      Agency_rel                    := (uq_reis_route/Agency_rel[uq_reis_route/Reis_Time_Sort_Index])[values];
						
						attribute<Time>          First_StopTime_Route          := (uq_reis_route/First_StopTime_Route[uq_reis_route/Reis_Time_Sort_Index])[values];
						attribute<Time>          Last_StopTime_Route           := (uq_reis_route/Last_StopTime_Route[uq_reis_route/Reis_Time_Sort_Index])[values];
						attribute<km>            Afgelegde_afstand_OV          := (uq_reis_route/Afgelegde_afstand_OV[uq_reis_route/Reis_Time_Sort_Index])[values];
						
						attribute<Stops>         FromStop_rel                  := rjoin(impl/Reis_FirstTime_Identifier, ../Reis_FromTime_Identifier, ../FromStop_rel);
						attribute<Stops>         ToStop_rel                    := rjoin(impl/Reis_LastTime_Identifier, ../Reis_ToTime_Identifier, ../ToStop_rel);
						
						attribute<Euro>          Price                         := Agency_rel == Agencies/V/NS //NS is anders, want die gaat op totale NS reis uit een afstandstabel
																					? impl/IsPrevLegSameAgency
																						? 0[Euro]	// in dat geval is het al in die 'leg' berekend
																						: rjoin(impl/NS_OrgDest_identifier
																								, SourceData/Infrastructuur/OVprijzen/NS/NS_tariefeenheden_matrix/ConnectedNetwork/ODMatrix/OrgDest_identifier
																								, SourceData/Infrastructuur/OVprijzen/NS/NS_tariefeenheden_matrix/ConnectedNetwork/ODMatrix/Prijs_voltarief)
																					: impl/IsPrevLegSameAgency //
																						? PrijsTabel/VariabelePrijs[impl/PrijsTabel_rel] * Afgelegde_afstand_OV //instaptarief al in vorige leg geteld, dus enkel variabele deel
																						: PrijsTabel/VastePrijs[impl/PrijsTabel_rel] + (PrijsTabel/VariabelePrijs[impl/PrijsTabel_rel] * Afgelegde_afstand_OV); //instaptarief plus variabele deel
						
						unit<uint32> impl := uq_reis_route_sorted
						{
							attribute<Modes>         Mode_rel                      := (uq_reis_route/Mode_rel[uq_reis_route/Reis_Time_Sort_Index])[values];

							attribute<uint64>        Reis_FirstTime_Identifier     := uint64(Reis_rel) * value(1000000000, uint64) + value(First_StopTime_Route, uint64);
							attribute<uint64>        Reis_LastTime_Identifier      := uint64(Reis_rel) * value(1000000000, uint64) + value(Last_StopTime_Route, uint64);
							attribute<string>        RouteName_short               := Routes/route_short_name[Route_rel];
							
							attribute<bool>          IsNextLegSameAgency           := reis_rel == reis_rel[add_or_null(id(.),1[.])] && agency_rel == agency_rel[add_or_null(id(.),1[.])];
							attribute<bool>          IsPrevLegSameAgency           := reis_rel == reis_rel[sub_or_null(id(.),1[.])] && agency_rel == agency_rel[sub_or_null(id(.),1[.])];

							attribute<string>        Mode_Agency_CG_Lijn_identifier := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel] +'_'+ Concessiegebied/name[Start_Concessiegebied_rel] + '_' + RouteName_short;
							attribute<string>        Mode_Agency_CG_identifier      := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel] +'_'+ Concessiegebied/name[Start_Concessiegebied_rel];
							attribute<string>        Mode_Agency_identifier         := Modes/name[Mode_rel] +'_'+ Agencies/name[Agency_rel];
						
							attribute<NS_Stations>   From_NS_Stations_rel          := Stops/Recollect/NS_Stations_rel[FromStop_rel];
							attribute<NS_Stations>   To_NS_Stations_rel            := IsNextLegSameAgency 
																							? Stops/Recollect/NS_Stations_rel[ToStop_rel[add_or_null(id(.),1[.])]]
																							: Stops/Recollect/NS_Stations_rel[ToStop_rel];
							attribute<upoint>        NS_OrgDest_identifier         := point_xy(From_NS_Stations_rel, To_NS_Stations_rel, upoint);

							attribute<PrijsTabel>    PrijsTabel_rel_initial        := rlookup(Mode_Agency_CG_Lijn_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
							attribute<PrijsTabel>    PrijsTabel_rel_augmented1     := rlookup(Mode_Agency_CG_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
							attribute<PrijsTabel>    PrijsTabel_rel_augmented2     := rlookup(Mode_Agency_identifier, PrijsTabel/Mode_Agency_CG_Lijn_identifier);
							attribute<PrijsTabel>    PrijsTabel_rel_augmentation   := MakeDefined(PrijsTabel_rel_augmented1, PrijsTabel_rel_augmented2);
							attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev1 := rlookup(Mode_Agency_CG_identifier, PrijsTabel/Mode_Agency_CG_identifier);
							attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev2 := rlookup(Mode_Agency_identifier, PrijsTabel/Mode_Agency_identifier);
							attribute<PrijsTabel>    PrijsTabel_rel_augmented_rev  := MakeDefined(PrijsTabel_rel_augmented_rev1, PrijsTabel_rel_augmented_rev2);
							attribute<PrijsTabel>    PrijsTabel_rel_augmented      := MakeDefined(PrijsTabel_rel_augmentation, PrijsTabel_rel_augmented_rev);
							attribute<PrijsTabel>    PrijsTabel_rel                := MakeDefined(PrijsTabel_rel_initial, PrijsTabel_rel_augmented);
						
							// attribute<Provincie>       Start_Provincie_rel           := point_in_polygon(Stops/geometry[FromStop_rel], Provincie/geometry);
							attribute<Concessiegebied> Start_Concessiegebied_rel     := point_in_polygon(Stops/geometry[FromStop_rel], Concessiegebied/geometry);
						}
					}
					
					// voor visuaisatie
					attribute<rdc>         Route (arc) := points2sequence(LinkPoints/Point, LinkPoints/Sequence_rel, LinkPoints/Ordinal);
					attribute<rdc>         FromPoint   := StaticNet_subset/FromPoint[point];
					attribute<rdc>         ToPoint     := StaticNet_subset/ToPoint[point];

					unit<uint32> LinkPoints := union_unit(., .)
					{
						attribute<rdc>                  Point        := union_data(., FromPoint, ToPoint);
						attribute<..>                   Sequence_rel := union_data(., id(..), id(..));
						attribute<uint32>               Ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
					}
				}
			}
			
			// unit<uint64> OD_raw := =ModelParameters/Add_OV_PriceInformation ? 'OD_wPrijzen' : 'OD_woPrijzen';
			unit<uint64> OD     := select(NOT(OD_src/IsUnwantedTrip))
			{
				attribute<s_f>              impedance                                       := collect_by_cond(., NOT(OD_src/IsUnwantedTrip), OD_src/impedance);
				attribute<km>               alt_imp                                         := collect_by_cond(., NOT(OD_src/IsUnwantedTrip), OD_src/alt_imp);
				attribute<Org>              OrgZone_rel                                     := collect_by_cond(., NOT(OD_src/IsUnwantedTrip), OD_src/OrgZone_rel);
				attribute<Dest>             DstZone_rel                                     := collect_by_cond(., NOT(OD_src/IsUnwantedTrip), OD_src/DstZone_rel);
				attribute<Euro>             Prijs_per_reis                                  := collect_by_cond(., NOT(OD_src/IsUnwantedTrip), OD_src/Prijs_per_reis);
				attribute<min_f>            reistijd_min                                    := impedance[min_f];
				attribute<km>               afgelegde_afstand_km                            := alt_imp;
				attribute<Combine_OrgDest>  OD_nummer                                       := combine_data(Combine_OrgDest, OrgZone_rel, DstZone_rel);
				
				attribute<float32>          nr_items_of_interest                            := dest/nr_items_of_interest[float32][DstZone_rel];
				attribute<float32>          decay_function                                  := reistijd_min == 0f ? 1f : 1f / (1f + exp(ModelParameters/Advanced/Distance_decay/ov_a + ModelParameters/Advanced/Distance_decay/ov_b*log(reistijd_min / 1[min_f]) + ModelParameters/Advanced/Distance_decay/ov_c*reistijd_min / 1[min_f]));
				attribute<float32>          nr_items_of_interest_decayed                    := MakeDefined(nr_items_of_interest * decay_function,0f);
				attribute<float32>          nr_items_of_interest_bereikbaar_decayed (Org)   := sum(UniqueOD/Best_nr_items_of_interest_decayed, value(UniqueOD/OD_nummer / uint64(#dest), org));
				attribute<float32>          nr_items_of_interest_bereikbaar (Org)           := sum(UniqueOD/Best_nr_items_of_interest, value(UniqueOD/OD_nummer / uint64(#dest), org));

				parameter<string>           MaxDuration_Org2Stop_str                        := string(Org2Stop/ModeMax_min) + 'min';
				parameter<string>           MaxDuration_Stop2Dest_str                       := string(Stop2Dest/ModeMax_min) + 'min';
				attribute<string>           ModeUsed                                        := const(name,.);
				
				attribute<string>           Org_name                                        := org/name[OrgZone_rel];
				attribute<string>           Dest_name                                       := dest/label[DstZone_rel];
				
				attribute<string>           OD_Reistijd_key                                 := string(OD_nummer) +'_' + ModeUsed +'_'+ string(reistijd_min);
				
				unit<uint64> UniqueOD := select_with_org_rel(IsDefined(OD_nummer))
				{
					attribute<float32>          Best_nr_items_of_interest_decayed   := ../nr_items_of_interest_decayed[org_rel];
					attribute<float32>          Best_nr_items_of_interest           := ../nr_items_of_interest[org_rel];
					attribute<min_f>            ShortestTraveltime                  := ../reistijd_min[org_rel];
					attribute<km>               Lengte_Snelste_Reis                 := rjoin(OD_Reistijd_key, ../OD_Reistijd_key, ../afgelegde_afstand_km);
					attribute<Euro>             Prijs_van_snelste_reis              := rjoin(OD_Reistijd_key, ../OD_Reistijd_key, ../Prijs_per_reis);
					attribute<string>           ModeUsed                            := ../ModeUsed[org_rel];
					attribute<Combine_OrgDest>  OD_nummer                           := ../OD_nummer[org_rel];
					attribute<Combine_OrgDest>  values                              := OD_nummer;
					attribute<string>           OrgName                             := Org/name[Origin_rel];
					attribute<string>           DestName                            := Dest/name[Dest_rel];
					attribute<org>              Origin_rel                          := value(OD_nummer / uint64(#Dest), org);
					attribute<dest>             Dest_rel                            := value(OD_nummer % uint64(#Dest), Dest);
					
					attribute<string>           OD_Reistijd_key                     := string(OD_nummer) +'_' + ModeUsed +'_'+ string(ShortestTraveltime);
				}
			}
		}
		
		//combines first degree
		// container OD_traveltime_W_OV_W_with_WW     := OD_Traveltime_combine_first_T('W_OV_W','WW');
		container OD_traveltime_W_OV_W_with_WW     := OD_Traveltime_combine_first_T('WW','W_OV_W');
		container OD_traveltime_B_OV_W_with_BB     := OD_Traveltime_combine_first_T('B_OV_W','BB');
		container OD_traveltime_B_OV_B_with_BB     := OD_Traveltime_combine_first_T('B_OV_B','BB');
		container OD_traveltime_B_Tic_OV_W_with_BB := OD_Traveltime_combine_first_T('B_Tic_OV_W','BB');
		container OD_traveltime_B_Tic_OV_B_with_BB := OD_Traveltime_combine_first_T('B_Tic_OV_B','BB');
		container OD_traveltime_B_T_OV_W_with_BB   := OD_Traveltime_combine_first_T('B_T_OV_W','BB');
		container OD_traveltime_B_T_OV_B_with_BB   := OD_Traveltime_combine_first_T('B_T_OV_B','BB');
		container OD_traveltime_B_TM_OV_W_with_BB  := OD_Traveltime_combine_first_T('B_TM_OV_W','BB');
		container OD_traveltime_B_TM_OV_B_with_BB  := OD_Traveltime_combine_first_T('B_TM_OV_B','BB');
		container OD_traveltime_B_TMT_OV_W_with_BB := OD_Traveltime_combine_first_T('B_TMT_OV_W','BB');
		container OD_traveltime_B_TMT_OV_B_with_BB := OD_Traveltime_combine_first_T('B_TMT_OV_B','BB');
		
		Template OD_Traveltime_combine_first_T
		{
			parameter<string> first_name;
			parameter<string> second_name;
			////
			
			unit<uint64> first  := ='OD_traveltime_'+first_name+'/OD';
			unit<uint64> second := ='OD_traveltime_'+second_name+'/OD';
			
			unit<uint64> OD := union_unit_uint64(first, second)
			{
				attribute<min_f>            reistijd_min                                    := union_data(., first/reistijd_min                , second/reistijd_min);
				attribute<km>               afgelegde_afstand_km                            := union_data(., first/afgelegde_afstand_km        , second/afgelegde_afstand_km);
				attribute<float32>          nr_items_of_interest_decayed                    := union_data(., first/nr_items_of_interest_decayed, second/nr_items_of_interest_decayed);
				attribute<float32>          nr_items_of_interest                            := union_data(., first/nr_items_of_interest        , second/nr_items_of_interest);
				attribute<Combine_OrgDest>  OD_nummer                                       := union_data(., first/OD_nummer                   , second/OD_nummer);
				attribute<Euro>             Prijs_per_reis                                  := union_data(., first/Prijs_per_reis              , second/Prijs_per_reis);
				attribute<UniqueOD>         UniqueOD_rel                                    := rlookup(OD_nummer, UniqueOD/Values);
				attribute<string>           ModeUsed                                        := union_data(., first/ModeUsed                    , second/ModeUsed);
				attribute<float32>          nr_items_of_interest_bereikbaar_decayed (Org)   := sum(UniqueOD/Best_nr_items_of_interest_decayed, value(UniqueOD/values / uint64(#dest), org));
				attribute<float32>          nr_items_of_interest_bereikbaar (Org)           := sum(UniqueOD/Best_nr_items_of_interest, value(UniqueOD/values / uint64(#dest), org));
				
				attribute<string>           OD_Reistijd_key                                 := string(OD_nummer) +'_' + ModeUsed +'_'+ string(reistijd_min);
				
				parameter<string>           Mode1                                           := first_name;
				parameter<string>           Mode2                                           := second_name;
				
				unit<uint64> UniqueOD := unique(OD_nummer)
				{
					attribute<Combine_OrgDest>  OD_nummer                         := values;
					attribute<float32>          Best_nr_items_of_interest_decayed := max(../nr_items_of_interest_decayed, ../UniqueOD_rel);
					attribute<float32>          Best_nr_items_of_interest         := max(../nr_items_of_interest, ../UniqueOD_rel);
					attribute<float32>          ShortestTraveltime                := min(../reistijd_min, ../UniqueOD_rel);
					attribute<string>           ModeUsed                          := Mode1_Shortest ? Mode1 : Mode2_Shortest ? Mode2 : '';
					attribute<Euro>             Prijs_van_snelste_reis            := Mode1_Shortest ? Prijs_per_reis[OD_Mode1_Reistijd_key_OD_rel] : Mode2_Shortest ? Prijs_per_reis[OD_Mode2_Reistijd_key_OD_rel] : null_f;
					attribute<km>               Lengte_Snelste_Reis               := Mode1_Shortest ? afgelegde_afstand_km[OD_Mode1_Reistijd_key_OD_rel] : Mode2_Shortest ? afgelegde_afstand_km[OD_Mode2_Reistijd_key_OD_rel] : null_f;

					attribute<string>           OD_Mode1_Reistijd_key             := string(OD_nummer) +'_' + Mode1+'_'+string(ShortestTraveltime);
					attribute<string>           OD_Mode2_Reistijd_key             := string(OD_nummer) +'_' + Mode2+'_'+string(ShortestTraveltime);
					
					attribute<OD>               OD_Mode1_Reistijd_key_OD_rel      := rlookup(OD_Mode1_Reistijd_key, OD_Reistijd_key);
					attribute<OD>               OD_Mode2_Reistijd_key_OD_rel      := rlookup(OD_Mode2_Reistijd_key, OD_Reistijd_key);
					
					attribute<bool>             Mode1_Shortest                    := IsDefined(OD_Mode1_Reistijd_key_OD_rel);
					attribute<bool>             Mode2_Shortest                    := IsDefined(OD_Mode2_Reistijd_key_OD_rel);
					
					attribute<string>           OrgName                           := Org/name[Origin_rel];
					attribute<string>           DestName                          := Dest/name[Dest_rel];
					attribute<org>              Origin_rel                        := value(OD_nummer / uint64(#Dest), org);
					attribute<dest>             Dest_rel                          := value(OD_nummer % uint64(#Dest), Dest);
				}
			}
		}
		
		//combines second degree
		container OD_traveltime_B_Tic_OV_W_with_W_OV_W_WW     := OD_Traveltime_combine_second_T('B_Tic_OV_W','W_OV_W','WW');
		container OD_traveltime_B_Tic_OV_W_with_W_OV_W_BB     := OD_Traveltime_combine_second_T('B_Tic_OV_W','W_OV_W','BB');
		container OD_traveltime_B_Tic_OV_W_with_B_OV_W_BB     := OD_Traveltime_combine_second_T('B_Tic_OV_W','B_OV_W','BB');
		container OD_traveltime_B_Tic_OV_B_with_W_OV_W_BB     := OD_Traveltime_combine_second_T('B_Tic_OV_B','W_OV_W','BB');
		container OD_traveltime_B_Tic_OV_B_with_B_OV_W_BB     := OD_Traveltime_combine_second_T('B_Tic_OV_B','B_OV_W','BB');
		container OD_traveltime_B_T_OV_W_with_W_OV_W_WW       := OD_Traveltime_combine_second_T('B_T_OV_W','W_OV_W','WW');
		container OD_traveltime_B_T_OV_W_with_W_OV_W_BB       := OD_Traveltime_combine_second_T('B_T_OV_W','W_OV_W','BB');
		container OD_traveltime_B_T_OV_B_with_W_OV_W_BB       := OD_Traveltime_combine_second_T('B_T_OV_B','W_OV_W','BB');
		container OD_traveltime_B_T_OV_W_with_B_OV_W_BB       := OD_Traveltime_combine_second_T('B_T_OV_W','B_OV_W','BB');
		container OD_traveltime_B_T_OV_B_with_B_OV_W_BB       := OD_Traveltime_combine_second_T('B_T_OV_B','B_OV_W','BB');
		container OD_traveltime_B_TM_OV_W_with_W_OV_W_WW      := OD_Traveltime_combine_second_T('B_TM_OV_W','W_OV_W','WW');
		container OD_traveltime_B_TM_OV_W_with_W_OV_W_BB      := OD_Traveltime_combine_second_T('B_TM_OV_W','W_OV_W','BB');
		container OD_traveltime_B_TM_OV_B_with_W_OV_W_BB      := OD_Traveltime_combine_second_T('B_TM_OV_B','W_OV_W','BB');
		container OD_traveltime_B_TM_OV_W_with_B_OV_W_BB      := OD_Traveltime_combine_second_T('B_TM_OV_W','B_OV_W','BB');
		container OD_traveltime_B_TM_OV_B_with_B_OV_W_BB      := OD_Traveltime_combine_second_T('B_TM_OV_B','B_OV_W','BB');
		container OD_traveltime_B_TMT_OV_W_with_W_OV_W_WW     := OD_Traveltime_combine_second_T('B_TMT_OV_W','W_OV_W','WW');
		container OD_traveltime_B_TMT_OV_W_with_W_OV_W_BB     := OD_Traveltime_combine_second_T('B_TMT_OV_W','W_OV_W','BB');
		container OD_traveltime_B_TMT_OV_W_with_B_OV_W_WW     := OD_Traveltime_combine_second_T('B_TMT_OV_W','B_OV_W','WW');
		container OD_traveltime_B_TMT_OV_W_with_B_OV_W_BB     := OD_Traveltime_combine_second_T('B_TMT_OV_W','B_OV_W','BB');
		container OD_traveltime_B_TMT_OV_B_with_W_OV_W_WW     := OD_Traveltime_combine_second_T('B_TMT_OV_B','W_OV_W','WW');
		container OD_traveltime_B_TMT_OV_B_with_W_OV_W_BB     := OD_Traveltime_combine_second_T('B_TMT_OV_B','W_OV_W','BB');
		container OD_traveltime_B_TMT_OV_B_with_B_OV_W_WW     := OD_Traveltime_combine_second_T('B_TMT_OV_B','B_OV_W','WW');
		container OD_traveltime_B_TMT_OV_B_with_B_OV_W_BB     := OD_Traveltime_combine_second_T('B_TMT_OV_B','B_OV_W','BB');
		
		Template OD_Traveltime_combine_second_T
		{
			parameter<string> first_name;
			parameter<string> second_name;
			parameter<string> third_name;
			////
			
			unit<uint64> first  := ='OD_traveltime_'+first_name+'/OD';
			unit<uint64> second := ='OD_traveltime_'+second_name+'/OD';
			unit<uint64> third  := ='OD_traveltime_'+third_name+'/OD';
			
			unit<uint64> OD := union_unit_uint64(first, second, third)
			{
				attribute<float32>          reistijd_min                                    := union_data(., first/reistijd_min                , second/reistijd_min                , third/reistijd_min);
				attribute<float32>          nr_items_of_interest_decayed                    := union_data(., first/nr_items_of_interest_decayed, second/nr_items_of_interest_decayed, third/nr_items_of_interest_decayed);
				attribute<float32>          nr_items_of_interest                            := union_data(., first/nr_items_of_interest        , second/nr_items_of_interest        , third/nr_items_of_interest);
				attribute<Combine_OrgDest>  OD_nummer                                       := union_data(., first/OD_nummer                   , second/OD_nummer                   , third/OD_nummer);
				attribute<Euro>             Prijs_per_reis                                  := union_data(., first/Prijs_per_reis              , second/Prijs_per_reis              , third/Prijs_per_reis);
				attribute<UniqueOD>         UniqueOD_rel                                    := rlookup(OD_nummer, UniqueOD/Values);
				attribute<string>           ModeUsed                                        := union_data(., first/ModeUsed                    , second/ModeUsed                    , third/ModeUsed);
				attribute<float32>          nr_items_of_interest_bereikbaar_decayed (Org)   := sum(UniqueOD/Best_nr_items_of_interest_decayed, value(UniqueOD/values / uint64(#dest), org));
				attribute<float32>          nr_items_of_interest_bereikbaar (Org)           := sum(UniqueOD/Best_nr_items_of_interest, value(UniqueOD/values / uint64(#dest), org));
				
				attribute<string>           Reistijd_key                                    := ModeUsed +'_'+ string(reistijd_min);
				parameter<string>           Mode1                                           := first_name;
				parameter<string>           Mode2                                           := second_name;
				parameter<string>           Mode3                                           := third_name;
				
				unit<uint64> UniqueOD := unique(OD_nummer)
				{
					attribute<float32>          Best_nr_items_of_interest_decayed := max(../nr_items_of_interest_decayed, ../UniqueOD_rel);
					attribute<float32>          Best_nr_items_of_interest         := max(../nr_items_of_interest, ../UniqueOD_rel);
					attribute<float32>          ShortestTraveltime                := min(../reistijd_min, ../UniqueOD_rel);
					attribute<string>           ModeUsed                          := ArgMin1 ? Mode1 : ArgMin2 ? Mode2  : ArgMin3 ? Mode3 : '';
					attribute<Euro>             Prijs_van_snelste_reis            := ArgMin1 ? Prijs_per_reis[Mode1_Reistijd_key_OD_rel] : ArgMin2 ? Prijs_per_reis[Mode2_Reistijd_key_OD_rel] : ArgMin3 ? Prijs_per_reis[Mode3_Reistijd_key_OD_rel] : null_f;
					
					attribute<string>           Mode1_Reistijd_key                := Mode1+'_'+string(ShortestTraveltime);
					attribute<string>           Mode2_Reistijd_key                := Mode2+'_'+string(ShortestTraveltime);
					attribute<string>           Mode3_Reistijd_key                := Mode3+'_'+string(ShortestTraveltime);
					
					attribute<OD>               Mode1_Reistijd_key_OD_rel         := rlookup(Mode1_Reistijd_key, Reistijd_key);
					attribute<OD>               Mode2_Reistijd_key_OD_rel         := rlookup(Mode2_Reistijd_key, Reistijd_key);
					attribute<OD>               Mode3_Reistijd_key_OD_rel         := rlookup(Mode3_Reistijd_key, Reistijd_key);
					
					attribute<bool>             ArgMin1                           := IsDefined(Mode1_Reistijd_key_OD_rel);
					attribute<bool>             ArgMin2                           := IsDefined(Mode2_Reistijd_key_OD_rel);
					attribute<bool>             ArgMin3                           := IsDefined(Mode3_Reistijd_key_OD_rel);
					
					attribute<string>           OrgName                           := Org/name[Origin_rel];
					attribute<string>           DestName                          := Dest/name[Dest_rel];
					attribute<org>              Origin_rel                        := value(values / uint64(#Dest), org);
					attribute<dest>             Dest_rel                          := value(values % uint64(#Dest), Dest);
				}
			}
		}
		
		
		container CreateExports :=
			for_each_ne(
				ModelParameters/Advanced/Export_CombinationTypes/name
				, 'CreateExports_T('+quote(ModelParameters/Advanced/Export_CombinationTypes/name)+')'
			);
		
		Template CreateExports_T
		{
			parameter<string>  TypeName;
			
			unit<uint64>       domain                                        := ='OD_traveltime_'+TypeName+'/OD';
			unit<uint64>       domain_UniqueOD                               := ='OD_traveltime_'+TypeName+'/OD/UniqueOD';
			attribute<float32> nr_items_of_interest_bereikbaar_decayed (org) := domain/nr_items_of_interest_bereikbaar_decayed; //, StorageName = "=fileNamePrefix+''+ModelParameters/items_of_interest+'_decayed'+'_'+TypeName+''+fileNameSuffix +'.fss'";
			attribute<string>  ShortestTraveltime_min (domain_UniqueOD)      := string(domain_UniqueOD/ShortestTraveltime); //Convert the impedance from seconds to minutes, and store it as a string value.
			attribute<string>  ModeUsed               (domain_UniqueOD)      := domain_UniqueOD/ModeUsed; //Convert the impedance from seconds to minutes, and store it as a string value.
			attribute<string>  Prijs_van_snelste_reis (domain_UniqueOD)      := string(domain_UniqueOD/Prijs_van_snelste_reis); 
			
			container LongFormat
			{
				attribute<string>  BodyLines_fullOD_wPrijs (domain_UniqueOD) := domain_UniqueOD/OrgName + ';' + domain_UniqueOD/DestName + ';' + ShortestTraveltime_min + ';' + ModeUsed + ';' + Prijs_van_snelste_reis;
				parameter<string>  File_fullOD_wPrijs                        := 'OrgName;DestName;Traveltime_m_'+inTime_string+';ModeUsed_'+inTime_string+';Price\n'++AsList(BodyLines_fullOD_wPrijs, '\n'), StorageName = "=fileNamePrefix+'Traveltime_Long_'+TypeName+''+fileNameSuffix +'.csv'", StorageType = "str";
			
				attribute<string>  BodyLines_fullOD_woPrijs (domain_UniqueOD) := domain_UniqueOD/OrgName + ';' + domain_UniqueOD/DestName + ';' + ShortestTraveltime_min + ';' + ModeUsed;
				parameter<string>  File_fullOD_woPrijs                        := 'OrgName;DestName;Traveltime_m_'+inTime_string+';ModeUsed_'+inTime_string+'\n'++AsList(BodyLines_fullOD_woPrijs, '\n'), StorageName = "=fileNamePrefix+'Traveltime_Long_'+TypeName+''+fileNameSuffix +'.csv'", StorageType = "str";
			
				
				// container Results0
				container Results
				{
					parameter<string>  File_fullOD := =ModelParameters/Add_OV_PriceInformation ? 'File_fullOD_wPrijs' : 'File_fullOD_woPrijs';
				}
				
				// container Results := FenceContainer(Results0, 'Results for '+TypeName+' in region '+regio_name_if_enkel_sub+' are finished calculating'); //
				
				attribute<string>  BodyLines_decay (org)              := org/name + ';' + string(nr_items_of_interest_bereikbaar_decayed);
				parameter<string>  File_decay                         := 'Org;'+ModelParameters/Advanced/items_of_interest+'_'+inTime_string+'\n'++AsList(BodyLines_decay, '\n'), StorageName = "=fileNamePrefix+ModelParameters/Advanced/items_of_interest+'_decayed_Long_'+TypeName+''+fileNameSuffix +'.csv'", StorageType = "str";
			}
			
			
			parameter<string> fileNamePrefix := ModelParameters/Advanced/fileNamePrefix;
			parameter<string> fileNameSuffix :=  
				'_' + ModelParameters/Analysis_Date + 
				'_' + ModelParameters/Advanced/Arrival_or_Departure_at_time + 
				'_' + inTime_string + 
				'_ORG-'    + ModelParameters/Orgset + '-' + regio_name_if_enkel_sub + 
				'_DEST-'   + ModelParameters/Advanced/DestSet_string;
		}
	}
}