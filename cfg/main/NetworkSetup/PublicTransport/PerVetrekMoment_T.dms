Template PerVetrekMoment_T
{
	parameter<uint32>   inTime;
	parameter<string>   inTime_string;
	///
	parameter<min>      Max_V_Time := max(/ModelParameters/Advanced/OV_Voortransport_Typen/MaxTime[min]);
	
	unit<uint64> Within_VW_Window := select_with_org_rel(PublicTransport_Prep/Result/From_Time_rel <= inTime + convert(Max_V_Time, s_f)[Time] + ModelParameters/Advanced/MaxWachttijdThuis)
	, Descr = "Opties binnen voortransport + wachten thuis window"
	{
		attribute<ct>                Price                       := org_rel -> Result/Price;
		attribute<ct>                Price_augm                  := org_rel -> Result/Price_augm;
		attribute<s>                 Traveltime                  := org_rel -> Result/Traveltime;
		attribute<Toegestane_Ketens> Toegestane_Keten_rel        := org_rel -> Result/Toegestane_Keten_rel;
		
		attribute<c_Time_Places>     c_FromTime_Place_rel        := org_rel -> Result/c_FromTime_Place_rel;
		attribute<c_Time_Places>     c_ToTime_Place_rel          := org_rel -> Result/c_ToTime_Place_rel;
		attribute<Places>            From_Place_rel              := value(c_FromTime_Place_rel % uint64(#Places), Places);
		attribute<Time>              From_Time_rel               := value(c_FromTime_Place_rel / uint64(#Places), Time);
		
		attribute<dam>               TravelDist_Bus              := org_rel -> Result/TravelDist_Bus;
		attribute<dam>               Traveldist_Metro            := org_rel -> Result/Traveldist_Metro;
		attribute<dam>               Traveldist_Tram             := org_rel -> Result/Traveldist_Tram;
		attribute<dam>               Traveldist_Rail             := org_rel -> Result/Traveldist_Rail;
		attribute<dam>               Traveldist_Ferry            := org_rel -> Result/Traveldist_Ferry;
	}

	unit<uint64> Add_V_to_PT   := join_equal_values_uint64(V/To_Place_rel, Within_VW_Window/From_Place_rel)
	{
		attribute<V>                                           V_rel                            := first_rel; //debug
		attribute<Within_VW_Window>                            PT_rel                           := second_rel; //debug
		attribute<Places>                                      Place_rel                        := X_rel; //debug

		attribute<Time>                                        V_From_Time_rel                  := const(inTime[Time],V)[V_rel];
		attribute<Places>                                      V_From_Place_rel                 := V/From_Place_rel[V_rel];
		attribute<Time>                                        V_To_Time_rel                    := V_From_Time_rel + V_time[Time];
		attribute<c_Time_Places>                               V_c_fromTime_Place_rel           := combine_data(c_Time_Places, V_From_Time_rel, V_From_Place_rel);
		
		attribute<Time>                                        PT_From_Time_rel                 := Within_VW_Window/From_Time_rel[PT_rel];
		attribute<Places>                                      PT_From_Place_rel                := Within_VW_Window/From_Place_rel[PT_rel];
		attribute<Stops>                                       PT_From_Stop_rel                 := Places/Stop_rel[PT_From_Place_rel];
		attribute<c_Time_Places>                               PT_c_fromTime_Place_rel          := Within_VW_Window/c_fromTime_Place_rel[PT_rel];
		attribute<c_Time_Places>                               PT_c_toTime_Place_rel            := Within_VW_Window/c_toTime_Place_rel[PT_rel];
		
		attribute<c_Time_Stops>                                PT_c_fromTime_Stop_rel           := combine_data(c_Time_Stops, PT_From_Time_rel, PT_From_Stop_rel);
		attribute</SourceData/Infrastructuur/GTFS/RelevantSelection/ScheduledLinks>                                        IsPT_departureEvent_ActualPT0     := rlookup(PT_c_fromTime_Stop_rel, /SourceData/Infrastructuur/GTFS/RelevantSelection/ScheduledLinks/c_fromTime_Stop_rel);//debug
		attribute<bool>                                        IsPT_departureEvent_ActualPT     := IsDefined(IsPT_departureEvent_ActualPT0);//debug
		
		attribute<Time>                                        StartWacht_Time_rel              := V_To_Time_rel;
		attribute<Time>                                        EindWacht_Time_rel               := value(PT_c_fromTime_Place_rel / uint64(#Places), Time);
		
		attribute<s>                                           V_time                           := V/impedance[V_rel];
		attribute<Modes>                                       V_mode_rel                       := V/Mode_rel[V_rel];
		attribute<Time>                                        Wachttijd_Time_rel               := sub_or_null(EindWacht_Time_rel, StartWacht_Time_rel);
		attribute<s>                                           W_time                           := Wachttijd_Time_rel[s];
		
		attribute<c_Time_Places>                               c_fromTime_Place_rel             := V_c_fromTime_Place_rel;
		attribute<c_Time_Places>                               c_toTime_Place_rel               := PT_c_toTime_Place_rel;
		
		attribute<ct>                                          V_price                          := V/Price[V_rel];

		attribute<ct>                                          Price                            := Within_VW_Window/Price[PT_rel];
		attribute<ct>                                          Price_augm                       := Within_VW_Window/Price_augm[PT_rel] + V_price;
		attribute<s>                                           PT_time                          := Within_VW_Window/Traveltime[PT_rel];
		attribute<Toegestane_Ketens>                           Toegestane_Keten_rel             := Within_VW_Window/Toegestane_Keten_rel[PT_rel];
		attribute<s>                                           Traveltime                       := (ModelParameters/Advanced/WachttijdThuisMeetellen * W_time) + V_time + PT_time;
		
		attribute<dam>                                         TravelDist_Bus                   := Within_VW_Window/TravelDist_Bus[PT_rel];
		attribute<dam>                                         Traveldist_Metro                 := Within_VW_Window/Traveldist_Metro[PT_rel];
		attribute<dam>                                         Traveldist_Tram                  := Within_VW_Window/Traveldist_Tram[PT_rel];
		attribute<dam>                                         Traveldist_Rail                  := Within_VW_Window/Traveldist_Rail[PT_rel];
		attribute<dam>                                         Traveldist_Ferry                 := Within_VW_Window/Traveldist_Ferry[PT_rel];
		
		attribute<bool>                                        IsVTimeNotTooLong                := switch(
																										case(V_mode_rel == Modes/v/Walking, V_time <= convert(ModelParameters/MaxWalkingTime_Org2Stops, s))
																										, case(V_mode_rel == Modes/v/Cycling, V_time <= convert(ModelParameters/MaxCyclingTime_Org2Stops, s))
																										, FALSE
																									);
		attribute<bool>                                        IsValid                          := Wachttijd_Time_rel <= ModelParameters/Advanced/MaxWachttijdThuis && IsVTimeNotTooLong && IsPT_departureEvent_ActualPT;
		
		unit<uint64> Result := select_with_org_rel(IsValid)
		{
			attribute<c_Time_Places>               c_fromTime_Place_rel             := org_rel -> c_fromTime_Place_rel;
			attribute<c_Time_Places>               c_toTime_Place_rel               := org_rel -> c_toTime_Place_rel;
		
			attribute<s>                           W_time                           := org_rel -> W_time;
			attribute<s>                           V_time                           := org_rel -> V_time;
			attribute<Modes>                       V_mode_rel                       := org_rel -> V_mode_rel;
			
			attribute<ct>                          Price                            := org_rel -> Price;
			attribute<ct>                          Price_augm                       := org_rel -> Price_augm;
			attribute<s>                           PT_time                          := org_rel -> PT_time;
			attribute<Toegestane_Ketens>           Toegestane_Keten_rel             := org_rel -> Toegestane_Keten_rel;
			attribute<s>                           Traveltime                       := org_rel -> Traveltime;
			attribute<Places>                      To_Place_rel                     := value(c_ToTime_Place_rel % uint64(#Places), Places); 
			
			attribute<dam>                         TravelDist_Bus                   := org_rel -> TravelDist_Bus;
			attribute<dam>                         Traveldist_Metro                 := org_rel -> Traveldist_Metro;
			attribute<dam>                         Traveldist_Tram                  := org_rel -> Traveldist_Tram;
			attribute<dam>                         Traveldist_Rail                  := org_rel -> Traveldist_Rail;
			attribute<dam>                         Traveldist_Ferry                 := org_rel -> Traveldist_Ferry;
		}
	}
	
	unit<uint64> Add_N_to_VPT   := join_equal_values_uint64(Add_V_to_PT/Result/To_Place_rel, N/From_Place_rel)
	{
		attribute<Add_V_to_PT/Result>                          PT_rel                           := first_rel; //debug
		attribute<N>                                           N_rel                            := second_rel; //debug
		attribute<Places>                                      Place_rel                        := X_rel; //debug
		
		attribute<c_Time_Places>                               PT_c_fromTime_Place_rel          := Add_V_to_PT/Result/c_fromTime_Place_rel[PT_rel];
		attribute<c_Time_Places>                               PT_c_toTime_Place_rel            := Add_V_to_PT/Result/c_toTime_Place_rel[PT_rel];
		attribute<Time>                                        PT_To_Time_rel                   := value(PT_c_toTime_Place_rel / uint64(#Places), Time);
		attribute<Time>                                        N_To_Time_rel                    := PT_To_Time_rel + N_time[Time];
		attribute<Places>                                      N_to_Place_rel                   := N/To_Place_rel[N_rel];
		attribute<s>                                           N_time                           := N/impedance[N_rel];
		attribute<Modes>                                       N_mode_rel                       := N/Mode_rel[N_rel];
		attribute<ct>                                          N_price                          := N/Price[N_rel];
		
		attribute<c_Time_Places>                               c_fromTime_Place_rel             := PT_c_fromTime_Place_rel;
		attribute<c_Time_Places>                               c_toTime_Place_rel               := combine_data(c_Time_Places, N_To_Time_rel, N_to_Place_rel);
		
		attribute<ct>                                          Price                            := Add_V_to_PT/Result/Price[PT_rel];
		attribute<ct>                                          Price_augm                       := Add_V_to_PT/Result/Price_augm[PT_rel] + N_price;
		attribute<Toegestane_Ketens>                           Toegestane_Keten_rel             := Add_V_to_PT/Result/Toegestane_Keten_rel[PT_rel];
		attribute<s>                                           Traveltime                       := Add_V_to_PT/Result/Traveltime[PT_rel] + N_time;
		attribute<s>                                           W_time                           := Add_V_to_PT/Result/W_time[PT_rel];
		attribute<s>                                           V_time                           := Add_V_to_PT/Result/V_time[PT_rel];
		attribute<s>                                           PT_time                          := Add_V_to_PT/Result/PT_time[PT_rel];
		attribute<Modes>                                       V_mode_rel                       := Add_V_to_PT/Result/V_Mode_rel[PT_rel];
		
		attribute<dam>                                         TravelDist_Bus                   := Add_V_to_PT/Result/TravelDist_Bus[PT_rel];
		attribute<dam>                                         Traveldist_Metro                 := Add_V_to_PT/Result/Traveldist_Metro[PT_rel];
		attribute<dam>                                         Traveldist_Tram                  := Add_V_to_PT/Result/Traveldist_Tram[PT_rel];
		attribute<dam>                                         Traveldist_Rail                  := Add_V_to_PT/Result/Traveldist_Rail[PT_rel];
		attribute<dam>                                         Traveldist_Ferry                 := Add_V_to_PT/Result/Traveldist_Ferry[PT_rel];
		
		attribute<bool>                                        IsNTimeNotTooLong                := switch(
																										  case(N_mode_rel == Modes/v/Walking, N_time <= convert(ModelParameters/MaxWalkingTime_Stops2Dest, s))
																										, case(N_mode_rel == Modes/v/Cycling, N_time <= convert(ModelParameters/MaxCyclingTime_Stops2Dest, s))
																										, FALSE
																									);
		attribute<bool>                                        IsValid                          := Traveltime <= /ModelParameters/MaxTravelTime[s] && IsNTimeNotTooLong;
		unit<uint64> Result := select_with_org_rel(IsValid)
		{
			attribute<c_Time_Places>               c_fromTime_Place_rel             := org_rel -> c_fromTime_Place_rel;
			attribute<c_Time_Places>               c_toTime_Place_rel               := org_rel -> c_toTime_Place_rel;
		  
			attribute<s>                           W_time                           := org_rel -> W_time, Descr = "Waiting at home";
			attribute<s>                           V_time                           := org_rel -> V_time;
			attribute<s>                           PT_time                          := org_rel -> PT_time;
			attribute<s>                           N_time                           := org_rel -> N_time;
			
			attribute<ct>                          Price                            := org_rel -> Price;
			attribute<ct>                          Price_augm                       := org_rel -> Price_augm;
			attribute<s>                           Traveltime                       := org_rel -> Traveltime;
			attribute<Toegestane_Ketens>           Toegestane_Keten_rel             := org_rel -> Toegestane_Keten_rel;
			attribute<Modes>                       V_mode_rel                       := org_rel -> V_mode_rel;
			attribute<Modes>                       N_mode_rel                       := org_rel -> N_mode_rel;
			
			attribute<dam>                         TravelDist_Bus                   := org_rel -> TravelDist_Bus;
			attribute<dam>                         Traveldist_Metro                 := org_rel -> Traveldist_Metro;
			attribute<dam>                         Traveldist_Tram                  := org_rel -> Traveldist_Tram;
			attribute<dam>                         Traveldist_Rail                  := org_rel -> Traveldist_Rail;
			attribute<dam>                         Traveldist_Ferry                 := org_rel -> Traveldist_Ferry;
		}
	}
	
	unit<uint64> Union_with_DirectOD   := union_unit_uint64(Add_N_to_VPT/Result, Direct_OD)
	{
		attribute<c_Time_Places>               c_fromTime_Place_rel             := union_data(., Add_N_to_VPT/Result/c_FromTime_Place_rel,  combine_data(c_Time_Places, inTime[Time], Direct_OD/From_Place_rel)); 
		attribute<c_Time_Places>               c_toTime_Place_rel               := union_data(., Add_N_to_VPT/Result/c_toTime_Place_rel, combine_data(c_Time_Places, inTime[Time] + Direct_OD/Duration_seconds[Time], Direct_OD/To_Place_rel)); 
	
		attribute<s>                           W_time                           := union_data(., Add_N_to_VPT/Result/W_time,  const(0w, Direct_OD, s));
		attribute<s>                           V_time                           := union_data(., Add_N_to_VPT/Result/V_time,  Direct_OD/duration_seconds);
		attribute<s>                           PT_time                          := union_data(., Add_N_to_VPT/Result/PT_time, const(0w, Direct_OD, s));
		attribute<s>                           N_time                           := union_data(., Add_N_to_VPT/Result/N_time,  const(0w, Direct_OD, s));
		
		attribute<ct>                          Price                            := union_data(., Add_N_to_VPT/Result/Price, const(0w, Direct_OD, ct));
		attribute<ct>                          Price_augm                       := union_data(., Add_N_to_VPT/Result/Price_augm, Direct_OD/Price_Augm);
		attribute<s>                           Traveltime                       := union_data(., Add_N_to_VPT/Result/Traveltime, Direct_OD/duration_seconds);
		attribute<Toegestane_Ketens>           Toegestane_Keten_rel             := union_data(., Add_N_to_VPT/Result/Toegestane_Keten_rel, const(null_u, Direct_OD, Toegestane_Ketens));
		attribute<Modes>                       V_mode_rel                       := union_data(., Add_N_to_VPT/Result/V_mode_rel, Direct_OD/Mode_rel);
		attribute<Modes>                       N_mode_rel                       := union_data(., Add_N_to_VPT/Result/N_mode_rel, const(null_b, Direct_OD, modes));
		
		attribute<dam>                         TravelDist_Bus                   := union_data(., Add_N_to_VPT/Result/TravelDist_Bus, const(0w, Direct_OD, dam));
		attribute<dam>                         Traveldist_Metro                 := union_data(., Add_N_to_VPT/Result/Traveldist_Metro, const(0w, Direct_OD, dam));
		attribute<dam>                         Traveldist_Tram                  := union_data(., Add_N_to_VPT/Result/Traveldist_Tram, const(0w, Direct_OD, dam));
		attribute<dam>                         Traveldist_Rail                  := union_data(., Add_N_to_VPT/Result/Traveldist_Rail, const(0w, Direct_OD, dam));
		attribute<dam>                         Traveldist_Ferry                 := union_data(., Add_N_to_VPT/Result/Traveldist_Ferry, const(0w, Direct_OD, dam));
		
		attribute<uint32>                      PriceTime_Score                  := =ModelParameters/MinimiseCriterium == 'Price'
																					? 'value(Price_augm, uint32) * value(ModelParameters/MaxTravelTime[s], uint32) + value(Traveltime, uint32)'
																					: 'value(Traveltime, uint32) * 10000 + value(Price_augm, uint32)';
																					
		#include<../OD_uq_attributen.dms>
		
		unit<uint64>          OD_key_set    := combine_unit_uint64(uq_c_FromTime_Place, uq_c_ToTime_Place);
		attribute<OD_key_set> OD_key        := combine_data(OD_key_set, uq_c_FromTime_Place_rel, uq_c_ToTime_Place_rel);
		unit<uint64>          uq_OD_key     := unique(OD_key);
		attribute<uq_OD_key>  uq_OD_key_rel := rlookup(OD_key, uq_OD_key/values); //attribuut om partitionering van price/traveltime etc te doen.
	}
	
	unit<uint64> Result_withDuplicate_Places := Union_with_DirectOD/uq_OD_key
	, Descr = "Set that still contains duplicate from/to places, arriving at different times. So we need to condense it one more time."
	{
		attribute<Union_with_DirectOD/uq_c_FromTime_Place>  uq_c_FromTime_Place_rel     := value(values / #Union_with_DirectOD/uq_c_ToTime_Place, Union_with_DirectOD/uq_c_FromTime_Place);
		attribute<Union_with_DirectOD/uq_c_ToTime_Place>    uq_c_ToTime_Place_rel       := value(values % #Union_with_DirectOD/uq_c_ToTime_Place, Union_with_DirectOD/uq_c_ToTime_Place);
		attribute<c_Time_Places>                            c_FromTime_Place_rel        := Union_with_DirectOD/uq_c_FromTime_Place/c_FromTime_Place_rel[uq_c_FromTime_Place_rel];
		attribute<c_Time_Places>                            c_ToTime_Place_rel          := Union_with_DirectOD/uq_c_ToTime_Place/c_ToTime_Place_rel[uq_c_ToTime_Place_rel];
		 
		attribute<Time>                                     From_Time_rel               := value(c_FromTime_Place_rel / uint64(#Places), Time);
		attribute<Places>                                   From_Place_rel              := value(c_FromTime_Place_rel % uint64(#Places), Places);
		attribute<Time>                                     To_Time_rel                 := value(c_ToTime_Place_rel / uint64(#Places), Time);
		attribute<Places>                                   To_Place_rel                := value(c_ToTime_Place_rel % uint64(#Places), Places);
		
		attribute<uint32>                                   PriceTime_Score             := =ModelParameters/MinimiseCriterium == 'Price'
																							? 'value(Price_augm, uint32) * value(ModelParameters/MaxTravelTime[s], uint32) + value(Traveltime, uint32)'
																							: 'value(Traveltime, uint32) * 10000 + value(Price_augm, uint32)';
		
		attribute<Union_with_DirectOD>                      Min_Index                   := min_index(Union_with_DirectOD/PriceTime_Score, Union_with_DirectOD/uq_OD_key_rel);

		attribute<ct>                                       Price                       := Min_Index -> Price;
		attribute<ct>                                       Price_augm                  := Min_Index -> Price_augm;
		attribute<s>                                        Traveltime                  := Min_Index -> Traveltime;
		attribute<Toegestane_Ketens>                        Toegestane_Keten_rel        := Min_Index -> Toegestane_Keten_rel;
		attribute<s>                                        W_time                      := Min_Index -> W_time, Descr = "Waiting at home";
		attribute<s>                                        V_time                      := Min_Index -> V_time;
		attribute<s>                                        PT_time                     := Min_Index -> PT_time;
		attribute<s>                                        N_time                      := Min_Index -> N_time;
		attribute<Modes>                                    V_mode_rel                  := Min_Index -> V_mode_rel;
		attribute<Modes>                                    N_mode_rel                  := Min_Index -> N_mode_rel;
		
		attribute<dam>                                      TravelDist_Bus              := Min_Index -> TravelDist_Bus;
		attribute<dam>                                      Traveldist_Metro            := Min_Index -> Traveldist_Metro;
		attribute<dam>                                      Traveldist_Tram             := Min_Index -> Traveldist_Tram;
		attribute<dam>                                      Traveldist_Rail             := Min_Index -> Traveldist_Rail;
		attribute<dam>                                      Traveldist_Ferry            := Min_Index -> Traveldist_Ferry;
		
		unit<uint64>          OD_key_set    := combine_unit_uint64(Places, Places);
		attribute<OD_key_set> OD_key        := combine_data(OD_key_set, From_Place_rel, To_Place_rel);
		unit<uint64>          uq_OD_key     := unique(OD_key);
		attribute<uq_OD_key>  uq_OD_key_rel := rlookup(OD_key, uq_OD_key/values); //attribuut om partitionering van price/traveltime etc te doen.
	}
	
	unit<uint64> Result := Result_withDuplicate_Places/uq_OD_key
	, Descr = "Final set"
	{
		attribute<Result_withDuplicate_Places>              Min_Index                   := min_index(Result_withDuplicate_Places/PriceTime_Score, Result_withDuplicate_Places/uq_OD_key_rel);
		
		attribute<ct>                                       Price                       := Min_Index -> Price;
		attribute<ct>                                       Price_augm                  := Min_Index -> Price_augm;
		attribute<s>                                        Traveltime                  := Min_Index -> Traveltime;
		attribute<Toegestane_Ketens>                        Toegestane_Keten_rel        := Min_Index -> Toegestane_Keten_rel;
		attribute<s>                                        W_time                      := Min_Index -> W_time, Descr = "Waiting at home";
		attribute<s>                                        V_time                      := Min_Index -> V_time;
		attribute<s>                                        PT_time                     := Min_Index -> PT_time;
		attribute<s>                                        N_time                      := Min_Index -> N_time;
		attribute<Modes>                                    V_mode_rel                  := Min_Index -> V_mode_rel;
		attribute<Modes>                                    N_mode_rel                  := Min_Index -> N_mode_rel;
		
		attribute<dam>                                      TravelDist_Bus              := Min_Index -> TravelDist_Bus;
		attribute<dam>                                      Traveldist_Metro            := Min_Index -> Traveldist_Metro;
		attribute<dam>                                      Traveldist_Tram             := Min_Index -> Traveldist_Tram;
		attribute<dam>                                      Traveldist_Rail             := Min_Index -> Traveldist_Rail;
		attribute<dam>                                      Traveldist_Ferry            := Min_Index -> Traveldist_Ferry;
		
		attribute<Time>                                     From_Time_rel               := Min_Index -> From_Time_rel;
		attribute<Places>                                   From_Place_rel              := Min_Index -> From_Place_rel;
		attribute<Time>                                     To_Time_rel                 := Min_Index -> To_Time_rel;
		attribute<Places>                                   To_Place_rel                := Min_Index -> To_Place_rel;
		attribute<Stops>                                    From_Stop_rel               := Places/Stop_rel[From_Place_rel];
		attribute<Stops>                                    To_Stop_rel                 := Places/Stop_rel[To_Place_rel];
		attribute<string>                                   OrgName                     := Places/label[From_Place_rel];
		attribute<string>                                   DestName                    := Places/label[To_Place_rel];
		attribute<string>                                   ModeUsed                    := MakeDefined(Modes/name[V_mode_rel],'') + '_' + MakeDefined(Toegestane_Ketens/name[Toegestane_Keten_rel],'') + '_' + MakeDefined(Modes/name[N_mode_rel],'');
	}
	
	container CreateExports
	{
		unit<uint64>       domain                                        := Result;
		// attribute<float32> nr_items_of_interest_bereikbaar_decayed (org) := domain/nr_items_of_interest_bereikbaar_decayed;
		attribute<string>  Traveltime                           (domain) := string(convert(domain/Traveltime, min_f)); 
		attribute<string>  Price                                (domain) := string(convert(domain/Price, euro)); 
		attribute<string>  ModeUsed                             (domain) := domain/ModeUsed; 
		attribute<string>  TravelDist_Bus                       (domain) := string(convert(domain/TravelDist_Bus, m)); 
		attribute<string>  Traveldist_Metro                     (domain) := string(convert(domain/Traveldist_Metro, m));  
		attribute<string>  Traveldist_Tram                      (domain) := string(convert(domain/Traveldist_Tram, m)); 
		attribute<string>  Traveldist_Rail                      (domain) := string(convert(domain/Traveldist_Rail, m)); 
		attribute<string>  Traveldist_Ferry                     (domain) := string(convert(domain/Traveldist_Ferry, m));  
		
		container LongFormat
		{
			attribute<string>  BodyLines_fullOD (domain) := domain/OrgName + ';' + domain/DestName + ';' + Traveltime + ';' + Price + ';' + ModeUsed + ';' + TravelDist_Bus + ';' + Traveldist_Metro + ';' + Traveldist_Tram + ';' + Traveldist_Rail + ';' + Traveldist_Ferry;
			parameter<string>  File_fullOD               := 'OrgName;DestName;Traveltime_'+inTime_string+';Price_'+inTime_string+';ModeUsed_'+inTime_string+';TravelDist_Bus_'+inTime_string+';Traveldist_Metro_'+inTime_string+';Traveldist_Tram_'+inTime_string+';Traveldist_Rail_'+inTime_string+';Traveldist_Ferry_'+inTime_string+'\n'++AsList(BodyLines_fullOD, '\n')
																, StorageName = "=fileNamePrefix+'tt'+fileNameSuffix +'.csv'", StorageType = "str";
		
			// attribute<string>  BodyLines_decay     (org) := org/name + ';' + string(nr_items_of_interest_bereikbaar_decayed);
			// parameter<string>  File_decay                := 'Org;'+ModelParameters/Advanced/items_of_interest+'_'+inTime_string+'\n'++AsList(BodyLines_decay, '\n')
																// , StorageName = "=fileNamePrefix+ModelParameters/Advanced/items_of_interest+'_decayed_'+fileNameSuffix +'.csv'", StorageType = "str";
			
			container Results_Traveltime
			{
				parameter<string>  Generate := ='File_fullOD';
			}
			// container Results_Decay
			// {
				// parameter<string>  Generate := ='File_decay';
			// }
			
			container Results_Traveltime_Fence := PhaseContainer(Results_Traveltime, 'Results in region '+regio_name_if_enkel_sub+' are finished calculating'); //
			// container Results_Decay_Fence      := PhaseContainer(Results_Decay, 'Results in region '+regio_name_if_enkel_sub+' are finished calculating'); //
		}
		
		
		parameter<string> fileNamePrefix := ModelParameters/Advanced/fileNamePrefix;
		parameter<string> fileNameSuffix :=  
			'_' + ModelParameters/Analysis_Date + 
			'_' + inTime_string + 
			'_ORG-'    + ModelParameters/Orgset + '-' + regio_name_if_enkel_sub + 
			'_DEST-'   + ModelParameters/Advanced/DestSet_string +
			'_Trsf-' + string(ModelParameters/Max_overstappen) +
			'_MinCrit-' + ModelParameters/MinimiseCriterium +
			'_MaxOV-' + string(ModelParameters/MaxOVTime) + 'min'
			;
			
	}
}
