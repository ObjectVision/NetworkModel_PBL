Template CreateTransfersSet_T
{
	unit<uint64> OD;
	unit<uint32> SubPTnet;
	///
	unit<uint32> uq_TimeStop := PTnet_prep/uq_TimeStop;
	unit<uint32> Stops := ../Stops
	{
		attribute<bool> IsRelevantStop := IsDefined(rlookup(id(.), Places/Stop_rel[SubPTnet/doubledLinks/Place_rel]));
	}

	unit<uint32> SubStops       := select_with_org_rel(Stops/IsRelevantStop)
	, Descr = "Set met stops van waar een transfer link gegenereerd moet gaan worden"
	{
		attribute<rdc> geometry := stops/geometry[org_rel];
	}

	unit<uint32> TransferLinks := join_near_values(SubStops/geometry, SubStops/geometry, float64(ModelParameters/Advanced/MaxTransferDist))
	, Descr = "Set met alle transfer links vanaf relevante stops"
	{
		attribute<Stops>  from_Stop_rel           := SubStops/org_rel[first_rel];
		attribute<Stops>  to_Stop_rel             := SubStops/org_rel[second_rel];
		attribute<Modes>  from_Mode_rel           := Stops/Mode_rel[from_Stop_rel];
		attribute<Modes>  to_Mode_rel             := Stops/Mode_rel[to_Stop_rel];
		attribute<bool>   IsIntraModeTransfer     := from_Mode_rel == to_Mode_rel;
		attribute<uint32> nEvents                 := pcount(PTnet_prep/uq_TimeStop/Stop_rel)[from_Stop_rel];
		attribute<uint32> first_transfer_event    := cumulate(nEvents) - nEvents;
		attribute<bool>   NeedsTranferTimePenalty := Modes/IsGelijkvloers[from_Mode_rel] == 1b && Modes/IsGelijkvloers[to_Mode_rel] == 1b //van: bus, tram, walk    to bus, tram, walk  --> niks
																	? False
																	: Modes/IsGelijkvloers[from_Mode_rel] == 1b && Modes/IsGelijkvloers[to_Mode_rel] == 0b //van: bus, tram, walk to metro, rail, ferry --> penalty
																		? TRUE
																		: Modes/IsGelijkvloers[from_Mode_rel] == 0b && Modes/IsGelijkvloers[to_Mode_rel] == 0b //van: metro, rail, ferry to metro, rail, ferry --> penalty
																			? TRUE
																			: Modes/IsGelijkvloers[from_Mode_rel] == 0b && Modes/IsGelijkvloers[to_Mode_rel] == 1b //van: metro, rail, ferry to bus, tram, walk --> penalty
																				? TRUE
																				: (0/0)[bool];
		
		attribute<string> Label               := 'Transfer from ' + Stops/Label[from_Stop_rel] + ' to ' + Stops/Label[to_Stop_rel];
		attribute<rdc>    geometry      (arc) := points2sequence(GenLines/Points,GenLines/Seq,GenLines/Ord);
		attribute<m>      Distance            := arc_length(geometry, m);
		attribute<s_f>    minTransferTime     := Distance / ModelParameters/Advanced/TransferEffectiveSpeed;

		attribute<Places>                   From_Place_rel           := Stops/place_rel[from_Stop_rel];
		attribute<Places>                   To_Place_rel             := Stops/place_rel[to_Stop_rel];
		// attribute<c_Time_Places>            c_fromTime_Place_rel    := combine_data(c_Time_Places, From_Time_rel, From_Place_rel);
		// attribute<c_Time_Places>            c_toTime_Place_rel      := combine_data(c_Time_Places, To_Time_rel, To_Place_rel);


		unit<uint32> GenLines:= union_unit(., .)
		{
			attribute<rdc>              Points := union_data(., Stops/geometry[from_Stop_rel], Stops/geometry[to_Stop_rel]);
			attribute<..>               Seq    := union_data(., id(..), id(..));
			attribute<uint32>           Ord    := union_data(., const(0,..,uint32), const(1,..,uint32));
		}
	}

	unit<uint32> TimedTransferLinks := range(uint32, 0, sum(TransferLinks/nEvents))
	{
		attribute<TransferLinks>            first_TransferLink      := rlookup(id(.), TransferLinks/first_transfer_event);
		attribute<TransferLinks>            TransferLink_rel        := cumulate(uint32(IsDefined(first_TransferLink))) - 1;
		attribute<rdc>                      geometry (arc)          := TransferLinks/geometry[TransferLink_rel];
		attribute<Stops>                    from_Stop_rel           := TransferLinks/from_Stop_rel[TransferLink_rel];
		attribute<Stops>                    to_Stop_rel             := TransferLinks/to_Stop_rel[TransferLink_rel];
		attribute<bool>                     NeedsTranferTimePenalty := TransferLinks/NeedsTranferTimePenalty[TransferLink_rel];
		attribute<uint32>                   cumu_events             := cumulate(const(1,.,uint32), TransferLink_rel) - 1;
		attribute<uq_TimeStop>              uq_TimeStop_rel         := rlookup(point_xy(cumu_events, from_Stop_rel, upoint), uq_TimeStop/unique_id);
		attribute<Time>                     from_Time_rel           := uq_TimeStop/Time_rel[uq_TimeStop_rel];
		attribute<s_f>                      Duration                := NeedsTranferTimePenalty ? TransferLinks/minTransferTime[TransferLink_rel] + convert(ModelParameters/OngelijkvloersPenalty, s_f) : TransferLinks/minTransferTime[TransferLink_rel];
		attribute<Time>                     To_Time_rel                  := from_Time_rel + Duration[Time] < #Time 
																			? from_Time_rel + Duration[Time] 
																			: sub_or_null(from_Time_rel + Duration[Time],#Time);
		attribute<string>                   Label                   := 'Transfer: ' + Time/Label[from_Time_rel] + ' @ ' + Stops/Name[from_Stop_rel] + ' to ' + Time/Label[To_Time_rel] + ' @ ' + Stops/Name[to_Stop_rel], DialogType = "LabelText";
		attribute<bool>                     IsIntraModeTransfer     := TransferLinks/IsIntraModeTransfer[TransferLink_rel];
		
		attribute<Places>                   From_Place_rel          := Stops/place_rel[from_Stop_rel];
		attribute<Places>                   To_Place_rel            := Stops/place_rel[to_Stop_rel];
		attribute<c_Time_Places>            c_fromTime_Place_rel    := combine_data(c_Time_Places, from_Time_rel, from_Place_rel);
		attribute<c_Time_Places>            c_toTime_Place_rel      := combine_data(c_Time_Places, to_Time_rel, to_Place_rel);
		
	}
}
