unit<uint64> OD_L := 
	impedance_matrix_od64('directed;cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel'
		, Set_L/Set/Duration
		, Set_L/Set/F1
		, Set_L/Set/F2
		
		, convert(ModelParameters/MaxOVTime, s_f)
		, Set_L/Set/Length
	), using = "impl"
{
	unit<uint32>              ThisSet                  := Set_L/Set;
	#include<../OD_extra_attributen.dms>
	
	//NS specifiek
	attribute<bool>          NS_Station_Prijs_IntegrityCheck := Agencies/IsNS[Agency_rel] ? IsDefined(impl/c_NS_start_end_rel) : TRUE;
	attribute<Euro>          Price_NS                        := rjoin(impl/c_NS_start_end_rel
																	, TariefEenhedenMatrix/c_NS_start_end_rel
																	, TariefEenhedenMatrix/Prijs)
																, IntegrityCheck = "all(NS_Station_Prijs_IntegrityCheck)";
	attribute<Ct>            Price                           := rounded_convert(Price_NS,Ct);
	
	unit<uint64>              Result                   := select_with_org_rel_with_attr_by_cond(., !impl/IsTravelToItself && !impl/IsStartEndWithinSameStopCluster)
	{
		// attribute<Ct>               Price_NS                    := Price;
		attribute<Ct>               Price_NonNS                 := const(0, ., Ct);
		attribute<Ct>               Price_augm                  := Price;
		
		attribute<Stops>           Last_Stop_rel              := ThisSet/NodeSet/Stop_rel[DstZone_rel];
		
		attribute<NS_Stations>      First_NS_Station            := impl/From_NS_Stations_rel[org_rel];
		attribute<NS_Stations>      Last_NS_Station             := impl/To_NS_Stations_rel[org_rel];
		attribute<Time>             Laatste_NS_Uitstap_Tijd     := To_Time_rel;
		attribute<Time>             Laatste_RO_Uitstap_Tijd     := const(null_u,.), Descr = "om te kijken of een volgende regionale rit R of O moet zijn na een K of L, moeten we de laatste uitstaptijd bijhouden";
		
		#include<../OD_uq_attributen.dms>
		#include<../OD_traveldist.dms>
	}
}
unit<uint64> OD_K := 
	impedance_matrix_od64('directed;cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel'
		, Set_K/Set/Duration
		, Set_K/Set/F1
		, Set_K/Set/F2
		
		, convert(ModelParameters/MaxOVTime, s_f)
		, Set_K/Set/Length
	), using = "impl"
{
	unit<uint32>              ThisSet := Set_K/Set;
	#include<../OD_extra_attributen.dms>
	
	//NS-kort specifiek
	attribute<c_NS_start_end> c_NS_start_end_rel              := combine_data(c_NS_start_end, ThisSet/NodeSet/NS_Stations_rel[OrgZone_rel], ThisSet/NodeSet/NS_Stations_rel[DstZone_rel]);
	attribute<uint32>         tariefeenheden                  := rjoin(c_NS_start_end_rel, TariefEenhedenMatrix/c_NS_start_end_rel, TariefEenhedenMatrix/impedance);
	attribute<bool>           IsDaadwerkelijkNSkort           := tariefeenheden < 9 && tariefeenheden > 0;
	attribute<bool>           NS_Station_Prijs_IntegrityCheck := Agencies/IsNS[Agency_rel] ? IsDefined(impl/c_NS_start_end_rel) : TRUE;
	attribute<Euro>           Price_NS                        := rjoin(impl/c_NS_start_end_rel
																	, TariefEenhedenMatrix/c_NS_start_end_rel
																	, TariefEenhedenMatrix/Prijs)
																, IntegrityCheck = "all(NS_Station_Prijs_IntegrityCheck)";
	attribute<Ct>             Price                           := rounded_convert(Price_NS, Ct);
	
	unit<uint64>              Result                          := select_with_org_rel_with_attr_by_cond(., !impl/IsTravelToItself && IsDaadwerkelijkNSkort && !impl/IsStartEndWithinSameStopCluster)
	{
		attribute<Ct>               Price_NonNS                 := const(0, ., Ct);
		attribute<Ct>               Price_augm                  := Price;
		
		attribute<Time>             Laatste_NS_Uitstap_Tijd     := To_Time_rel;
		attribute<Time>             Laatste_RO_Uitstap_Tijd     := const(null_u,.), Descr = "om te kijken of een volgende regionale rit R of O moet zijn na een K of L, moeten we de laatste uitstaptijd bijhouden";
		attribute<NS_Stations>      First_NS_Station            := const(null_u,.);
		attribute<NS_Stations>      Last_NS_Station             := const(null_u,.);

		#include<../OD_uq_attributen.dms>
		#include<../OD_traveldist.dms>
	}
}

unit<uint64> OD_R := 
	impedance_matrix_od64('directed;cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel'
		, Set_R/Set/Duration
		, Set_R/Set/F1
		, Set_R/Set/F2
		
		, convert(ModelParameters/MaxOVTime, s_f)
		, Set_R/Set/Length
	), using = "impl"
{
	unit<uint32>                 ThisSet                          := Set_R/Set;
	
	// attribute<Stops/c_Stop_Stop> c_FromStop_ToStop_rel            := combine_data(Stops/c_Stop_Stop, From_Stop_rel, To_Stop_rel);
	// attribute<bool>              IsStartEndWithinSameStopCluster  := IsDefined(rlookup(c_FromStop_ToStop_rel, Stops/Find_Halte_Clusters/c_Stop_Stop_rel));
	
	// R specifiek
	attribute<Ct>                Price_O                          := rounded_convert(PrijsTabel/VariabelePrijs[impl/PrijsTabel_rel] * impl/Afgelegde_afstand_OV, Ct), IntegrityCheck = "all(impl/Prijs_IntegrityCheck)";
	attribute<Ct>                Price_R                          := rounded_convert(PrijsTabel/VastePrijs[impl/PrijsTabel_rel] + (PrijsTabel/VariabelePrijs[impl/PrijsTabel_rel] * impl/Afgelegde_afstand_OV), Ct), IntegrityCheck = "all(impl/Prijs_IntegrityCheck)";
	attribute<Ct>                Price                            := Price_R;
	 
	#include<../OD_extra_attributen.dms>

	unit<uint64>              Result                   := select_with_org_rel_with_attr_by_cond(., !impl/IsOD_completely_foreign && !impl/IsTravelToItself && !impl/IsStartEndWithinSameStopCluster)
	{
		attribute<Ct>               Price_NonNS                 := Price;
		
		attribute<Ct>               Price_augm                  := Price;
		attribute<Time>             Laatste_NS_Uitstap_Tijd     := const(null_u,.);
		attribute<Time>             Laatste_RO_Uitstap_Tijd     := To_Time_rel, Descr = "om te kijken of een volgende regionale rit R of O moet zijn na een K of L, moeten we de laatste uitstaptijd bijhouden";
		attribute<NS_Stations>      First_NS_Station            := const(null_u,.);
		attribute<NS_Stations>      Last_NS_Station             := const(null_u,.);

		#include<../OD_uq_attributen.dms>
		#include<../OD_traveldist.dms>
	}
}
unit<uint64> OD_O := OD_R
{
	unit<uint64> Result := OD_R/Result
	{
		attribute<Ct>               Price_NonNS                 := Price; 
		attribute<Ct>               Price                       := Price_O;
		attribute<Ct>               Price_augm                  := Price;
	}
}
