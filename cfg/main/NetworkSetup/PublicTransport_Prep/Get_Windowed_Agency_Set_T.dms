Template Get_Windowed_Agency_Set_T
{
	parameter<string> selection_str;
	///
	
	unit<uint32>        Set       := ='select_with_attr_by_cond('+impl/PT_path_str+',PTnet_prep/IsSub_from && PTnet_prep/IsSub_to && PTnet_prep/IsSub_dur'+selection_str+')'
	, using = "impl"
	{
		// attribute<Stops>         From_Stop_rel            := rlookup(From_Point, Stops/geometry);
		// attribute<Stops>         To_Stop_rel              := rlookup(To_Point, Stops/geometry);
		attribute<c_Time_Stops>   c_fromTime_Stop_rel       := combine_data(c_Time_Stops, From_Time_rel, From_Stop_rel);
		attribute<c_Time_Stops>   c_toTime_Stop_rel         := combine_data(c_Time_Stops, To_Time_rel, To_Stop_rel);
		
		attribute<Places>         From_Place_rel            := Stops/Place_rel[From_Stop_rel] ; //debug
		attribute<Places>         To_Place_rel              := Stops/Place_rel[To_Stop_rel]; //debug
		attribute<c_Time_Stops>   c_fromTime_Place_rel      := combine_data(c_Time_Stops, From_Time_rel, From_Place_rel); //debug
		attribute<c_Time_Stops>   c_toTime_Place_rel        := combine_data(c_Time_Stops, To_Time_rel, To_Place_rel); //debug
		attribute<NodeSet>        F1                        := rlookup(c_fromTime_Stop_Route_rel, NodeSet/c_Time_Stop_Route_rel);
		attribute<NodeSet>        F2                        := rlookup(c_toTime_Stop_Route_rel, NodeSet/c_Time_Stop_Route_rel);
		
		attribute<c_Time_Stop_Routes> c_fromTime_Stop_Route_rel := combine_data(c_Time_Stop_Routes, c_fromTime_Stop_rel, Route_rel);
		attribute<c_Time_Stop_Routes> c_toTime_Stop_Route_rel   := combine_data(c_Time_Stop_Routes, c_toTime_Stop_rel, Route_rel);

		attribute<s_f>            WaitingAtStop_Time        := LinkType_rel == LinkTypes/V/Waiting_at_Stop ? duration : 0[s_f];

		unit<uint32> doubledLinks := union_unit(., .)
		, Descr = "in order to get a set of all time-Stop events"
		{
			attribute<Time>          Time_rel         := union_data(., from_Time_rel, to_Time_rel);
			attribute<rdc>           geometry         := union_data(., from_Point, to_Point);
			attribute<Stops>           Stop_rel         := union_data(., From_Stop_rel, To_Stop_rel);
			// attribute<Stops>         Stop_rel         := rlookup(geometry, Stops/geometry);
			attribute<Routes>        Route_rel        := union_data(., ../Route_rel, ../Route_rel);
			attribute<c_Time_Stops>       c_Time_Stop_rel       := combine_data(c_Time_Stops, Time_rel, Stop_rel);
			attribute<c_Time_Stop_Routes> c_Time_Stop_Route_rel := combine_data(c_Time_Stop_Routes, c_Time_Stop_rel, Route_rel);
		}
		
		unit<uint32> NodeSet := unique(doubledLinks/c_Time_Stop_Route_rel)
		{
			attribute<c_Time_Stop_Routes>    c_Time_Stop_Route_rel := values;
			
			attribute<c_Time_Stops>          c_Time_Stop_rel := value(c_Time_Stop_Route_rel / uint64(#Routes), c_Time_Stops);
			attribute<Routes>                Route_rel        := value(c_Time_Stop_Route_rel % uint64(#Routes), Routes);
			attribute<Agencies>              Agency_rel       := Routes/Agency_rel[Route_rel];
			
			attribute<Time>                  Time_rel         := value(c_Time_Stop_rel / uint64(#Stops), Time);
			attribute<Stops>                 Stop_rel        := value(c_Time_Stop_rel % uint64(#Stops), Stops);
			// attribute<Stops>            Stop_rel         := Stops/Stop_rel[Stop_rel];
			attribute<rdc>                   geometry         := Stops/geometry[Stop_rel];
			attribute<string>                Label            := Stops/label[Stop_rel] + ' @ ' + Time/Label[Time_rel];
			
			attribute<.>                     OrgNode_rel  (org)  := rlookup(org/geometry,  geometry);
			attribute<.>                     DestNode_rel (dest) := rlookup(dest/geometry, geometry);
			attribute<NS_Stations>           NS_Stations_rel     := Stops/NS_Stations_rel[Stop_rel];
		}
		
		unit<uint64> c_NodeSet := combine_unit_uint64(NodeSet, NodeSet); 
	}
}
