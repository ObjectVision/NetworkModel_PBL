container NetworkSetup : using = "units;geometries;SourceData;Classifications;ModelParameters"
{     
	#include<PublicTransport_Prep.dms>
	// unit<uint32> quick_path := /NetworkSetup/ConfigurationPerRegio/all/PublicTransport/At_07h00m00s/Stops;

	container ConfigurationPerRegio := 
		for_each_ne(
			Advanced/Regio/name
			, 'ConfigurationPerRegio_T('+quote(Advanced/Regio/name)+')'
		)
	{
		container Generate_Output
		{
			parameter<string> OUTPUT_Generate_PublicTransport_decay_CSVFiles        := =AsList(Advanced/Regio/name+'/PublicTransport/Generate_Output/OUTPUT_Generate_decay_CSVFiles',' + ');
			parameter<string> OUTPUT_Generate_PublicTransport_fullOD_long_CSVFiles  := =AsList(Advanced/Regio/name+'/PublicTransport/Generate_Output/OUTPUT_Generate_fullOD_long_CSVFiles',' + ');
			parameter<string> OUTPUT_Generate_Car_decay_CSVFiles                    := =AsList(Advanced/Regio/name+'/PrivateTransport/Export_Car_Decayed',' + ');
			parameter<string> OUTPUT_Generate_Car_traveltimes_CSVFiles              := =AsList(Advanced/Regio/name+'/PrivateTransport/Export_Car_Traveltimes',' + ');
			parameter<string> OUTPUT_Generate_Cycling_decay_CSVFiles                := =AsList(Advanced/Regio/name+'/PrivateTransport/Export_Cycling_Decayed',' + '); 
			parameter<string> OUTPUT_Generate_Cycling_traveltimes_CSVFiles          := =AsList(Advanced/Regio/name+'/PrivateTransport/Export_Cycling_Traveltimes',' + '); 
			parameter<string> OUTPUT_Generate_Walking_decay_CSVFiles                := =AsList(Advanced/Regio/name+'/PrivateTransport/Export_Walking_Decayed',' + '); 
			parameter<string> OUTPUT_Generate_Walking_traveltimes_CSVFiles          := =AsList(Advanced/Regio/name+'/PrivateTransport/Export_Walking_Traveltimes',' + '); 
		}
		
		// container Merge_Output
		// {
			// parameter<string> OUTPUT_Merge_PublicTransport_Regions_fullOD_long_CSVFiles   := ReadMergeExports_PublicTransport/OUTPUT_Merge_Types;
			// parameter<string> OUTPUT_Merge_Car_Regions_traveltimes_CSVFiles               := ReadMergeExports_PrivateTransport/Car/Merge/OUTPUT_Merge_Regions;
			// parameter<string> OUTPUT_Merge_Bike_Regions_traveltimes_CSVFiles              := ReadMergeExports_PrivateTransport/Bike/Merge/OUTPUT_Merge_Regions;
			// parameter<string> OUTPUT_Merge_Pedestrian_Regions_traveltimes_CSVFiles        := ReadMergeExports_PrivateTransport/Pedestrian/Merge/OUTPUT_Merge_Regions;
			
			
			// Voor het mergen van de geÃ«xporteerde data:
				// Zet de geexporteerde bestanden in de PerRegio map.
				// Orgset == Buurt_enkele_Corop
				// Destset = Buurt
				// Getiled_berekenen = true
			
			// container ReadMergeExports_PublicTransport := 
				// for_each_ne(
					// Advanced/Export_CombinationTypes/name
					// , 'Templates/ReadMergeExports_OV_perType_T('+quote(Advanced/Export_CombinationTypes/name)+','+quote(DestSet)+')'
				// )
			// {
				// parameter<string> OUTPUT_Merge_Types       := =AsList(Advanced/Export_CombinationTypes/name+'/Merge_Regions/OUTPUT_Merge_Regions',' + ');   
			// }
			
			// container ReadMergeExports_PrivateTransport
			// {
				// container Car
				// {
					// container Read := 
						// for_each_ne(
							// Advanced/Regio/name
							// , 'Templates/ReadExport_Car_T('+quote(Advanced/Regio/name)+','+quote(DestSet)+')'
						// );
						
					// container Merge := Templates/Merge_Regions_Car_T(DestSet)
					// {
						// parameter<string>   OUTPUT_Merge_Regions  := LongFormat/File_full;
					// }
				// }
				// container Bike
				// {
					// container Read := 
						// for_each_ne(
							// Advanced/Regio/name
							// , 'Templates/ReadExport_PedestrianBike_T('+quote(Advanced/Regio/name)+','+quote(DestSet)+',''Bike'')'
						// );
						
					// container Merge := Templates/Merge_Regions_PedestrianBike_T(DestSet,'Bike')
					// {
						// parameter<string>   OUTPUT_Merge_Regions  := File;
					// }
				// }
				// container Pedestrian
				// {
					// container Read := 
						// for_each_ne(
							// Advanced/Regio/name
							// , 'Templates/ReadExport_PedestrianBike_T('+quote(Advanced/Regio/name)+','+quote(DestSet)+',''Pedestrian'')'
						// );
						
					// container Merge := Templates/Merge_Regions_PedestrianBike_T(DestSet,'Pedestrian')
					// {
						// parameter<string>   OUTPUT_Merge_Regions  := File;
					// }
				// }
			// }
		// }
	}

	Template ConfigurationPerRegio_T 
	{
		parameter<string> regio_name;
		////

		unit<uint32> org := =impl/Org_domain
		{
			attribute<rdc>                   geometry       := =impl/Org_domain+'/geometry';
			attribute<string>                name           := =impl/Org_domain+'/name';
			attribute<float32>               nr_inwoners    := =impl/Org_domain+'/nr_inwoners[float32]';
		}
		
		unit<uint32> dest := =Advanced/Create_Symmetric_fullOD ? 'org' : 'impl/dest_src'
		{
			attribute<rdc>                   geometry       := =Advanced/Create_Symmetric_fullOD ? 'org/geometry' : 'impl/dest_src/geometry';
		}
		
		container impl := PublicTransport_Prep/Impl
		{
			unit<uint32> org := ../org;
			unit<uint32> dest := ../dest;
			
			parameter<string> Org_str           := rjoin(lowercase(Advanced/Orgset_str), lowercase(Advanced/org_domain_list/label), Advanced/org_domain_list/path);
			parameter<string> Org_domain        := replace(rjoin(lowercase(Advanced/Orgset_str), lowercase(Advanced/org_domain_list/label), Advanced/org_domain_list/path), '@REGIO@', regio_name);
			
			parameter<string> regio_name_if_enkel_sub := switch(
															 case(strcount(ModelParameters/Orgset, 'Buurt_enkele_Corop') > 0, ModelParameters/Orgset_EnkeleCorop_selectie)
															,case(strcount(ModelParameters/Orgset, 'Buurt_enkele_Prov') > 0, ModelParameters/Orgset_EnkeleProv_selectie)
															, regio_name
														);
		} 
		
		container PublicTransport 
		{
			#include<PublicTransport.dms>
			
			container TimeInvariantConnections := 
				for_each_ne(
					TimeInvariantTypes/name
					, 'Create_TimeInvariantConnection_T('+string(id(TimeInvariantTypes))+'[TimeInvariantTypes])'
				), Descr = "i.e. voor/na transport";
			
			Template Create_TimeInvariantConnection_T  : using = "/SourceData/Infrastructuur/GTFS/RelevantSelection"
			{
				parameter<TimeInvariantTypes> TimeInvariantTypes_rel;
				///
				parameter<string> ConnectionType := TimeInvariantTypes/ConnectionType[TimeInvariantTypes_rel];
				parameter<string> Mode           := TimeInvariantTypes/Mode[TimeInvariantTypes_rel];
				parameter<string> OriginSet      := TimeInvariantTypes/OriginSet[TimeInvariantTypes_rel];
				parameter<string> DestinationSet := TimeInvariantTypes/DestinationSet[TimeInvariantTypes_rel];
				parameter<string> Mode_abbrev    := TimeInvariantTypes/Mode_abbrev[TimeInvariantTypes_rel];
				parameter<Modes>  Mode_rel       := TimeInvariantTypes/Mode_rel[TimeInvariantTypes_rel];
				parameter<string> NetworkType    := TimeInvariantTypes/NetworkType[TimeInvariantTypes_rel];
				parameter<string> VN_Transport   := TimeInvariantTypes/VN_Transport[TimeInvariantTypes_rel];
				unit<uint32>      Network        := ='SourceData/Infrastructuur/OSM/Network_'+NetworkType;
				
				container Create_Routes      := ='Templates/CreateNetwork_Pedestrian_Bike_T(PublicTransport_Prep/Impl/'+OriginSet+', PublicTransport_Prep/Impl/'+DestinationSet+', Network, Mode, NetworkType, ConnectionType)';
			}
		}

		container PrivateTransport 
		{
			// parameter<string> Export_Walking_decayed      := Walking/ExportTable_Decayed/File;
			// parameter<string> Export_Walking_traveltimes  := Walking/ExportTable_Traveltimes/File;
			// parameter<string> Export_Bike_decayed            := Bike/ExportTable_Decayed/File;
			// parameter<string> Export_Bike_traveltimes        := Bike/ExportTable_Traveltimes/File;
			// parameter<string> Export_Car_Decayed             := Car/ExportTable_Decayed/File;
			// parameter<string> Export_Car_traveltimes         := Car/ExportTable_Traveltimes/File;
			
			container Impl
			{
				parameter<string> fileNamePrefix :=  Advanced/fileNamePrefix;
				parameter<string> fileNameSuffix :=  
					'_ORG-'    + ModelParameters/Orgset + '-' + .../impl/regio_name_if_enkel_sub + 
					'_DEST-'   + Advanced/DestSet_string +
					'_NETWERK-@@' +
					'_MaxTime-##min';
			}
			
			Container Walking
			{
				container Create_Optimised_Network  := Templates/CreateNetwork_Efficient_T(org, dest, SourceData/Infrastructuur/OSM/Network_Walking/IsVerbonden, 'Walking');
				
				unit<uint32> LinkSet := Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet;
				unit<uint32> NodeSet := Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet;
				container Calc_Traveltimes_maxspeed_Walking := Calc_Traveltimes_T(LinkSet, NodeSet, LinkSet/Impedance_per_ImpedanceType/max_Walking, LinkSet/Distance_per_ImpedanceType/max_Walking, ModelParameters/MaxWalkingTime_Org2Dest);
				
				unit<uint64> ExportTable_Traveltimes := Calc_Traveltimes_maxspeed_Walking/Traveltimes
				{
					attribute<org > Org_rel := OrgZone_rel;
					attribute<dest> Dst_rel := DstZone_rel;
					
					attribute<min_f> DefaultSpeed_imp    := Impedance;
					attribute<km>    AfgelegedeAfstand   := Alt_imp;
					
					attribute<string> BodyLines :=
						org/name[Org_rel] + ';' + 
						dest/name[Dst_rel] + ';' +
						string(DefaultSpeed_imp) + ';' +
						string(AfgelegedeAfstand);
					parameter<string> File := 'Org;Dst;Freeflow;AfgelegedeAfstand\n'++AsList(BodyLines, '\n'), StorageName = "=impl/fileNamePrefix+'Traveltimes'+replace(impl/fileNameSuffix, '@@', 'Walking', '##',  string(ModelParameters/MaxWalkingTime_Org2Dest)) +'.csv'", StorageType = "str";
				}
				unit<uint32> ExportTable_Decayed := org
				{
					attribute<float32> nr_items_of_interest_decayed_freeflow        := Calc_Traveltimes_maxspeed_walking/Decay/D_i;
					
					attribute<string> BodyLines (org) := org/name + ';' + string(nr_items_of_interest_decayed_freeflow);
					parameter<string> File            := 'Org;freeflow\n'++AsList(BodyLines, '\n'), StorageName = "=impl/fileNamePrefix+''+Advanced/items_of_interest+'_decayed'+replace(impl/fileNameSuffix, '@@', 'Walking', '##',  string(ModelParameters/MaxWalkingTime_Org2Dest))+'.csv'", StorageType = "str";
				}
			}
			
			Container Cycling
			{
				container Create_Optimised_Network_Cycling := Templates/CreateNetwork_Efficient_T(org, dest, SourceData/Infrastructuur/OSM/Network_Cycling/IsVerbonden, 'Cycling');
				container Create_Optimised_Network_EBike   := Templates/CreateNetwork_Efficient_T(org, dest, SourceData/Infrastructuur/OSM/Network_Cycling/IsVerbonden, 'E_Biking');

				unit<uint32> LinkSet_Cycling := Create_Optimised_Network_Cycling/CreateMoreEfficientNetwork/FinalLinkSet;
				unit<uint32> NodeSet_Cycling := Create_Optimised_Network_Cycling/CreateMoreEfficientNetwork/FinalNodeSet;
				container Calc_Traveltimes_maxspeed_Cycling  := Calc_Traveltimes_T(LinkSet_Cycling, NodeSet_Cycling, LinkSet_Cycling/Impedance_per_ImpedanceType/max_Cycling, LinkSet_Cycling/Distance_per_ImpedanceType/max_Cycling, ModelParameters/MaxCyclingTime_Org2Dest);
				container Calc_Traveltimes_congested_Cycling := Calc_Traveltimes_T(LinkSet_Cycling, NodeSet_Cycling, LinkSet_Cycling/Impedance_per_ImpedanceType/congested_Cycling, LinkSet_Cycling/Distance_per_ImpedanceType/congested_Cycling, ModelParameters/MaxCyclingTime_Org2Dest);
				
				unit<uint32> LinkSet_e_bike := Create_Optimised_Network_EBike/CreateMoreEfficientNetwork/FinalLinkSet;
				unit<uint32> NodeSet_e_bike := Create_Optimised_Network_EBike/CreateMoreEfficientNetwork/FinalNodeSet;
				container Calc_Traveltimes_maxspeed_e_bike := Calc_Traveltimes_T(LinkSet_e_bike, NodeSet_e_bike, LinkSet_e_bike/Impedance_per_ImpedanceType/max_e_bike, LinkSet_e_bike/Distance_per_ImpedanceType/max_e_bike, ModelParameters/MaxCyclingTime_Org2Dest);
				container Calc_Traveltimes_congested_e_bike := Calc_Traveltimes_T(LinkSet_e_bike, NodeSet_e_bike, LinkSet_e_bike/Impedance_per_ImpedanceType/congested_e_bike, LinkSet_e_bike/Distance_per_ImpedanceType/congested_e_bike, ModelParameters/MaxCyclingTime_Org2Dest);
				
				unit<uint64> ExportTable_Traveltimes := Calc_Traveltimes_maxspeed_Cycling/Traveltimes
				{
					attribute<org > Org_rel := OrgZone_rel;
					attribute<dest> Dst_rel := DstZone_rel;
					
					attribute<min_f> DefaultSpeed_imp     := Impedance;
					attribute<km>    AfgelegedeAfstand    := Alt_imp;
					attribute<min_f> E_Bike_imp           := rjoin(Org_Dest, Calc_Traveltimes_maxspeed_e_bike/Traveltimes/Org_Dest, Calc_Traveltimes_maxspeed_e_bike/Traveltimes/Impedance);
					attribute<min_f> ActualCycling_imp       := rjoin(Org_Dest, Calc_Traveltimes_congested_Cycling/Traveltimes/Org_Dest, Calc_Traveltimes_congested_Cycling/Traveltimes/Impedance);
					attribute<min_f> ActualE_Bike_Adj_imp := rjoin(Org_Dest, Calc_Traveltimes_congested_e_bike/Traveltimes/Org_Dest, Calc_Traveltimes_congested_e_bike/Traveltimes/Impedance);
					attribute<bool>  IsCorrect_ActualCycling     := ActualCycling_imp >= DefaultSpeed_imp;
					
					attribute<string> BodyLines_ActualCycling :=
						org/name[Org_rel] + ';' + 
						dest/name[Dst_rel] + ';' +
						string(DefaultSpeed_imp) + ';' +
						string(E_Bike_imp) + ';' +
						string(ActualCycling_imp) + ';' +
						string(ActualE_Bike_Adj_imp) + ';' +
						string(AfgelegedeAfstand);
					parameter<string> File_ActualCycling := 'Org;Dst;Freeflow;Freeflow_ebike;ActualCycling;ActualE_Bike_Adj;AfgelegedeAfstand\n'++AsList(BodyLines_ActualCycling, '\n'), StorageName = "=impl/fileNamePrefix+'Traveltimes'+replace(impl/fileNameSuffix, '@@', 'Cycling', '##',  string(ModelParameters/MaxCyclingTime_Org2Dest)) +'.csv'", StorageType = "str";
					
					attribute<string> BodyLines_Freeflow :=
						org/name[Org_rel] + ';' + 
						dest/name[Dst_rel] + ';' +
						string(DefaultSpeed_imp) + ';' + 
						string(E_Bike_imp) + ';' + 
						string(AfgelegedeAfstand);
					parameter<string> File_Freeflow := 'Org;Dst;Freeflow;Freeflow_ebike;AfgelegedeAfstand\n'++AsList(BodyLines_Freeflow, '\n'), StorageName = "=impl/fileNamePrefix+'Traveltimes'+replace(impl/fileNameSuffix, '@@', 'Cycling', '##',  string(ModelParameters/MaxCyclingTime_Org2Dest)) +'.csv'", StorageType = "str";
					
					parameter<string> File := =ModelParameters/Advanced/UseActualCyclingSpeeds ? 'File_ActualCycling' : 'File_Freeflow';
				}
				
				unit<uint32> ExportTable_Decayed := org
				{
					attribute<float32> nr_items_of_interest_decayed_Cycling_MaxSpeed    := Calc_Traveltimes_maxspeed_Cycling/Decay/D_i;
					attribute<float32> nr_items_of_interest_decayed_Ebike            := Calc_Traveltimes_maxspeed_e_bike/Decay/D_i;
					attribute<float32> nr_items_of_interest_decayed_ActualCycling       := Calc_Traveltimes_congested_Cycling/Decay/D_i;
					attribute<float32> nr_items_of_interest_decayed_ActualE_Bike_adj := Calc_Traveltimes_congested_e_bike/Decay/D_i;
					attribute<float32> Loss_ActualCycling                               := nr_items_of_interest_decayed_Cycling_MaxSpeed - nr_items_of_interest_decayed_ActualCycling;
					
					attribute<string> BodyLines (org) := org/name + ';' + string(nr_items_of_interest_decayed_Cycling_MaxSpeed) + ';'+string(nr_items_of_interest_decayed_Ebike) + ';'+string(nr_items_of_interest_decayed_ActualCycling) + ';'+string(nr_items_of_interest_decayed_ActualE_Bike_adj);
					parameter<string> File            := 'Org;freeflow;freeflow_ebike;ActualCycling;ActualE_Bike_Adj\n'++AsList(BodyLines, '\n'), StorageName = "=impl/fileNamePrefix+''+Advanced/items_of_interest+'_decayed'+replace(impl/fileNameSuffix, '@@', 'Cycling', '##',  string(ModelParameters/MaxCyclingTime_Org2Dest))+'.csv'", StorageType = "str";
				}
			}
			
			container Car := Templates/PrivateTransport_Car_T(org, dest, true); 
			
			Template Calc_Traveltimes_T
			{
				unit<uint32>     LinkSet_dom;
				unit<uint32>     NodeSet_dom;
				attribute<s_f>   impedance   (LinkSet_dom);
				attribute<km>    distance    (LinkSet_dom);
				parameter<min_f> MaxTraveltime_min;
				///
				
				unit<uint64> Traveltimes :=
					impedance_matrix_od64('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel'
						, convert(impedance, min_f)
						, LinkSet_dom/F1
						, LinkSet_dom/F2
						, NodeSet_dom/OrgNode_rel
						, NodeSet_dom/DestNode_rel
						, MaxTraveltime_min //cut impedance
						, distance
					)
				{
					attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
				}
				
				unit<uint64> Traveltimes_with_Linkset :=
					impedance_matrix_od64('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel,LinkSet'
						, convert(impedance, min_f)
						, LinkSet_dom/F1
						, LinkSet_dom/F2
						, NodeSet_dom/OrgNode_rel
						, NodeSet_dom/DestNode_rel
						, MaxTraveltime_min //cut impedance
						, distance
					)
				{
					attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
					attribute<rdc>    geometry (arc) := AfgelegdeReis/Route[invert(AfgelegdeReis/Sequence_rel)];
					
					unit<uint32> AfgelegdeReis := sequence2points(LinkSet) //vertaling van LinkSet attribute (afgelegde route in OD), naar onderdelen van de reis
					{
						attribute<rdc>         Route (arc)    := points2sequence(LinkPoints/Point, LinkPoints/Sequence_rel, LinkPoints/Ordinal);
						attribute<rdc>         FromPoint      := LinkSet_dom/FromPoint[point];
						attribute<rdc>         ToPoint        := LinkSet_dom/ToPoint[point];

						unit<uint32> LinkPoints := union_unit(., .)
						{
							attribute<rdc>                  Point        := union_data(., FromPoint, ToPoint);
							attribute<..>                   Sequence_rel := union_data(., id(..), id(..));
							attribute<uint32>               Ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
							attribute<...>                  Sequence_rel_old := AfgelegdeReis/Sequence_rel[Sequence_rel];
							attribute<uint32>               Ordinal_old      := AfgelegdeReis/Ordinal[Sequence_rel];
						}
					}
				}
				
				unit<uint64> Decay := 
					impedance_matrix_od64('bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);interaction(v_i,w_j,dist_logit(alpha,beta,gamma)):D_i'
						, convert(impedance, min_f)
						, LinkSet_dom/F1
						, LinkSet_dom/F2
						, NodeSet_dom/OrgNode_rel
						, NodeSet_dom/DestNode_rel
						, MaxTraveltime_min
						, 1f                                 // v_i
						, dest/nr_items_of_interest[float32] // w_j
						, Advanced/Distance_Decay/car_a , Advanced/Distance_Decay/car_b , Advanced/Distance_Decay/car_c
					);
			}
		}
	}
}
