Template CreateNetwork_Pedestrian_Bike_T : using = "geometries"
{
	unit<uint32>      inStart;
	unit<uint32>      inEind;
	unit<uint32>      Roads;
	parameter<string> TravelMode;
	parameter<string> NetworkType;
	parameter<string> ConnectionType;
	container         Optimised_Network;
	////
	parameter<min_f> MaxDistSelectie_min := ='ModelParameters/Max'+TravelMode+'Time_'+ConnectionType;
	parameter<s_f>   MaxDistSelectie_sec := convert(MaxDistSelectie_min, s_f);
	
	unit<uint32> LinkSet0 := Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet;
	unit<uint32> LinkSet  := select_with_org_rel(IsDefined(LinkSet0/F1) && IsDefined(LinkSet0/F2))
	{
		attribute<NodeSet> F1                   := LinkSet0/F1[org_rel];
		attribute<NodeSet> F2                   := LinkSet0/F2[org_rel];
	}
	
	unit<uint32> NodeSet := Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet
	{
		attribute<.>   OrgNode_rel  (inStart)    := rlookup(inStart/geometry, geometry);
		attribute<.>   DestNode_rel (inEind)     := rlookup(inEind/geometry, geometry);
	}
	unit<uint32> Places  := PublicTransport/Places;
	
	attribute<s_f> impedance (LinkSet) := ='LinkSet0/Impedance_per_ImpedanceType/max_'+NetworkType+'[LinkSet/org_rel]';
	attribute<km>  distance  (LinkSet) := ='LinkSet0/Distance_per_ImpedanceType/max_'+NetworkType+'[LinkSet/org_rel]';
	
	unit<uint64> ODMatrix :=
		impedance_matrix_od64('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel,LinkSet'
			, impedance
			, LinkSet/F1
			, LinkSet/F2
			, NodeSet/OrgNode_rel
			, NodeSet/DestNode_rel
			, MaxDistSelectie_sec //cut impedance      
			, distance //alt imp
		)
	{
		attribute<Time>	   Duration                         := RoundUp(Impedance)[uint32][Time];
		attribute<s_f>     Duration_seconds                 := Impedance;
		attribute<float32> Duration_minutes                 := Impedance / 60f;
		attribute<inStart> Start_rel                        := OrgZone_rel; 
		attribute<inEind>  Eind_rel                         := DstZone_rel; 
		attribute<string>  StartName                        := inStart/name[Start_rel];
		attribute<string>  EindName                         := inEind/name[Eind_rel];
		attribute<km>      LengthKm                         := alt_imp; 
		attribute<rdc>     FromPoint                        := inStart/geometry[Start_rel];
		attribute<rdc>     ToPoint                          := inEind/geometry[Eind_rel];
		attribute<rdc>     geometry (arc)                   := points2sequence(LinkPoints/geometry, LinkPoints/ODPathRel, LinkPoints/CumulOrdinal);
		attribute<string>  Label                            := TravelMode+' path from: ' + StartName + ' to ' + EindName;

		parameter<string>  OriginSetStr                     := OriginSet == 'Org' ? 'Origin' : OriginSet;

		attribute<Places>  From_Place_rel                   := ='rlookup(Start_rel, Places/'+OriginSetStr+'_rel)';
		attribute<Places>  To_Place_rel                     := ='rlookup(Eind_rel,  Places/'+DestinationSet+'_rel)';
		attribute<ct>      Price                            := ='(impedance[min_f] * ModelParameters/'+VoortransportStr+'_'+TravelMode+'_Time_Costs)[ct]';

		parameter<TimeInvariantTypes> Current_TimeInvariantTypes_rel := TimeInvariantTypes_rel;
		parameter<bool>               IsVoorTransport                := VN_Transport == 'V';
		parameter<string>             VoortransportStr               := IsVoorTransport ? 'Voortransport' : 'Natransport';
		attribute<Modes>              Mode_rel                      := const(.../Mode_rel,.);
		
		unit<uint32> LinkPoints := union_unit(., .)
		{
			attribute<..>                   ODPathRel    := union_data(., id(..), id(..));
			attribute<rdc>                  geometry     := union_data(., ../FromPoint, ../ToPoint);
			attribute<uint32>               CumulOrdinal := union_data(., const(0,..,uint32), const(1,..,uint32));
		}
		
		unit<uint32> AfgelegdeReis := sequence2points(LinkSet) //vertaling van LinkSet attribute (afgelegde route in OD), naar onderdelen van de reis
		{
			// voor visuaisatie
			attribute<rdc>         Route (arc) := points2sequence(LinkPoints/Point, LinkPoints/Sequence_rel, LinkPoints/Ordinal);
			attribute<rdc>         FromPoint   := LinkSet/FirstPoint[point];
			attribute<rdc>         ToPoint     := LinkSet/LastPoint[point];

			unit<uint32> LinkPoints := union_unit(., .)
			{
				attribute<rdc>                  Point        := union_data(., FromPoint, ToPoint);
				attribute<..>                   Sequence_rel := union_data(., id(..), id(..));
				attribute<uint32>               Ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
			}
		}
	}
}
