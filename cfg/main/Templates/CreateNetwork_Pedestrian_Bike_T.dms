Template CreateNetwork_Pedestrian_Bike_T : using = "geometries"
{
	unit<uint32>      inStart;
	unit<uint32>      inEind;
	unit<uint32>      Roads;
	parameter<string> TravelMode;
	parameter<string> NetworkType;
	parameter<string> Direction;
	////
	parameter<min_f> MaxDistSelectie_min := ='ModelParameters/Max'+TravelMode+'Time_'+Direction;
	parameter<s_f>   MaxDistSelectie_sec := convert(MaxDistSelectie_min, s_f);
	
	
	container Create_Optimised_Network  := ='Templates/CreateNetwork_Efficient_T(inStart, inEind, Roads, NetworkType)';
	unit<uint32> LinkSet := Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet;
	unit<uint32> NodeSet := Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet;
	
	attribute<s_f> impedance (LinkSet) := ='LinkSet/Impedance_per_ImpedanceType/max_'+NetworkType;
	
	unit<uint64> ODMatrix :=
		impedance_matrix_od64('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel,LinkSet'
			, impedance
			, LinkSet/F1
			, LinkSet/F2
			, NodeSet/OrgNode_rel
			, NodeSet/DestNode_rel
			, MaxDistSelectie_sec //cut impedance      
			, LinkSet/LengthKm //alt imp
		)
	{
		attribute<Time>	   Duration                         := RoundUp(Impedance)[uint32][Time];
		attribute<s_f>     Duration_seconds                 := Impedance;
		attribute<float32> Duration_minutes                 := Impedance / 60f;
		attribute<inStart> StartRef                         := OrgZone_rel; 
		attribute<inEind>  EindRef                          := DstZone_rel; 
		attribute<string>  StartName                        := inStart/name[StartRef];
		attribute<string>  EindName                         := inEind/name[EindRef];
		attribute<km>      LengthKm                         := alt_imp; 
		attribute<rdc>     FromPoint                        := inStart/geometry[StartRef];
		attribute<rdc>     ToPoint                          := inEind/geometry[EindRef];
		attribute<rdc>     geometry (arc)                   := points2sequence(LinkPoints/geometry, LinkPoints/ODPathRel, LinkPoints/CumulOrdinal);
		attribute<string>  Label                            := TravelMode+' path from: ' + StartName + ' to ' + EindName;

		parameter<TimeInvariantTypes> Current_TimeInvariantTypes_rel := TimeInvariantTypes_rel;
		parameter<bool>               IsVoorTransport                := DestinationSet == 'Stops';
		parameter<string>             Mode_abbr                      := Mode_abbrev;
		
		unit<uint32> LinkPoints := union_unit(., .)
		{
			attribute<..>                   ODPathRel    := union_data(., id(..), id(..));
			attribute<rdc>                  geometry     := union_data(., ../FromPoint, ../ToPoint);
			attribute<uint32>               CumulOrdinal := union_data(., const(0,..,uint32), const(1,..,uint32));
		}
		
		unit<uint32> AfgelegdeReis := sequence2points(LinkSet) //vertaling van LinkSet attribute (afgelegde route in OD), naar onderdelen van de reis
		{
			unit<uint32> LinkSet := Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet;
			unit<uint32> NodeSet := Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet;

			// voor visuaisatie
			attribute<rdc>         Route (arc) := points2sequence(LinkPoints/Point, LinkPoints/Sequence_rel, LinkPoints/Ordinal);
			attribute<rdc>         FromPoint   := LinkSet/FirstPoint[point];
			attribute<rdc>         ToPoint     := LinkSet/LastPoint[point];

			unit<uint32> LinkPoints := union_unit(., .)
			{
				attribute<rdc>                  Point        := union_data(., FromPoint, ToPoint);
				attribute<..>                   Sequence_rel := union_data(., id(..), id(..));
				attribute<uint32>               Ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
			}
		}
	}
}
