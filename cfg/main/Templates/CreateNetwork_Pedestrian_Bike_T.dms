Template CreateNetwork_Pedestrian_Bike_T : using = "geometries"
{
	unit<uint32>      inStart;
	unit<uint32>      inEind;
	unit<uint32>      Roads;
	parameter<string> TravelMode;
	parameter<string> Direction;
	container         Optimised_Network;
	////
	
	parameter<min_f> MaxDistSelectie_min := ='ModelParameters/Max'+TravelMode+'Time_'+Direction;
	parameter<s_f>   MaxDistSelectie_sec := convert(MaxDistSelectie_min, s_f);
	
	parameter<bool>  Is2DestSet := Direction == 'Stop2Dest';
	
	unit<uint32> LinkSet0 := Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet
	{
		// attribute<NodeSet> F1                   := invert(NodeSet/org_rel)[Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F1];
		// attribute<NodeSet> F2                   := invert(NodeSet/org_rel)[Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F2];
	}
	unit<uint32> LinkSet := select_with_org_rel(IsDefined(LinkSet0/F1) && IsDefined(LinkSet0/F2))
	{
		attribute<NodeSet> F1                   := LinkSet0/F1[org_rel];
		attribute<NodeSet> F2                   := LinkSet0/F2[org_rel];
		attribute<Km>      LengthKm             := LinkSet0/LengthKm[org_rel];
	}
	
	unit<uint32> NodeSet := Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet
	{
		// attribute<rdc> geometry                  := NodeSet0/geometry[org_rel];
		attribute<.>   OrgNode_rel  (inStart)    := rlookup(inStart/geometry, geometry);
		attribute<.>   DestNode_rel (inEind)     := rlookup(inEind/geometry, geometry);
	}
	// unit<uint32> NodeSet  := select_with_org_rel(IsDefined(rlookup(NodeSet0/geometry, inStart/geometry)) || IsDefined(rlookup(NodeSet0/geometry, inEind/geometry)))
	// {
	// }
	
	attribute<s_f> impedance (LinkSet) := ='LinkSet0/Impedance_per_ImpedanceType/max_'+TravelMode+'[LinkSet/org_rel]';
	
	unit<uint32> ODMatrix :=
		impedance_matrix('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);limit(OrgZone_max_mass,DstZone_mass);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel,LinkSet'
			, impedance
			, LinkSet/F1
			, LinkSet/F2
			, NodeSet/OrgNode_rel
			, NodeSet/DestNode_rel
			, MaxDistSelectie_sec //cut impedance      
			, ModelParameters/Advanced/MaxODconn, 1f //limit
			, LinkSet/LengthKm //alt imp
		)
	{
		attribute<Time>	   Duration                         := RoundUp(Impedance)[uint32][Time];
		attribute<float32> Duration_minutes                 := Impedance / 60f;
		attribute<inStart> StartRef                         := OrgZone_rel; 
		attribute<inEind>  EindRef                          := DstZone_rel; 
		attribute<string>  StartName                        := inStart/name[StartRef];
		attribute<string>  EindName                         := inEind/name[EindRef];
		attribute<km>      LengthKm                         := alt_imp; 
		attribute<rdc>     Start_point                      := inStart/geometry[StartRef];
		attribute<rdc>     Eind_point                       := inEind/geometry[EindRef];
		attribute<Complete_Stops_Domain> Complete_Stops_rel := inEind/Stops_rel[EindRef]; 
		attribute<rdc>     geometry (arc)                   := points2sequence(LinkPoints/geometry, LinkPoints/ODPathRel, LinkPoints/CumulOrdinal);
		attribute<string>  Label                            := TravelMode+' path from: ' + StartName + ' to ' + EindName;

		unit<uint32> LinkPoints := union_unit(., .)
		{
			attribute<..>                   ODPathRel    := union_data(., id(..), id(..));
			attribute<rdc>                  geometry     := union_data(., ../Start_point, ../Eind_point);
			attribute<uint32>               CumulOrdinal := union_data(., const(0,..,uint32), const(1,..,uint32));
		}
		
		unit<uint32> AfgelegdeReis := sequence2points(LinkSet) //vertaling van LinkSet attribute (afgelegde route in OD), naar onderdelen van de reis
		{
			// voor visuaisatie
			attribute<rdc>         Route (arc) := points2sequence(LinkPoints/Point, LinkPoints/Sequence_rel, LinkPoints/Ordinal);
			attribute<rdc>         FromPoint   := LinkSet/FirstPoint[point];
			attribute<rdc>         ToPoint     := LinkSet/LastPoint[point];

			unit<uint32> LinkPoints := union_unit(., .)
			{
				attribute<rdc>                  Point        := union_data(., FromPoint, ToPoint);
				attribute<..>                   Sequence_rel := union_data(., id(..), id(..));
				attribute<uint32>               Ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
			}
		}
		
		unit<uint32> Complete_Stops_Domain := SourceData/Infrastructuur/GTFS/StudyAreaFeeds/Stops;
	}
}
