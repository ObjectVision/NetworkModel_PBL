Template PrivateTransport_Car_T
{
	unit<uint32>       org;
	unit<uint32>       dest;
	parameter<bool>    DoMakeAllPairs;
	///
	parameter<string>  netwerk_type_OSM := 'car';

	container Settings
	{
		parameter<string>  netwerk_type_Logit := netwerk_type_OSM == classifications/OSM/netwerk_type/name[classifications/OSM/netwerk_type/V/Pedestrian] ? classifications/OSM/netwerk_type/name[classifications/OSM/netwerk_type/V/Bike] : netwerk_type_OSM;
		
		parameter<min_f>   max_traveldistance_min  := ModelParameters/MaxCarTime;
		attribute<uint32>  dest_mass (dest) := ='dest/'+ModelParameters/Advanced/items_of_interest;
		
		parameter<string>  netwerk_type_suffix := ModelParameters/UseTomTomNetworkForCars ? '-TomTom' : '-OSM';
		parameter<string>  fileNamePrefix :=  ModelParameters/Advanced/fileNamePrefix;
		parameter<string>  fileNameSuffix :=  
			'_ORG-'    + ModelParameters/Orgset + '-' + impl/regio_name_if_enkel_sub + 
			'_DEST-'   + ModelParameters/Advanced/DestSet_string +
			'_NETWERK-'+ netwerk_type_OSM + netwerk_type_suffix +
			'_DayGroup-'+ModelParameters/Advanced/CongestionSpeed_DaySelection +
			'_MaxTime-' + string(ModelParameters/MaxCarTime)+'min';

		parameter<string> logit_weight_prefix := 'ModelParameters/Advanced/Distance_Decay/' + netwerk_type_Logit;
		parameter<string> logit_weights_expr  := logit_weight_prefix+'_a, ' + logit_weight_prefix+'_b, ' + logit_weight_prefix+'_c';
	}

	unit<uint32> RoadDomain_OSM        := SourceData/Infrastructuur/OSM/Network_Car/isVerbonden;
	unit<uint32> RoadDomain_TomTom     := /SourceData/Infrastructuur/TomTom/Roads_selection;
	unit<uint32> JunctionDomain_TomTom := /SourceData/Infrastructuur/TomTom/Junctions;
	
	container Create_Optimised_Network_OSM  := Templates/CreateNetwork_Efficient_T(org, dest, RoadDomain_OSM, netwerk_type_OSM); //instantiated for OSM
	container Create_Network_TomTom     := Templates/CreateNetwork_TomTom_T(org, dest, RoadDomain_TomTom, JunctionDomain_TomTom); //instantiated for TomTom

	unit<uint32> OSM_LinkSet                      := Create_Optimised_Network_OSM/CreateMoreEfficientNetwork/FinalLinkSet;
	unit<uint32> OSM_NodeSet                      := Create_Optimised_Network_OSM/CreateMoreEfficientNetwork/FinalNodeSet;
	unit<uint32> TomTom_LinkSet                   := Create_Network_TomTom/CreateInitialWorkingNetwork/LinkSet;
	unit<uint32> TomTom_NodeSet                   := Create_Network_TomTom/CreateInitialWorkingNetwork/NodeSet;
	
	container Traveltimes
	{
		//OSM
		unit<uint64> MorningRush_OSM                  := ImpedanceMatrix_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Morning_car);
		unit<uint64> NoonRush_OSM                     := ImpedanceMatrix_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Noon_car);
		unit<uint64> LateEveningRush_OSM              := ImpedanceMatrix_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Late_car);
		unit<uint64> MaxSpeed_OSM                     := ImpedanceMatrix_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/max_limit_car);
		
		unit<uint64> MorningRush_OSM_w_LinkSet        := ImpedanceMatrix_with_Linkset_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Morning_car);
		unit<uint64> NoonRush_OSM_w_LinkSet           := ImpedanceMatrix_with_Linkset_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Noon_car);
		unit<uint64> LateEveningRush_OSM_w_LinkSet    := ImpedanceMatrix_with_Linkset_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Late_car);
		unit<uint64> MaxSpeed_OSM_w_LinkSets          := ImpedanceMatrix_with_Linkset_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/max_limit_car);
		
		unit<uint64> MorningRush_OSM_w_AltImp         := ImpedanceMatrix_with_AltImp_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Morning_car, OSM_LinkSet/Distance_per_ImpedanceType/congested_Morning_car);
		unit<uint64> NoonRush_OSM_w_AltImp            := ImpedanceMatrix_with_AltImp_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Noon_car, OSM_LinkSet/Distance_per_ImpedanceType/congested_Noon_car);
		unit<uint64> LateEveningRush_OSM_w_AltImp     := ImpedanceMatrix_with_AltImp_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Late_car, OSM_LinkSet/Distance_per_ImpedanceType/congested_Late_car);
		unit<uint64> MaxSpeed_OSM_w_AltImp            := ImpedanceMatrix_with_AltImp_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/max_limit_car, OSM_LinkSet/Distance_per_ImpedanceType/max_limit_car);

		///TOMTOM
		unit<uint64> MorningRush_TomTom               := ImpedanceMatrix_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/MorningRush);
		unit<uint64> NoonRush_TomTom                  := ImpedanceMatrix_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/NoonRush);
		unit<uint64> LateEveningRush_TomTom           := ImpedanceMatrix_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/LateEveningRush);
		unit<uint64> Freeflow_TomTom                  := ImpedanceMatrix_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/Freeflow);
		
		unit<uint64> MorningRush_TomTom_w_LinkSet     := ImpedanceMatrix_with_Linkset_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/MorningRush);
		unit<uint64> NoonRush_TomTom_w_LinkSet        := ImpedanceMatrix_with_Linkset_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/NoonRush);
		unit<uint64> LateEveningRush_TomTom_w_LinkSet := ImpedanceMatrix_with_Linkset_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/LateEveningRush);
		unit<uint64> Freeflow_TomTom_w_LinkSets       := ImpedanceMatrix_with_Linkset_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/Freeflow);
		
		unit<uint64> MorningRush_TomTom_w_AltImp      := ImpedanceMatrix_with_AltImp_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/MorningRush, TomTom_LinkSet/LengthKm);
		unit<uint64> NoonRush_TomTom_w_AltImp         := ImpedanceMatrix_with_AltImp_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/NoonRush, TomTom_LinkSet/LengthKm);
		unit<uint64> LateEveningRush_TomTom_w_AltImp  := ImpedanceMatrix_with_AltImp_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/LateEveningRush, TomTom_LinkSet/LengthKm);
		unit<uint64> Freeflow_TomTom_w_AltImp         := ImpedanceMatrix_with_AltImp_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/Freeflow, TomTom_LinkSet/LengthKm);

		Template ImpedanceMatrix_T
		{
			unit<uint32>      LinkSet_dom;
			unit<uint32>      NodeSet_dom;
			attribute<s_f>    Impedance (LinkSet_dom);
			//
			unit<uint64> impedanceMatrix := =
				ModelParameters/InterpretAllRoadsAsBidirectional 
					? 	'impedance_matrix_od64(''bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel''
							, Impedance
							, LinkSet_dom/F1
							, LinkSet_dom/F2
							, NodeSet_dom/OrgNode_rel
							, NodeSet_dom/DestNode_rel
							, convert(settings/max_traveldistance_min, s_f)
						)'
					: 	'impedance_matrix_od64(''bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel''
							, Impedance
							, LinkSet_dom/F1
							, LinkSet_dom/F2
							, not(LinkSet_dom/IsOneDirection)
							, NodeSet_dom/OrgNode_rel
							, NodeSet_dom/DestNode_rel
							, convert(settings/max_traveldistance_min, s_f)
						)'
			{
				attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
			}
		}
		
		Template ImpedanceMatrix_with_AltImp_T
		{
			unit<uint32>      LinkSet_dom;
			unit<uint32>      NodeSet_dom;
			attribute<s_f>    Impedance (LinkSet_dom);
			attribute<km>     Distance  (LinkSet_dom);
			//
			unit<uint64> impedanceMatrix := =
				ModelParameters/InterpretAllRoadsAsBidirectional 
					? 	'impedance_matrix_od64(''bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel''
							, Impedance
							, LinkSet_dom/F1
							, LinkSet_dom/F2
							, NodeSet_dom/OrgNode_rel
							, NodeSet_dom/DestNode_rel
							, convert(settings/max_traveldistance_min, s_f)
							, Distance
						)'
					: 	'impedance_matrix_od64(''bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);alternative(link_imp):alt_imp;od:impedance,OrgZone_rel,DstZone_rel''
							, Impedance
							, LinkSet_dom/F1
							, LinkSet_dom/F2
							, not(LinkSet_dom/IsOneDirection)
							, NodeSet_dom/OrgNode_rel
							, NodeSet_dom/DestNode_rel
							, convert(settings/max_traveldistance_min, s_f)
							, Distance
						)'
			{
				attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
			}
		}
		
		Template ImpedanceMatrix_with_Linkset_T
		{
			unit<uint32>      LinkSet_dom;
			unit<uint32>      NodeSet_dom;
			attribute<s_f>    Impedance (LinkSet_dom);
			//
			unit<uint64> impedanceMatrix := =
				ModelParameters/InterpretAllRoadsAsBidirectional 
					? 	'impedance_matrix_od64(''bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel,LinkSet''
							, Impedance
							, LinkSet_dom/F1
							, LinkSet_dom/F2
							, NodeSet_dom/OrgNode_rel
							, NodeSet_dom/DestNode_rel
							, convert(settings/max_traveldistance_min, s_f)
						)'
					: 	'impedance_matrix_od64(''bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel,LinkSet''
							, Impedance
							, LinkSet_dom/F1
							, LinkSet_dom/F2
							, not(LinkSet_dom/IsOneDirection)
							, NodeSet_dom/OrgNode_rel
							, NodeSet_dom/DestNode_rel
							, convert(settings/max_traveldistance_min, s_f)
						)'
			{
				attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
				
				unit<uint32> AfgelegdeReis := sequence2points(LinkSet) //vertaling van LinkSet attribute (afgelegde route in OD), naar onderdelen van de reis
				{
					attribute<rdc>         Route (arc)    := points2sequence(LinkPoints/Point, LinkPoints/Sequence_rel, LinkPoints/Ordinal);
					attribute<rdc>         FromPoint      := LinkSet_dom/FromPoint[point];
					attribute<rdc>         ToPoint        := LinkSet_dom/ToPoint[point];

					unit<uint32> LinkPoints := union_unit(., .)
					{
						attribute<rdc>                  Point        := union_data(., FromPoint, ToPoint);
						attribute<..>                   Sequence_rel := union_data(., id(..), id(..));
						attribute<uint32>               Ordinal      := union_data(., const(0,..,uint32), const(1,..,uint32));
						attribute<...>                  Sequence_rel_old := AfgelegdeReis/Sequence_rel[Sequence_rel];
						attribute<uint32>               Ordinal_old      := AfgelegdeReis/Ordinal[Sequence_rel];
					}
				}
			}
		}
	}
	
	container Decayed
	{
		//OSM
		unit<uint64> MorningRush_OSM                  := ImpedanceMatrix_Decayed_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Morning_car);
		unit<uint64> NoonRush_OSM                     := ImpedanceMatrix_Decayed_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Noon_car);
		unit<uint64> LateEveningRush_OSM              := ImpedanceMatrix_Decayed_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/congested_Late_car);
		unit<uint64> MaxSpeed_OSM                     := ImpedanceMatrix_Decayed_T(OSM_LinkSet, OSM_NodeSet, OSM_LinkSet/Impedance_per_ImpedanceType/max_limit_car);

		///TOMTOM
		unit<uint64> MorningRush_TomTom               := ImpedanceMatrix_Decayed_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/MorningRush);
		unit<uint64> NoonRush_TomTom                  := ImpedanceMatrix_Decayed_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/NoonRush);
		unit<uint64> LateEveningRush_TomTom           := ImpedanceMatrix_Decayed_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/LateEveningRush);
		unit<uint64> Freeflow_TomTom                  := ImpedanceMatrix_Decayed_T(TomTom_LinkSet, TomTom_NodeSet, TomTom_LinkSet/Impedance_per_ImpedanceType/Freeflow);

		Template ImpedanceMatrix_Decayed_T
		{
			unit<uint32>      LinkSet_dom;
			unit<uint32>      NodeSet_dom;
			attribute<s_f>    Impedance (LinkSet_dom);
			//
			unit<uint64> impedanceMatrix := =
				ModelParameters/InterpretAllRoadsAsBidirectional 
					? 	'impedance_matrix_od64(''bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);interaction(v_i,w_j,dist_logit(alpha,beta,gamma)):D_i''
							, Impedance
							, LinkSet_dom/F1
							, LinkSet_dom/F2
							, NodeSet_dom/OrgNode_rel
							, NodeSet_dom/DestNode_rel
							, convert(settings/max_traveldistance_min, s_f)
							, 1f                                 // v_i
							, settings/dest_mass[float32]        // w_j
							, ModelParameters/Advanced/Distance_Decay/car_a , ModelParameters/Advanced/Distance_Decay/car_b , ModelParameters/Advanced/Distance_Decay/car_c
						)'
					: 	'impedance_matrix_od64(''bidirectional(link_flag);startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);interaction(v_i,w_j,dist_logit(alpha,beta,gamma)):D_i''
							, Impedance
							, LinkSet_dom/F1
							, LinkSet_dom/F2
							, not(LinkSet_dom/IsOneDirection)
							, NodeSet_dom/OrgNode_rel
							, NodeSet_dom/DestNode_rel
							, convert(settings/max_traveldistance_min, s_f)
							, 1f                                 // v_i
							, settings/dest_mass[float32]        // w_j
							, ModelParameters/Advanced/Distance_Decay/car_a , ModelParameters/Advanced/Distance_Decay/car_b , ModelParameters/Advanced/Distance_Decay/car_c
						)';
		}
	}
	
	
	container ExportTable_Decayed
	{
		attribute<float32> nr_items_of_interest_decayed_MaxSpeed_OSM        (org) := Decayed/MaxSpeed_OSM/impedanceMatrix/D_i;
		attribute<float32> nr_items_of_interest_decayed_MorningRush_OSM     (org) := Decayed/MorningRush_OSM/impedanceMatrix/D_i;
		attribute<float32> nr_items_of_interest_decayed_NoonRush_OSM        (org) := Decayed/NoonRush_OSM/impedanceMatrix/D_i;
		attribute<float32> nr_items_of_interest_decayed_LateEveningRush_OSM (org) := Decayed/LateEveningRush_OSM/impedanceMatrix/D_i;
		
		attribute<float32> nr_items_of_interest_decayed_Freeflow_TomTom        (org) := Decayed/Freeflow_TomTom/impedanceMatrix/D_i;
		attribute<float32> nr_items_of_interest_decayed_MorningRush_TomTom     (org) := Decayed/MorningRush_TomTom/impedanceMatrix/D_i;
		attribute<float32> nr_items_of_interest_decayed_NoonRush_TomTom        (org) := Decayed/NoonRush_TomTom/impedanceMatrix/D_i;
		attribute<float32> nr_items_of_interest_decayed_LateEveningRush_TomTom (org) := Decayed/LateEveningRush_TomTom/impedanceMatrix/D_i;
		
		attribute<string> BodyLines_OSM (org)    := org/name + ';' + string(nr_items_of_interest_decayed_MaxSpeed_OSM) + ';' + string(nr_items_of_interest_decayed_MorningRush_OSM)+';'+string(nr_items_of_interest_decayed_NoonRush_OSM)+';'+string(nr_items_of_interest_decayed_LateEveningRush_OSM);
		parameter<string> File_OSM               := 'Org;freeflow;MorningRush;NoonRush;LateEveningRush\n'++AsList(BodyLines_OSM, '\n'), StorageName = "=settings/fileNamePrefix+''+ModelParameters/Advanced/items_of_interest+'_decayed'+replace(settings/fileNameSuffix, '@@', 'Car', '##',  string(ModelParameters/MaxCarTime))+'.csv'", StorageType = "str";
		attribute<string> BodyLines_TomTom (org) := org/name + ';' + string(nr_items_of_interest_decayed_Freeflow_TomTom) + ';' + string(nr_items_of_interest_decayed_MorningRush_TomTom)+';'+string(nr_items_of_interest_decayed_NoonRush_TomTom)+';'+string(nr_items_of_interest_decayed_LateEveningRush_TomTom);
		parameter<string> File_TomTom            := 'Org;freeflow;MorningRush;NoonRush;LateEveningRush\n'++AsList(BodyLines_TomTom, '\n'), StorageName = "=settings/fileNamePrefix+''+ModelParameters/Advanced/items_of_interest+'_decayed'+replace(settings/fileNameSuffix, '@@', 'Car', '##',  string(ModelParameters/MaxCarTime))+'.csv'", StorageType = "str";
		parameter<string> File                   := =ModelParameters/UseTomTomNetworkForCars ? 'File_TomTom' : 'File_OSM'; 
	}
	
	
	parameter<string> ExportTable_Traveltimes_str := 	 switch(
															 case(ModelParameters/UseTomTomNetworkForCars  && ModelParameters/Export_AfgelegdeAfstand  , 'Traveltimes/Freeflow_TomTom_w_AltImp/impedanceMatrix')
															,case(ModelParameters/UseTomTomNetworkForCars  && !ModelParameters/Export_AfgelegdeAfstand , 'Traveltimes/Freeflow_TomTom/impedanceMatrix')
															,case(!ModelParameters/UseTomTomNetworkForCars && ModelParameters/Export_AfgelegdeAfstand  , 'Traveltimes/MaxSpeed_OSM_w_AltImp/impedanceMatrix')
															,case(!ModelParameters/UseTomTomNetworkForCars && !ModelParameters/Export_AfgelegdeAfstand , 'Traveltimes/MaxSpeed_OSM/impedanceMatrix')
															,''
														);
														
													
	unit<uint64> ExportTable_Traveltimes := =ExportTable_Traveltimes_str
	{
		parameter<string> NetworkTypeSuffix := ModelParameters/UseTomTomNetworkForCars ? '_TomTom' : '_OSM';
		parameter<string> Include_AltImp    := ModelParameters_base/Export_AfgelegdeAfstand ? '_w_AltImp' : '';
	
		attribute<org > Org_rel := OrgZone_rel;
		attribute<dest> Dst_rel := DstZone_rel;
		
		attribute<min_f> MaxSpeed_min        := convert(Impedance, min_f);
		attribute<min_f> MorningRush_min     := ='convert(rjoin(Org_Dest, Traveltimes/MorningRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Org_Dest, Traveltimes/MorningRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Impedance), min_f)';
		attribute<min_f> NoonRush_min        := ='convert(rjoin(Org_Dest, Traveltimes/NoonRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Org_Dest, Traveltimes/NoonRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Impedance), min_f)';
		attribute<min_f> LateEveningRush_min := ='convert(rjoin(Org_Dest, Traveltimes/LateEveningRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Org_Dest, Traveltimes/LateEveningRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Impedance), min_f)';
		
		attribute<km>    MaxSpeed_km         := ='Alt_imp';
		attribute<km>    MorningRush_km      := ='rjoin(Org_Dest, Traveltimes/MorningRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Org_Dest, Traveltimes/MorningRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Alt_imp)';  
		attribute<km>    NoonRush_km         := ='rjoin(Org_Dest, Traveltimes/NoonRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Org_Dest, Traveltimes/NoonRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Alt_imp)';
		attribute<km>    LateEveningRush_km  := ='rjoin(Org_Dest, Traveltimes/LateEveningRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Org_Dest, Traveltimes/LateEveningRush'+NetworkTypeSuffix+Include_AltImp+'/impedanceMatrix/Alt_imp)';
		
		attribute<bool>  IsCorrect_MorningRush     := MorningRush_min >= MaxSpeed_min;
		attribute<bool>  IsCorrect_NoonRush        := NoonRush_min >= MaxSpeed_min;
		attribute<bool>  IsCorrect_LateEveningRush := LateEveningRush_min >= MaxSpeed_min;
		
		attribute<string> BodyLines :=
			org/name[Org_rel] + ';' + 
			dest/name[Dst_rel] + ';' +
			string(MaxSpeed_min) + ';' + 
			string(MorningRush_min)+';' +
			string(NoonRush_min)+';' +
			string(LateEveningRush_min)+';' +
			string(MaxSpeed_km) + ';' + 
			string(MorningRush_km)+';' +
			string(NoonRush_km)+';' +
			string(LateEveningRush_km);
			
		attribute<string> BodyLines_woDistance :=
			org/name[Org_rel] + ';' + 
			dest/name[Dst_rel] + ';' +
			string(MaxSpeed_min) + ';' + 
			string(MorningRush_min)+';' +
			string(NoonRush_min)+';' +
			string(LateEveningRush_min);
			
		attribute<string> BodyLines_woCongestion :=
			org/name[Org_rel] + ';' + 
			dest/name[Dst_rel] + ';' +
			string(MaxSpeed_min) + ';' +
			string(MaxSpeed_km);
			
		parameter<string> File_full         := 'Org;Dst;MaxSpeed;MorningRush;NoonRush;LateEveningRush;MaxSpeed_km;MorningRush_km;NoonRush_km;LateEveningRush_km\n'++AsList(BodyLines, '\n'), StorageName = "=settings/fileNamePrefix+'Traveltimes'+replace(settings/fileNameSuffix, '@@', 'Car', '##',  string(ModelParameters/MaxCarTime))+'.csv'", StorageType = "str";
		parameter<string> File_woDistance   := 'Org;Dst;MaxSpeed;MorningRush;NoonRush;LateEveningRush\n'++AsList(BodyLines_woDistance, '\n'), StorageName = "=settings/fileNamePrefix+'Traveltimes'+replace(settings/fileNameSuffix, '@@', 'Car', '##',  string(ModelParameters/MaxCarTime))+'.csv'", StorageType = "str";
		parameter<string> File_woCongestion := 'Org;Dst;MaxSpeed;MaxSpeed_km\n'++AsList(BodyLines_woCongestion, '\n'), StorageName = "=settings/fileNamePrefix+'Traveltimes'+replace(settings/fileNameSuffix, '@@', 'Car', '##',  string(ModelParameters/MaxCarTime))+'.csv'", StorageType = "str"; 
		
		parameter<string> File              := =ModelParameters/Export_AfgelegdeAfstand ? 'File_full' : 'File_woDistance';
	}
}
