Template PrivateTransport_Car_T
{
	unit<uint32>       org;
	unit<uint32>       dest;
	parameter<bool>    DoMakeAllPairs;
	///
	parameter<string>  netwerk_type_OSM := 'car';

	container Settings
	{
		parameter<string>  netwerk_type_Logit := netwerk_type_OSM == classifications/OSM/netwerk_type/name[classifications/OSM/netwerk_type/V/Pedestrian] ? classifications/OSM/netwerk_type/name[classifications/OSM/netwerk_type/V/Bike] : netwerk_type_OSM;
		
		parameter<min_f>   max_traveldistance_min  := ModelParameters/MaxCarTime;
		attribute<uint32>  dest_mass (dest) := ='dest/'+ModelParameters/items_of_interest;
		
		parameter<string>  fileNamePrefix :=  ModelParameters/Advanced/fileNamePrefix;
		parameter<string>  fileNameSuffix :=  
			'_ORG-'    + ModelParameters/Orgset + '-' + regio_name + 
			'_DEST-'   + ModelParameters/Advanced/DestSet_string +
			'_NETWERK-'+ netwerk_type_OSM +
			'_DayGroup-'+ModelParameters/CongestionSpeed_DaySelection +
			'_MaxTime-' + string(ModelParameters/MaxCarTime)+'min';

		parameter<string> logit_weight_prefix := 'ModelParameters/Advanced/Distance_Decay/' + netwerk_type_Logit;
		parameter<string> logit_weights_expr  := logit_weight_prefix+'_a, ' + logit_weight_prefix+'_b, ' + logit_weight_prefix+'_c';
	}

	unit<uint32> RoadDomain := SourceData/Infrastructuur/OSM/Network_Car/isVerbonden;
	
	container Create_Optimised_Network  := Templates/CreateNetwork_Efficient_T(org, dest, RoadDomain, netwerk_type_OSM);

	container Traveltimes
	{
		unit<uint64> MorningRush :=
			dijkstra_m64('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel'
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/Impedance_per_ImpedanceType/congested_morning_car
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F1
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F2
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/OrgNode_rel
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/DestNode_rel
				, convert(settings/max_traveldistance_min, s_f) //cut impedance      
			)
		{
			attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
		}
		
		unit<uint64> NoonRush :=
			dijkstra_m64('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel'
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/Impedance_per_ImpedanceType/congested_noon_car
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F1
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F2
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/OrgNode_rel
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/DestNode_rel
				, convert(settings/max_traveldistance_min, s_f) //cut impedance      
			)
		{
			attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
		}
		
		unit<uint64> LateEveningRush :=
			dijkstra_m64('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel'
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/Impedance_per_ImpedanceType/congested_Late_car
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F1
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F2
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/OrgNode_rel
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/DestNode_rel
				, convert(settings/max_traveldistance_min, s_f) //cut impedance      
			)
		{
			attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
		}
		
		unit<uint64> MaxSpeed :=
			dijkstra_m64('bidirectional;startPoint(Node_rel):max_imp;endPoint(Node_rel);cut(OrgZone_max_imp);od:impedance,OrgZone_rel,DstZone_rel'
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/Impedance_per_ImpedanceType/max_limit_car
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F1
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F2
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/OrgNode_rel
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/DestNode_rel
				, convert(settings/max_traveldistance_min, s_f) //cut impedance      
			)
		{
			attribute<string> Org_Dest := string(OrgZone_rel)+'_'+string(DstZone_rel);
		}
	}
	
	container Decayed
	{
		unit<uint64> MorningRush := 
			dijkstra_m64('bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);interaction(v_i,w_j,dist_logit(alpha,beta,gamma)):D_i'
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/Impedance_per_ImpedanceType/congested_morning_car
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F1
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F2
				
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/OrgNode_rel
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/DestNode_rel
				, convert(settings/max_traveldistance_min, s_f) 
				, 1f                                 // v_i
				, settings/dest_mass[float32]        // w_j
				, ModelParameters/Advanced/Distance_Decay/car_a , ModelParameters/Advanced/Distance_Decay/car_b , ModelParameters/Advanced/Distance_Decay/car_c
			);

		unit<uint64> NoonRush := 
			dijkstra_m64('bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);interaction(v_i,w_j,dist_logit(alpha,beta,gamma)):D_i'
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/Impedance_per_ImpedanceType/congested_noon_car
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F1
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F2
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/OrgNode_rel
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/DestNode_rel
				, convert(settings/max_traveldistance_min, s_f) 
				, 1f                                 // v_i
				, settings/dest_mass[float32]        // w_j
				, ModelParameters/Advanced/Distance_Decay/car_a , ModelParameters/Advanced/Distance_Decay/car_b , ModelParameters/Advanced/Distance_Decay/car_c
			);

		unit<uint64> LateEveningRush := 
			dijkstra_m64('bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);interaction(v_i,w_j,dist_logit(alpha,beta,gamma)):D_i'
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/Impedance_per_ImpedanceType/congested_Late_car
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F1
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F2
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/OrgNode_rel
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/DestNode_rel
				, convert(settings/max_traveldistance_min, s_f) 
				, 1f                                 // v_i
				, settings/dest_mass[float32]        // w_j
				, ModelParameters/Advanced/Distance_Decay/car_a , ModelParameters/Advanced/Distance_Decay/car_b , ModelParameters/Advanced/Distance_Decay/car_c
			);

		unit<uint64> MaxSpeed := 
			dijkstra_m64('bidirectional;startPoint(Node_rel);endPoint(Node_rel);cut(OrgZone_max_imp);interaction(v_i,w_j,dist_logit(alpha,beta,gamma)):D_i'
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/Impedance_per_ImpedanceType/max_limit_car
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F1
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalLinkSet/F2
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/OrgNode_rel
				, Create_Optimised_Network/CreateMoreEfficientNetwork/FinalNodeSet/DestNode_rel
				, convert(settings/max_traveldistance_min, s_f)
				, 1f                                 // v_i
				, settings/dest_mass[float32]        // w_j
				, ModelParameters/Advanced/Distance_Decay/car_a , ModelParameters/Advanced/Distance_Decay/car_b , ModelParameters/Advanced/Distance_Decay/car_c
			);
	}
	
	
	container ExportTable_Decayed
	{
		attribute<float32> nr_items_of_interest_decayed_MaxSpeed        (org) := Decayed/MaxSpeed/D_i;
		attribute<float32> nr_items_of_interest_decayed_MorningRush     (org) := Decayed/MorningRush/D_i;
		attribute<float32> nr_items_of_interest_decayed_NoonRush        (org) := Decayed/NoonRush/D_i;
		attribute<float32> nr_items_of_interest_decayed_LateEveningRush (org) := Decayed/LateEveningRush/D_i;
		attribute<float32> Loss_MorningRush       (org) := nr_items_of_interest_decayed_MaxSpeed - nr_items_of_interest_decayed_MorningRush;
		attribute<float32> Loss_NoonRush          (org) := nr_items_of_interest_decayed_MaxSpeed - nr_items_of_interest_decayed_NoonRush;
		attribute<float32> Loss_LateEveningRush   (org) := nr_items_of_interest_decayed_MaxSpeed - nr_items_of_interest_decayed_LateEveningRush;
		
		attribute<string> BodyLines (org) := org/name + ';' + string(nr_items_of_interest_decayed_MaxSpeed) + ';' + string(nr_items_of_interest_decayed_MorningRush)+';'+string(nr_items_of_interest_decayed_NoonRush)+';'+string(nr_items_of_interest_decayed_LateEveningRush);
		parameter<string> File            := 'Org;freeflow;MorningRush;NoonRush;LateEveningRush\n'++AsList(BodyLines, '\n'), StorageName = "=settings/fileNamePrefix+''+ModelParameters/items_of_interest+'_decayed'+settings/fileNameSuffix +'.csv'", StorageType = "str";
	}
	
	unit<uint64> ExportTable_Traveltimes := Traveltimes/MaxSpeed
	{
		attribute<org > Org_rel := OrgZone_rel;
		attribute<dest> Dst_rel := DstZone_rel;
		
		attribute<min_f> MaxSpeed_min        := convert(Impedance, min_f);
		attribute<min_f> MorningRush_min     := convert(rjoin(Org_Dest, Traveltimes/MorningRush/Org_Dest, Traveltimes/MorningRush/Impedance), min_f);
		attribute<min_f> NoonRush_min        := convert(rjoin(Org_Dest, Traveltimes/NoonRush/Org_Dest, Traveltimes/NoonRush/Impedance), min_f);
		attribute<min_f> LateEveningRush_min := convert(rjoin(Org_Dest, Traveltimes/LateEveningRush/Org_Dest, Traveltimes/LateEveningRush/Impedance), min_f);
		
		attribute<bool>  IsCorrect_MorningRush     := MorningRush_min >= MaxSpeed_min;
		attribute<bool>  IsCorrect_NoonRush        := NoonRush_min >= MaxSpeed_min;
		attribute<bool>  IsCorrect_LateEveningRush := LateEveningRush_min >= MaxSpeed_min;
		
		attribute<string> BodyLines :=
			org/name[Org_rel] + ';' + 
			dest/name[Dst_rel] + ';' +
			string(MaxSpeed_min) + ';' + 
			string(MorningRush_min)+';' +
			string(NoonRush_min)+';' +
			string(LateEveningRush_min);
			
		attribute<string> BodyLines_woCongestion :=
			org/name[Org_rel] + ';' + 
			dest/name[Dst_rel] + ';' +
			string(MaxSpeed_min);
			
		parameter<string> File := 'Org;Dst;MaxSpeed;MorningRush;NoonRush;LateEveningRush\n'++AsList(BodyLines, '\n'), StorageName = "=settings/fileNamePrefix+'Traveltimes'+settings/fileNameSuffix +'.csv'", StorageType = "str";
		parameter<string> File_woCongestion := 'Org;Dst;MaxSpeed\n'++AsList(BodyLines_woCongestion, '\n'), StorageName = "=settings/fileNamePrefix+'Traveltimes'+settings/fileNameSuffix +'.csv'", StorageType = "str";
	}
}
