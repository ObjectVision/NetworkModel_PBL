Template ReadExport_OV_perTime_T
{
	parameter<string> Export_CombinationTypes;
	parameter<string> Org_str;
	parameter<string> Dest_str;
	///
	
	container PerTime := 
		for_each_ne(
			Advanced/MeasureMoments/name
			, 'ReadCSV_T('+quote(Advanced/MeasureMoments/name)+')'
		);
		
	Template ReadCSV_T
	{ 
		parameter<string> Time;	
		///
		parameter<string> filename       := Advanced/fileNamePrefix+'Traveltime_Long_'+Export_CombinationTypes+''+fileNameSuffix+'.csv';
		
		parameter<string> fileNameSuffix :=  
			'_' + Analysis_Date + 
			'_' + Advanced/Arrival_or_Departure_at_time + 
			'_' + Time + 
			'_ORG-' + Orgset + '-' + Org_str + 
			'_DEST-'   + Dest_str;
		
		unit<uint64>      domain         := range(uint64, 0[uint64], count_rows);
		parameter<string> fieldseparator := ';';
		parameter<string> filedata       :  StorageType   = "str",  StorageName = "=filename",  StorageReadOnly = "true";
		parameter<uint64> count_rows     := (strcount(filedata, fieldseparator) / strcount(headerline, fieldseparator))[uint64] - 1[uint64];
		parameter<string> headerline     := readLines(filedata, void, 0);
		
		unit<uint32> field := Range(uint32, 0, strcount(headerline, fieldseparator) + 1)
		{
			attribute<string> name := ReadArray(headerline , field, string, 0);
		}
			
		attribute<string> bodylines (domain) := readLines(filedata, domain, headerline/ReadPos);

		container data := 
			for_each_nedv(
				field/name
				,'ReadElems(
					BodyLines
					,string
					,'+ MakeDefined(field/name[sub_or_null(id(field),1)] + '/ReadPos','const(0, domain)')+'
					, 17
				)'
				,domain
				,string
			)
		{
			attribute<min_f>               Traveltime              (domain) := ='Traveltime_m_'+Time+'[float32] * 1[min_f]';
			attribute<string>              ModeUsed                (domain) := ='ModeUsed_'+Time;
			attribute<string>              OrgDestName             (domain) := OrgName + '_' + DestName;
		}
	}
}
