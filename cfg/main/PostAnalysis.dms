container PostAnalysis : using = "units"
{
	container ReadExport_OV_RSL := 
		for_each_ne(
			ModelParameters/Advanced/Export_CombinationTypes/name
			, 'Per_Export_CombinationTypes_T('+quote(ModelParameters/Advanced/Export_CombinationTypes/name)+')'
		) 
	{
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList(ModelParameters/Advanced/Export_CombinationTypes/name+'/ReadExport_OV/generate', ';')";
	} 
	
	container ReadExport_OV_Groen := 
		for_each_ne(
			ModelParameters/Advanced/Export_CombinationTypes/name
			, 'Per_Export_CombinationTypes_T('+quote(ModelParameters/Advanced/Export_CombinationTypes/name)+')'
		) 
	{
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList(ModelParameters/Advanced/Export_CombinationTypes/name+'/ReadExport_OV/generate', ';')";
	} 
	
	container ReadExport_Pedestrian_Groen  := ReadExport_PrivateTransport_T('pedestrian')
	{
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "ExportTable_Traveltimes/File";
	}
	container ReadExport_Bike_Groen        := ReadExport_PrivateTransport_T('bike')
	{
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "ExportTable_Traveltimes/File";
	}
	container ReadExport_Car_Groen         := ReadExport_PrivateTransport_T('car')
	{
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "ExportTable_Traveltimes/File";
	}
	
	Template Per_Export_CombinationTypes_T
	{
		parameter<string> Export_CombinationTypes;
		///
		
		container ReadExport_OV := 
			for_each_ne(
				ModelParameters/Advanced/MeasureMoments/name
				, 'ReadExport_OV_T('+quote(/ModelParameters/Advanced/MeasureMoments/name)+', '+quote(Export_CombinationTypes)+')'
			)
		{
			parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList(ModelParameters/Advanced/MeasureMoments/name+'/ExportTable_Traveltimes/File', ';')";
		}
		container ReadExport_OV_mergeTimes := 
			for_each_ne(
				ModelParameters/Advanced/MeasureMoments/name
				, 'ReadExport_OV_mergeTimes_T('+quote(/ModelParameters/Advanced/MeasureMoments/name)+', '+quote(Export_CombinationTypes)+')'
			)
		{
			// parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList(ModelParameters/Advanced/MeasureMoments/name+'/ExportTable_Traveltimes/File', ';')";
			
			unit<uint64> Combine_OrgDest        := combine_uint64(/NetworkSetup/ConfigurationPerRegio/all/org, /NetworkSetup/ConfigurationPerRegio/all/dest)
			{
				attribute<string> OrgName  := /NetworkSetup/ConfigurationPerRegio/all/org/name[nr_1];
				attribute<string> DestName := /NetworkSetup/ConfigurationPerRegio/all/dest/name[nr_2];
				attribute<string> Label    := OrgName +'_'+DestName, DialogType = "LabelText";
				
				container GetAverageTimes := 
					for_each_nedv(
						ModelParameters/Advanced/MeasureMoments/name
						, 'rjoin(Label, ReadExport_OV_mergeTimes/'+ModelParameters/Advanced/MeasureMoments/name+'/ReadCSV/Data/OrgDestName, ReadExport_OV_mergeTimes/'+ModelParameters/Advanced/MeasureMoments/name+'/ReadCSV/Data/Traveltime)'
						, Combine_OrgDest
						, min_f
					)
				{
					attribute<min_f> avg_traveltime (Combine_OrgDest) := ='add('+AsItemList(ModelParameters/Advanced/MeasureMoments/name)+') / float32(#ModelParameters/Advanced/MeasureMoments)';
				}
				
				
			}
			
			unit<uint64> ExportTable_Traveltimes := subset(IsDefined(Combine_OrgDest/GetAverageTimes/avg_traveltime))
			{
				attribute<min_f>  avg_traveltime_piek := Combine_OrgDest/GetAverageTimes/avg_traveltime[nr_OrgEntity];
				attribute<string> OrgName             := Combine_OrgDest/OrgName[nr_OrgEntity];
				attribute<string> DestName            := Combine_OrgDest/OrgName[nr_OrgEntity];
				attribute<string> Label               := OrgName +'_'+DestName, DialogType = "LabelText";
				
				attribute<string> BodyLines :=
					OrgName + ';' + 
					DestName + ';' + 
					string(avg_traveltime_piek);
				parameter<string> File := 'OrgName;DestName;avg_traveltime_piek\n'++AsList(BodyLines, '\n'), StorageName = "=ModelParameters/Advanced/fileNamePrefix+'Traveltime_'+Export_CombinationTypes+''+fileNameSuffix+'_avg_traveltime.csv'", StorageType = "str";
			
				parameter<string> fileNameSuffix :=  
					'_' + ModelParameters/Analysis_Date + 
					'_ORG-'    + ModelParameters/Orgset + '-All' + 
					'_DEST-'   + ModelParameters/Advanced/DestSet_string +
					'_O2SWtime-' + string(ModelParameters/MaxWalkingTime_Org2Stop)+'min';
			}
			

		}
	}
	
	Template ReadExport_OV_T
	{
		parameter<string> Time;
		parameter<string> Export_CombinationTypes;

		///
		
		container ReadCSV
		{ 
			parameter<string> filename       := ModelParameters/Advanced/fileNamePrefix+'Traveltime_Long_'+Export_CombinationTypes+''+fileNameSuffix+'.csv';
			
			parameter<string> fileNameSuffix :=  
				'_' + ModelParameters/Analysis_Date + 
				'_' + ModelParameters/Arrival_or_Departure_at_time + 
				'_' + Time + 
				'_ORG-'    + ModelParameters/Orgset + '-All' + 
				'_DEST-'   + ModelParameters/Advanced/DestSet_string +
				'_O2SWtime-' + string(ModelParameters/MaxWalkingTime_Org2Stop)+'min';
			
			unit<uint64>      domain         := range(uint64, 0[uint64], count_rows);
			parameter<string> fieldseparator := ';';
			parameter<string> filedata       :  StorageType   = "str",  StorageName = "=filename",  StorageReadOnly = "true";
			parameter<uint64> count_rows     := (strcount(filedata, fieldseparator) / strcount(headerline, fieldseparator))[uint64] - 1[uint64];
			parameter<string> headerline     := readLines(filedata, void, 0);
			
			unit<uint32> field := Range(uint32, 0, strcount(headerline, fieldseparator) + 1)
			{
				attribute<string> name := ReadArray(headerline , field, string, 0);
			}
				
			attribute<string> bodylines (domain) := readLines(filedata, domain, headerline/ReadPos);

			container data := 
				for_each_nedv(
					field/name
					,'ReadElems(
						BodyLines
						,string
						,'+ MakeDefined(field/name[id(field)-1] + '/ReadPos','const(0, domain)')+'
						, 17
					)'
					,domain
					,string
				)
			{
				attribute<uint32>              Groen_id                (domain) := rjoin(DestName[uint32], /NetworkSetup/ConfigurationPerRegio/all/dest/GROEN_pnt_ID, NetworkSetup/ConfigurationPerRegio/all/dest/GROEN_ID);
				attribute<string>              org_groen_id_key        (domain) := OrgName + '_' + string(groen_id);
				attribute<min_f>               Traveltime              (domain) := ='Traveltime_m_'+Time+'[float32] * 1[min_f]';
				attribute<string>              groen_id_tt_key         (domain) := string(groen_id) + '_' + string(Traveltime);
				attribute<uq_org_groen_id_key> uq_org_groen_id_key_rel (domain) := rlookup(org_groen_id_key, uq_org_groen_id_key/values);
				
				
				unit<uint64> uq_org_groen_id_key := unique(org_groen_id_key)
				{
					attribute<string>  org                       := first(data/OrgName, data/uq_org_groen_id_key_rel);
					attribute<uint32>  groen_id                  := first(data/Groen_id, data/uq_org_groen_id_key_rel);
					attribute<string>  groen_id_tt_key           := string(groen_id) + '_' + string(Traveltime);
					attribute<uint32>  groen_pnt_id              := rjoin(groen_id_tt_key, data/groen_id_tt_key, DestName[uint32]);
					attribute<string>  ModeUsed                  := ='rjoin(groen_id_tt_key, data/groen_id_tt_key, ModeUsed_'+Time+')';
					attribute<min_f>   Traveltime                := min(data/Traveltime, data/uq_org_groen_id_key_rel);
					
				}
			}
		}
		
		unit<uint64> ExportTable_Traveltimes := ReadCSV/Data/uq_org_groen_id_key
		{
			attribute<string> BodyLines :=
				org + ';' + 
				string(groen_pnt_id) + ';' +
				string(groen_id) + ';' +
				string(Traveltime) + ';' +
				ModeUsed;
			parameter<string> File := 'OrgName;DestName;Groen_ID;Traveltime_'+Time+';ModeUsed_'+Time+'\n'++AsList(BodyLines, '\n'), StorageName = "=ModelParameters/Advanced/fileNamePrefix+'Traveltime_Long_'+Export_CombinationTypes+''+ReadCSV/fileNameSuffix+'_GroenAggr.csv'", StorageType = "str";
		}
	}
	
	Template ReadExport_OV_mergeTimes_T
	{
		parameter<string> Time;
		parameter<string> Export_CombinationTypes;

		///
		
		container ReadCSV
		{ 
			parameter<string> filename       := ModelParameters/Advanced/fileNamePrefix+'Traveltime_Long_'+Export_CombinationTypes+''+fileNameSuffix+'.csv';
			
			parameter<string> fileNameSuffix :=  
				'_' + ModelParameters/Analysis_Date + 
				'_' + ModelParameters/Arrival_or_Departure_at_time + 
				'_' + Time + 
				'_ORG-'    + ModelParameters/Orgset + '-All' + 
				'_DEST-'   + ModelParameters/Advanced/DestSet_string +
				'_O2SWtime-' + string(ModelParameters/MaxWalkingTime_Org2Stop)+'min';
			
			unit<uint64>      domain         := range(uint64, 0[uint64], count_rows);
			parameter<string> fieldseparator := ';';
			parameter<string> filedata       :  StorageType   = "str",  StorageName = "=filename",  StorageReadOnly = "true";
			parameter<uint64> count_rows     := (strcount(filedata, fieldseparator) / strcount(headerline, fieldseparator))[uint64] - 1[uint64];
			parameter<string> headerline     := readLines(filedata, void, 0);
			
			unit<uint32> field := Range(uint32, 0, strcount(headerline, fieldseparator) + 1)
			{
				attribute<string> name := ReadArray(headerline , field, string, 0);
			}
				
			attribute<string> bodylines (domain) := readLines(filedata, domain, headerline/ReadPos);

			container data := 
				for_each_nedv(
					field/name
					,'ReadElems(
						BodyLines
						,string
						,'+ MakeDefined(field/name[id(field)-1] + '/ReadPos','const(0, domain)')+'
						, 17
					)'
					,domain
					,string
				)
			{
				attribute<min_f>               Traveltime              (domain) := ='Traveltime_m_'+Time+'[float32] * 1[min_f]';
				attribute<string>              OrgDestName             (domain) := OrgName + '_' + DestName;
			}
		}
	}
	
	
	

	
	Template ReadExport_PrivateTransport_T
	{
		parameter<string> NetwerkType;
		///
		parameter<string> MaxTravelTime := NetwerkType == 'car' 
											? string(ModelParameters/MaxCarTime)
											: NetwerkType == 'bike'
												? string(ModelParameters/MaxBikingTime_Org2Dest)
												: NetwerkType == 'pedestrian'
													? string(ModelParameters/MaxPedestrianTime_Org2Dest)
													: '';
	
		parameter<string> fileNameSuffix := NetwerkType == 'car' 
												? fileNameSuffix_car
												: fileNameSuffix_other;
		
		parameter<string> fileNameSuffix_car :=  
			'_ORG-'      + ModelParameters/Orgset + '-All' + 
			'_DEST-'     + ModelParameters/Advanced/DestSet_string +
			'_NETWERK-'  + NetwerkType + 
			'_DayGroup-' + ModelParameters/CongestionSpeed_DaygroupSelection +
			'_MaxTime-'  + MaxTravelTime+'min';
			
		parameter<string> fileNameSuffix_other :=  
			'_ORG-'      + ModelParameters/Orgset + '-All' + 
			'_DEST-'     + ModelParameters/Advanced/DestSet_string +
			'_NETWERK-'  + NetwerkType + 
			'_MaxTime-'  + MaxTravelTime+'min';
			
		container ReadCSV
		{ 
			parameter<string> filename       := ModelParameters/Advanced/fileNamePrefix+'Traveltimes'+fileNameSuffix+'.csv';
			
			unit<uint64>      domain         := range(uint64, 0[uint64], count_rows);
			parameter<string> fieldseparator := ';';
			parameter<string> filedata       :  StorageType   = "str",  StorageName = "=filename",  StorageReadOnly = "true";
			parameter<uint64> count_rows     := (strcount(filedata, fieldseparator) / strcount(headerline, fieldseparator))[uint64] - 1[uint64];
			parameter<string> headerline     := readLines(filedata, void, 0);
			
			unit<uint32> field := Range(uint32, 0, strcount(headerline, fieldseparator) + 1)
			{
				attribute<string> name := ReadArray(headerline , field, string, 0);
			}
				
			attribute<string> bodylines (domain) := readLines(filedata, domain, headerline/ReadPos);

			container data := 
				for_each_nedv(
					field/name
					,'ReadElems(
						BodyLines
						,string
						,'+ MakeDefined(field/name[id(field)-1] + '/ReadPos','const(0, domain)')+'
						, 17
					)'
					,domain
					,string
				)
			{
				attribute<uint32>              Groen_id                (domain) := rjoin(Dst[uint32], /NetworkSetup/ConfigurationPerRegio/all/dest/GROEN_pnt_ID, NetworkSetup/ConfigurationPerRegio/all/dest/GROEN_ID);
				attribute<string>              org_groen_id_key        (domain) := org + '_' + string(groen_id);
				
				attribute<uq_org_groen_id_key> uq_org_groen_id_key_rel (domain) := rlookup(org_groen_id_key, uq_org_groen_id_key/values);
				
				
				unit<uint64> uq_org_groen_id_key := unique(org_groen_id_key)
				{
					attribute<string>  org                  := first(data/org, data/uq_org_groen_id_key_rel);
					attribute<uint32>  groen_id             := first(data/Groen_id, data/uq_org_groen_id_key_rel);
					attribute<min_f>   max_speed_min        := min(data/maxspeed[float32] / 60f * 1[min_f], data/uq_org_groen_id_key_rel);
					attribute<min_f>   MorningRush_min      := min(data/MorningRush[float32] / 60f * 1[min_f], data/uq_org_groen_id_key_rel);
					attribute<min_f>   NoonRush_min         := min(data/NoonRush[float32] / 60f * 1[min_f], data/uq_org_groen_id_key_rel);
					attribute<min_f>   LateEveningRush_min  := min(data/LateEveningRush[float32] / 60f * 1[min_f], data/uq_org_groen_id_key_rel);
					
				}
			}
		}
		
		unit<uint64> ExportTable_Traveltimes := ReadCSV/Data/uq_org_groen_id_key
		{
			attribute<string> BodyLines :=
				org + ';' + 
				string(groen_id) + ';' +
				// string(max_speed_min);
				string(max_speed_min) + ';' + 
				string(MorningRush_min)+';' +
				string(NoonRush_min)+';' +
				string(LateEveningRush_min);
			parameter<string> File := 'Org;Dst;MaxSpeed;MorningRush;NoonRush;LateEveningRush\n'++AsList(BodyLines, '\n'), StorageName = "=ModelParameters/Advanced/fileNamePrefix+'Traveltimes'+ReadCSV/fileNameSuffix+'_GroenAggr.csv'", StorageType = "str";
			// parameter<string> File := 'Org;Dst;MaxSpeed\n'++AsList(BodyLines, '\n'), StorageName = "=ModelParameters/Advanced/fileNamePrefix+'Traveltimes'+ReadCSV/fileNameSuffix+'_GroenAggr.csv'", StorageType = "str";
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	// container ReadExport_OV_60m   := ReadExport_OV_T('At_07h00m00s','60');
	// container ReadExport_OV_120m  := ReadExport_OV_T('At_07h00m00s','120');
	
	// container ReadExport_Car_low  := ReadExport_PrivateTransport_T('60');
	// container ReadExport_Car_high := ReadExport_PrivateTransport_T('999');
	
	// container Diff_OV
	// {
		// unit<uint32> csv60m       := ReadExport_OV_60m/ReadCSV/domain;
		// unit<uint32> csv120m      := ReadExport_OV_120m/ReadCSV/domain;
		// container    csv60m_data  := ReadExport_OV_60m/ReadCSV/data
		// {
			// attribute<string> Key (csv60m)       := OrgName + '_' + DestName;
		// }
		
		// container    csv120m_data := ReadExport_OV_120m/ReadCSV/data
		// {
			// attribute<string> Key (csv120m)       := OrgName + '_' + DestName;
		// }
		
		// unit<uint32> comb := union_unit(csv60m,csv120m), KeepData = "true"
		// {
			// attribute<string> OrgName    := union_data(.,csv60m_data/OrgName,csv120m_data/OrgName);
			// attribute<string> DestName   := union_data(.,csv60m_data/DestName,csv120m_data/DestName);
			// attribute<string> Key        := OrgName + '_' + DestName;
			
			// unit<uint32> uq := unique(key), KeepData = "true"
			// {
				// attribute<string> label    := values;
				// attribute<string> tt_60m   := rjoin(values, csv60m_data/key, csv60m_data/Traveltime_m_At_07h00m00s);
				// attribute<string> tt_120m  := rjoin(values, csv120m_data/key, csv120m_data/Traveltime_m_At_07h00m00s);
				// attribute<bool>   IsEqual  := tt_60m == tt_120m;
				// attribute<bool>   IsUnEqualValue := IsDefined(tt_60m) ? tt_60m != tt_120m : (0/0)[bool];
			
			// }
		// }
		
	// }
	
	// container Diff_Car
	// {
		// unit<uint32> csv_low       := ReadExport_Car_low/ReadCSV/domain;
		// unit<uint32> csv_high      := ReadExport_Car_high/ReadCSV/domain;
		// container    csv_low_data  := ReadExport_Car_low/ReadCSV/data
		// {
			// attribute<string> Key (csv_low)       := Org + '_' + Dst;
		// }
		
		// container    csv_high_data := ReadExport_Car_high/ReadCSV/data
		// {
			// attribute<string> Key (csv_high)       := Org + '_' + Dst;
		// }
		
		// unit<uint32> comb := union_unit(csv_low,csv_high), KeepData = "true"
		// {
			// attribute<string> OrgName    := union_data(.,csv_low_data/Org,csv_high_data/Org);
			// attribute<string> DestName   := union_data(.,csv_low_data/Dst,csv_high_data/Dst);
			// attribute<string> Key        := OrgName + '_' + DestName;
			
			// unit<uint32> uq := unique(key), KeepData = "true"
			// {
				// attribute<string>  label    := values;
				// attribute<float32> tt_low   := rjoin(values, csv_low_data/key, csv_low_data/maxspeed)[float32] / 60f;
				// attribute<float32> tt_high  := rjoin(values, csv_high_data/key, csv_high_data/maxspeed)[float32];
				
				// attribute<bool>    IsUnEqualValue     := IsDefined(tt_low) ? tt_low != tt_high : (0/0)[bool];
				// attribute<bool>    IsCorrect          := tt_high < float32(ReadExport_Car_low/MaxTime) && !IsDefined(tt_low) ? FALSE : TRUE;
				// attribute<float32> tt_low_if_faulty   := IsCorrect == FALSE ? tt_high : 0f/0f;
			// }
		// }
		
	// }
	



	
	
	


}